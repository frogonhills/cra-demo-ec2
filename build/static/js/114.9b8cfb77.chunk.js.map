{"version":3,"sources":["@jumbo/components/PageComponents/layouts/PageContainer.js","@jumbo/components/PageComponents/PageHeader.js","@jumbo/components/PageComponents/PageBreadcrumbs/index.js","@jumbo/components/PageComponents/layouts/CorematComponentDemo.js","@jumbo/components/PageComponents/layouts/MuiComponentDemo.js","@jumbo/components/PageComponents/layouts/ComponentsDemo.js","webpack:///./src/@fake-db/mui-components/toggle-buttons sync nonrecursive ./node_modules/raw-loader/dist/cjs.js \\.(txt|js|md|tsx)$?f699","@fake-db/mui-components/toggle-buttons/CustomizedDividers.txt","@fake-db/mui-components/toggle-buttons/StandaloneToggleButton.txt","@fake-db/mui-components/toggle-buttons/ToggleButtonNotEmpty.txt","@fake-db/mui-components/toggle-buttons/ToggleButtonSizes.txt","@fake-db/mui-components/toggle-buttons/ToggleButtonsExclusive.txt","@fake-db/mui-components/toggle-buttons/ToggleButtonsMultiple.txt","@fake-db/mui-components/toggle-buttons/VerticalToggleButtons.txt","routes/Components/MuiComponents/ToggleButtons/demo/ToggleButtonsExclusive.js","routes/Components/MuiComponents/ToggleButtons/demo/ToggleButtonsMultiple.js","routes/Components/MuiComponents/ToggleButtons/demo/ToggleButtonSizes.js","routes/Components/MuiComponents/ToggleButtons/demo/VerticalToggleButtons.js","routes/Components/MuiComponents/ToggleButtons/demo/ToggleButtonNotEmpty.js","routes/Components/MuiComponents/ToggleButtons/demo/StandaloneToggleButton.js","routes/Components/MuiComponents/ToggleButtons/demo/CustomizedDividers.js","routes/Components/MuiComponents/ToggleButtons/index.js"],"names":["useStyles","makeStyles","pageFull","width","PageContainer","heading","breadcrumbs","children","className","restProps","classes","in","direction","mountOnEnter","unmountOnExit","clsx","breadcrumbComponent","items","theme","pageHeaderRoot","display","flexDirection","breakpoints","up","alignItems","titleRoot","down","marginBottom","PageHeader","rest","Box","mb","xs","md","lg","Typography","component","variant","ml","sm","textSm","fontSize","linkBlock","color","PageBreadcrumbs","Breadcrumbs","aria-label","map","item","index","isActive","key","label","to","link","CorematComponentDemo","SourceCodeComponent","SettingsComponent","GridContainer","Grid","CmtCard","MuiComponentDemo","pageTitle","menus","ComponentsDemo","root","flexWrap","contentArea","paddingRight","typography","pxToRem","contentSidebar","height","position","top","overflowY","flexShrink","xsDown","menu","dense","button","href","primary","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","ToggleButtonsExclusive","React","useState","alignment","setAlignment","ToggleButtonGroup","value","exclusive","onChange","event","newAlignment","ToggleButton","disabled","ToggleButtonsMultiple","formats","setFormats","newFormats","ToggleButtonSizes","handleChange","spacing","size","VerticalToggleButtons","view","setView","orientation","nextView","toggleContainer","margin","ToggleButtonNotEmpty","length","StandaloneToggleButton","selected","setSelected","paper","border","palette","divider","StyledToggleButtonGroup","withStyles","grouped","borderRadius","shape","CustomizedDividers","Paper","elevation","Divider","flexItem","section","sectionHeading","requireRaw","require","demos","filename","ToggleButtons","CodeViewerCard","default","language"],"mappings":"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","file":"static/js/114.9b8cfb77.chunk.js","sourcesContent":["import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport { PageBreadcrumbs, PageHeader } from '../index';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport clsx from 'clsx';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  pageFull: {\r\n    width: '100%',\r\n  },\r\n}));\r\n\r\nconst PageContainer = ({ heading, breadcrumbs, children, className, restProps }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Slide in={true} direction=\"up\" mountOnEnter unmountOnExit>\r\n      <Box className={clsx(classes.pageFull, className)} {...restProps}>\r\n        {(heading || breadcrumbs) && (\r\n          <PageHeader heading={heading} breadcrumbComponent={breadcrumbs && <PageBreadcrumbs items={breadcrumbs} />} />\r\n        )}\r\n        {children}\r\n      </Box>\r\n    </Slide>\r\n  );\r\n};\r\n\r\nexport default PageContainer;\r\n","import React from 'react';\r\nimport { Box, makeStyles, Typography } from '@material-ui/core';\r\nimport clsx from 'clsx';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  pageHeaderRoot: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    [theme.breakpoints.up('sm')]: {\r\n      alignItems: 'center',\r\n      flexDirection: 'row',\r\n    },\r\n  },\r\n  titleRoot: {\r\n    [theme.breakpoints.down('xs')]: {\r\n      marginBottom: 10,\r\n    },\r\n  },\r\n}));\r\n\r\nconst PageHeader = ({ heading, breadcrumbComponent, children, ...rest }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box className={clsx(classes.pageHeaderRoot, 'page-header')} mb={{ xs: 5, md: 6, lg: 8 }} {...rest}>\r\n      <Typography component=\"div\" variant=\"h1\" className={clsx(classes.titleRoot, 'title')}>\r\n        {heading}\r\n      </Typography>\r\n      <Box ml={{ sm: 'auto' }}>{breadcrumbComponent}</Box>\r\n\r\n      {children}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PageHeader;\r\n","import React from 'react';\r\nimport { Breadcrumbs, makeStyles } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { NavLink } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  textSm: {\r\n    fontSize: 12,\r\n  },\r\n  linkBlock: {\r\n    display: 'block',\r\n    color: 'inherit',\r\n  },\r\n}));\r\n\r\nconst PageBreadcrumbs = ({ items, ...rest }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Breadcrumbs className=\"bread-crumbs\" aria-label=\"breadcrumb {...rest}\">\r\n      {items.map((item, index) =>\r\n        item.isActive ? (\r\n          <Typography key={index} className={classes.textSm} color=\"textPrimary\">\r\n            {item.label}\r\n          </Typography>\r\n        ) : (\r\n          <NavLink key={index} className={clsx(classes.textSm, classes.linkBlock)} color=\"inherit\" to={item.link || '/'}>\r\n            {item.label}\r\n          </NavLink>\r\n        ),\r\n      )}\r\n    </Breadcrumbs>\r\n  );\r\n};\r\n\r\nexport default PageBreadcrumbs;\r\n","import React from 'react';\r\nimport { Box, Grid } from '@material-ui/core';\r\nimport CmtCard from '../../../../@coremat/CmtCard';\r\nimport { PageHeader } from '../index';\r\nimport GridContainer from '../../GridContainer';\r\nimport PageContainer from './PageContainer';\r\n\r\nconst CorematComponentDemo = ({ SourceCodeComponent, SettingsComponent, children }) => {\r\n  return (\r\n    <PageContainer>\r\n      <GridContainer>\r\n        <Grid item xs={12} md={7}>\r\n          <PageHeader heading=\"Preview\" />\r\n          <Box mb={8}>{children}</Box>\r\n          <CmtCard>{SourceCodeComponent}</CmtCard>\r\n        </Grid>\r\n        <Grid item xs={12} md={5}>\r\n          {SettingsComponent}\r\n        </Grid>\r\n      </GridContainer>\r\n    </PageContainer>\r\n  );\r\n};\r\n\r\nexport default CorematComponentDemo;\r\n","import React from 'react';\r\nimport ComponentsDemo from './ComponentsDemo';\r\n\r\nconst MuiComponentDemo = ({ pageTitle, menus, children }) => {\r\n  const breadcrumbs = [\r\n    { label: 'Home', link: '/' },\r\n    { label: 'Material UI Components', link: '/components/mui' },\r\n    { label: pageTitle, isActive: true },\r\n  ];\r\n  return (\r\n    <ComponentsDemo pageTitle={pageTitle} breadcrumbs={breadcrumbs} menus={menus}>\r\n      {children}\r\n    </ComponentsDemo>\r\n  );\r\n};\r\nexport default MuiComponentDemo;\r\n","import React from 'react';\r\nimport { Box, Hidden, List, ListItem, ListItemText, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PageContainer from './PageContainer';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  contentArea: {\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      paddingRight: theme.typography.pxToRem(30),\r\n      width: `calc(100% - ${theme.typography.pxToRem(175)})`,\r\n    },\r\n    [theme.breakpoints.up('lg')]: {\r\n      paddingRight: theme.typography.pxToRem(54),\r\n    },\r\n  },\r\n  contentSidebar: {\r\n    width: theme.typography.pxToRem(175),\r\n    height: `calc(100vh - ${theme.typography.pxToRem(102)})`,\r\n    position: 'sticky',\r\n    top: 30,\r\n    overflowY: 'auto',\r\n    flexShrink: 0,\r\n  },\r\n}));\r\n\r\nconst ComponentsDemo = ({ pageTitle, menus, breadcrumbs, children }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <PageContainer heading={pageTitle} breadcrumbs={breadcrumbs}>\r\n      <Box className={classes.root}>\r\n        <Box className={classes.contentArea}>{children}</Box>\r\n        <Hidden xsDown>\r\n          <Box className={classes.contentSidebar}>\r\n            <Typography component=\"h4\" variant=\"h4\">\r\n              Contents\r\n            </Typography>\r\n            <List>\r\n              {menus.map((menu, index) => (\r\n                <ListItem key={index} dense button component=\"a\" href={`#${menu.link}`}>\r\n                  <ListItemText primary={menu.label} />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </Box>\r\n        </Hidden>\r\n      </Box>\r\n    </PageContainer>\r\n  );\r\n};\r\nexport default ComponentsDemo;\r\n","var map = {\n\t\"./CustomizedDividers.txt\": 2964,\n\t\"./StandaloneToggleButton.txt\": 2965,\n\t\"./ToggleButtonNotEmpty.txt\": 2966,\n\t\"./ToggleButtonSizes.txt\": 2967,\n\t\"./ToggleButtonsExclusive.txt\": 2968,\n\t\"./ToggleButtonsMultiple.txt\": 2969,\n\t\"./VerticalToggleButtons.txt\": 2970\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2963;","export default \"import React from 'react';\\r\\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\\r\\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\\r\\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\\r\\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\\r\\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify';\\r\\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\\r\\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic';\\r\\nimport FormatUnderlinedIcon from '@material-ui/icons/FormatUnderlined';\\r\\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\\r\\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\\r\\nimport Divider from '@material-ui/core/Divider';\\r\\nimport Paper from '@material-ui/core/Paper';\\r\\nimport ToggleButton from '@material-ui/lab/ToggleButton';\\r\\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\\r\\n\\r\\nconst useStyles = makeStyles(theme => ({\\r\\n  paper: {\\r\\n    display: 'flex',\\r\\n    border: `1px solid ${theme.palette.divider}`,\\r\\n    flexWrap: 'wrap',\\r\\n  },\\r\\n  divider: {\\r\\n    margin: theme.spacing(1, 0.5),\\r\\n  },\\r\\n}));\\r\\n\\r\\nconst StyledToggleButtonGroup = withStyles(theme => ({\\r\\n  grouped: {\\r\\n    margin: theme.spacing(0.5),\\r\\n    border: 'none',\\r\\n    '&:not(:first-child)': {\\r\\n      borderRadius: theme.shape.borderRadius,\\r\\n    },\\r\\n    '&:first-child': {\\r\\n      borderRadius: theme.shape.borderRadius,\\r\\n    },\\r\\n  },\\r\\n}))(ToggleButtonGroup);\\r\\n\\r\\nexport default function CustomizedDividers() {\\r\\n  const [alignment, setAlignment] = React.useState('left');\\r\\n  const [formats, setFormats] = React.useState(() => ['italic']);\\r\\n\\r\\n  const handleFormat = (event, newFormats) => {\\r\\n    setFormats(newFormats);\\r\\n  };\\r\\n\\r\\n  const handleAlignment = (event, newAlignment) => {\\r\\n    setAlignment(newAlignment);\\r\\n  };\\r\\n\\r\\n  const classes = useStyles();\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Paper elevation={0} className={classes.paper}>\\r\\n        <StyledToggleButtonGroup\\r\\n          size=\\\"small\\\"\\r\\n          value={alignment}\\r\\n          exclusive\\r\\n          onChange={handleAlignment}\\r\\n          aria-label=\\\"text alignment\\\">\\r\\n          <ToggleButton value=\\\"left\\\" aria-label=\\\"left aligned\\\">\\r\\n            <FormatAlignLeftIcon />\\r\\n          </ToggleButton>\\r\\n          <ToggleButton value=\\\"center\\\" aria-label=\\\"centered\\\">\\r\\n            <FormatAlignCenterIcon />\\r\\n          </ToggleButton>\\r\\n          <ToggleButton value=\\\"right\\\" aria-label=\\\"right aligned\\\">\\r\\n            <FormatAlignRightIcon />\\r\\n          </ToggleButton>\\r\\n          <ToggleButton value=\\\"justify\\\" aria-label=\\\"justified\\\" disabled>\\r\\n            <FormatAlignJustifyIcon />\\r\\n          </ToggleButton>\\r\\n        </StyledToggleButtonGroup>\\r\\n        <Divider flexItem orientation=\\\"vertical\\\" className={classes.divider} />\\r\\n        <StyledToggleButtonGroup size=\\\"small\\\" value={formats} onChange={handleFormat} aria-label=\\\"text formatting\\\">\\r\\n          <ToggleButton value=\\\"bold\\\" aria-label=\\\"bold\\\">\\r\\n            <FormatBoldIcon />\\r\\n          </ToggleButton>\\r\\n          <ToggleButton value=\\\"italic\\\" aria-label=\\\"italic\\\">\\r\\n            <FormatItalicIcon />\\r\\n          </ToggleButton>\\r\\n          <ToggleButton value=\\\"underlined\\\" aria-label=\\\"underlined\\\">\\r\\n            <FormatUnderlinedIcon />\\r\\n          </ToggleButton>\\r\\n          <ToggleButton value=\\\"color\\\" aria-label=\\\"color\\\" disabled>\\r\\n            <FormatColorFillIcon />\\r\\n            <ArrowDropDownIcon />\\r\\n          </ToggleButton>\\r\\n        </StyledToggleButtonGroup>\\r\\n      </Paper>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","export default \"import React from 'react';\\r\\nimport CheckIcon from '@material-ui/icons/Check';\\r\\nimport ToggleButton from '@material-ui/lab/ToggleButton';\\r\\n\\r\\nexport default function StandaloneToggleButton() {\\r\\n  const [selected, setSelected] = React.useState(false);\\r\\n\\r\\n  return (\\r\\n    <ToggleButton\\r\\n      value=\\\"check\\\"\\r\\n      selected={selected}\\r\\n      onChange={() => {\\r\\n        setSelected(!selected);\\r\\n      }}>\\r\\n      <CheckIcon />\\r\\n    </ToggleButton>\\r\\n  );\\r\\n}\\r\\n\";","export default \"import React from 'react';\\r\\nimport { makeStyles } from '@material-ui/core/styles';\\r\\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\\r\\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\\r\\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\\r\\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify';\\r\\nimport LaptopIcon from '@material-ui/icons/Laptop';\\r\\nimport TvIcon from '@material-ui/icons/Tv';\\r\\nimport PhoneAndroidIcon from '@material-ui/icons/PhoneAndroid';\\r\\nimport Grid from '@material-ui/core/Grid';\\r\\nimport ToggleButton from '@material-ui/lab/ToggleButton';\\r\\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\\r\\n\\r\\nconst useStyles = makeStyles(theme => ({\\r\\n  toggleContainer: {\\r\\n    margin: theme.spacing(2, 0),\\r\\n  },\\r\\n}));\\r\\n\\r\\nexport default function ToggleButtonNotEmpty() {\\r\\n  const [alignment, setAlignment] = React.useState('left');\\r\\n  const [formats, setFormats] = React.useState(() => ['phone']);\\r\\n\\r\\n  const handleFormat = (event, newFormats) => {\\r\\n    if (newFormats.length) {\\r\\n      setFormats(newFormats);\\r\\n    }\\r\\n  };\\r\\n\\r\\n  const handleAlignment = (event, newAlignment) => {\\r\\n    if (newAlignment !== null) {\\r\\n      setAlignment(newAlignment);\\r\\n    }\\r\\n  };\\r\\n\\r\\n  const classes = useStyles();\\r\\n\\r\\n  return (\\r\\n    <Grid container spacing={2}>\\r\\n      <Grid item sm={12} md={6}>\\r\\n        <div className={classes.toggleContainer}>\\r\\n          <ToggleButtonGroup value={alignment} exclusive onChange={handleAlignment} aria-label=\\\"text alignment\\\">\\r\\n            <ToggleButton value=\\\"left\\\" aria-label=\\\"left aligned\\\">\\r\\n              <FormatAlignLeftIcon />\\r\\n            </ToggleButton>\\r\\n            <ToggleButton value=\\\"center\\\" aria-label=\\\"centered\\\">\\r\\n              <FormatAlignCenterIcon />\\r\\n            </ToggleButton>\\r\\n            <ToggleButton value=\\\"right\\\" aria-label=\\\"right aligned\\\">\\r\\n              <FormatAlignRightIcon />\\r\\n            </ToggleButton>\\r\\n            <ToggleButton value=\\\"justify\\\" aria-label=\\\"justified\\\" disabled>\\r\\n              <FormatAlignJustifyIcon />\\r\\n            </ToggleButton>\\r\\n          </ToggleButtonGroup>\\r\\n        </div>\\r\\n      </Grid>\\r\\n      <Grid item sm={12} md={6}>\\r\\n        <div className={classes.toggleContainer}>\\r\\n          <ToggleButtonGroup value={formats} onChange={handleFormat} aria-label=\\\"device\\\">\\r\\n            <ToggleButton value=\\\"laptop\\\" aria-label=\\\"laptop\\\">\\r\\n              <LaptopIcon />\\r\\n            </ToggleButton>\\r\\n            <ToggleButton value=\\\"tv\\\" aria-label=\\\"tv\\\">\\r\\n              <TvIcon />\\r\\n            </ToggleButton>\\r\\n            <ToggleButton value=\\\"phone\\\" aria-label=\\\"phone\\\">\\r\\n              <PhoneAndroidIcon />\\r\\n            </ToggleButton>\\r\\n          </ToggleButtonGroup>\\r\\n        </div>\\r\\n      </Grid>\\r\\n    </Grid>\\r\\n  );\\r\\n}\\r\\n\";","export default \"import React from 'react';\\r\\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\\r\\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\\r\\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\\r\\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify';\\r\\nimport Grid from '@material-ui/core/Grid';\\r\\nimport ToggleButton from '@material-ui/lab/ToggleButton';\\r\\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\\r\\n\\r\\nexport default function ToggleButtonSizes() {\\r\\n  const [alignment, setAlignment] = React.useState('left');\\r\\n\\r\\n  const handleChange = (event, newAlignment) => {\\r\\n    setAlignment(newAlignment);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <Grid container spacing={2} direction=\\\"column\\\" alignItems=\\\"center\\\">\\r\\n      <Grid item>\\r\\n        <ToggleButtonGroup size=\\\"small\\\" value={alignment} exclusive onChange={handleChange}>\\r\\n          <ToggleButton value=\\\"left\\\">\\r\\n            <FormatAlignLeftIcon fontSize=\\\"small\\\" />\\r\\n          </ToggleButton>\\r\\n          <ToggleButton value=\\\"center\\\">\\r\\n            <FormatAlignCenterIcon fontSize=\\\"small\\\" />\\r\\n          </ToggleButton>\\r\\n          <ToggleButton value=\\\"right\\\">\\r\\n            <FormatAlignRightIcon fontSize=\\\"small\\\" />\\r\\n          </ToggleButton>\\r\\n          <ToggleButton value=\\\"justify\\\">\\r\\n            <FormatAlignJustifyIcon fontSize=\\\"small\\\" />\\r\\n          </ToggleButton>\\r\\n        </ToggleButtonGroup>\\r\\n      </Grid>\\r\\n      <Grid item>\\r\\n        <ToggleButtonGroup size=\\\"medium\\\" value={alignment} exclusive onChange={handleChange}>\\r\\n          <ToggleButton value=\\\"left\\\">\\r\\n            <FormatAlignLeftIcon />\\r\\n          </ToggleButton>\\r\\n          <ToggleButton value=\\\"center\\\">\\r\\n            <FormatAlignCenterIcon />\\r\\n          </ToggleButton>\\r\\n          <ToggleButton value=\\\"right\\\">\\r\\n            <FormatAlignRightIcon />\\r\\n          </ToggleButton>\\r\\n          <ToggleButton value=\\\"justify\\\">\\r\\n            <FormatAlignJustifyIcon />\\r\\n          </ToggleButton>\\r\\n        </ToggleButtonGroup>\\r\\n      </Grid>\\r\\n      <Grid item>\\r\\n        <ToggleButtonGroup size=\\\"large\\\" value={alignment} exclusive onChange={handleChange}>\\r\\n          <ToggleButton value=\\\"left\\\">\\r\\n            <FormatAlignLeftIcon />\\r\\n          </ToggleButton>\\r\\n          <ToggleButton value=\\\"center\\\">\\r\\n            <FormatAlignCenterIcon />\\r\\n          </ToggleButton>\\r\\n          <ToggleButton value=\\\"right\\\">\\r\\n            <FormatAlignRightIcon />\\r\\n          </ToggleButton>\\r\\n          <ToggleButton value=\\\"justify\\\">\\r\\n            <FormatAlignJustifyIcon />\\r\\n          </ToggleButton>\\r\\n        </ToggleButtonGroup>\\r\\n      </Grid>\\r\\n    </Grid>\\r\\n  );\\r\\n}\\r\\n\";","export default \"import React from 'react';\\r\\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\\r\\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\\r\\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\\r\\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify';\\r\\nimport ToggleButton from '@material-ui/lab/ToggleButton';\\r\\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\\r\\n\\r\\nexport default function ToggleButtonsExclusive() {\\r\\n  const [alignment, setAlignment] = React.useState('left');\\r\\n\\r\\n  const handleAlignment = (event, newAlignment) => {\\r\\n    setAlignment(newAlignment);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <ToggleButtonGroup value={alignment} exclusive onChange={handleAlignment} aria-label=\\\"text alignment\\\">\\r\\n      <ToggleButton value=\\\"left\\\" aria-label=\\\"left aligned\\\">\\r\\n        <FormatAlignLeftIcon />\\r\\n      </ToggleButton>\\r\\n      <ToggleButton value=\\\"center\\\" aria-label=\\\"centered\\\">\\r\\n        <FormatAlignCenterIcon />\\r\\n      </ToggleButton>\\r\\n      <ToggleButton value=\\\"right\\\" aria-label=\\\"right aligned\\\">\\r\\n        <FormatAlignRightIcon />\\r\\n      </ToggleButton>\\r\\n      <ToggleButton value=\\\"justify\\\" aria-label=\\\"justified\\\" disabled>\\r\\n        <FormatAlignJustifyIcon />\\r\\n      </ToggleButton>\\r\\n    </ToggleButtonGroup>\\r\\n  );\\r\\n}\\r\\n\";","export default \"import React from 'react';\\r\\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\\r\\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic';\\r\\nimport FormatUnderlinedIcon from '@material-ui/icons/FormatUnderlined';\\r\\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\\r\\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\\r\\nimport ToggleButton from '@material-ui/lab/ToggleButton';\\r\\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\\r\\n\\r\\nexport default function ToggleButtonsMultiple() {\\r\\n  const [formats, setFormats] = React.useState(() => ['bold', 'italic']);\\r\\n\\r\\n  const handleFormat = (event, newFormats) => {\\r\\n    setFormats(newFormats);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <ToggleButtonGroup value={formats} onChange={handleFormat} aria-label=\\\"text formatting\\\">\\r\\n      <ToggleButton value=\\\"bold\\\" aria-label=\\\"bold\\\">\\r\\n        <FormatBoldIcon />\\r\\n      </ToggleButton>\\r\\n      <ToggleButton value=\\\"italic\\\" aria-label=\\\"italic\\\">\\r\\n        <FormatItalicIcon />\\r\\n      </ToggleButton>\\r\\n      <ToggleButton value=\\\"underlined\\\" aria-label=\\\"underlined\\\">\\r\\n        <FormatUnderlinedIcon />\\r\\n      </ToggleButton>\\r\\n      <ToggleButton value=\\\"color\\\" aria-label=\\\"color\\\" disabled>\\r\\n        <FormatColorFillIcon />\\r\\n        <ArrowDropDownIcon />\\r\\n      </ToggleButton>\\r\\n    </ToggleButtonGroup>\\r\\n  );\\r\\n}\\r\\n\";","export default \"import React from 'react';\\r\\nimport ViewListIcon from '@material-ui/icons/ViewList';\\r\\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\\r\\nimport ViewQuiltIcon from '@material-ui/icons/ViewQuilt';\\r\\nimport ToggleButton from '@material-ui/lab/ToggleButton';\\r\\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\\r\\n\\r\\nexport default function VerticalToggleButtons() {\\r\\n  const [view, setView] = React.useState('list');\\r\\n\\r\\n  const handleChange = (event, nextView) => {\\r\\n    setView(nextView);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <ToggleButtonGroup orientation=\\\"vertical\\\" value={view} exclusive onChange={handleChange}>\\r\\n      <ToggleButton value=\\\"list\\\" aria-label=\\\"list\\\">\\r\\n        <ViewListIcon />\\r\\n      </ToggleButton>\\r\\n      <ToggleButton value=\\\"module\\\" aria-label=\\\"module\\\">\\r\\n        <ViewModuleIcon />\\r\\n      </ToggleButton>\\r\\n      <ToggleButton value=\\\"quilt\\\" aria-label=\\\"quilt\\\">\\r\\n        <ViewQuiltIcon />\\r\\n      </ToggleButton>\\r\\n    </ToggleButtonGroup>\\r\\n  );\\r\\n}\\r\\n\";","import React from 'react';\r\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\r\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\r\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\r\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\n\r\nexport default function ToggleButtonsExclusive() {\r\n  const [alignment, setAlignment] = React.useState('left');\r\n\r\n  const handleAlignment = (event, newAlignment) => {\r\n    setAlignment(newAlignment);\r\n  };\r\n\r\n  return (\r\n    <ToggleButtonGroup value={alignment} exclusive onChange={handleAlignment} aria-label=\"text alignment\">\r\n      <ToggleButton value=\"left\" aria-label=\"left aligned\">\r\n        <FormatAlignLeftIcon />\r\n      </ToggleButton>\r\n      <ToggleButton value=\"center\" aria-label=\"centered\">\r\n        <FormatAlignCenterIcon />\r\n      </ToggleButton>\r\n      <ToggleButton value=\"right\" aria-label=\"right aligned\">\r\n        <FormatAlignRightIcon />\r\n      </ToggleButton>\r\n      <ToggleButton value=\"justify\" aria-label=\"justified\" disabled>\r\n        <FormatAlignJustifyIcon />\r\n      </ToggleButton>\r\n    </ToggleButtonGroup>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\r\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic';\r\nimport FormatUnderlinedIcon from '@material-ui/icons/FormatUnderlined';\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\n\r\nexport default function ToggleButtonsMultiple() {\r\n  const [formats, setFormats] = React.useState(() => ['bold', 'italic']);\r\n\r\n  const handleFormat = (event, newFormats) => {\r\n    setFormats(newFormats);\r\n  };\r\n\r\n  return (\r\n    <ToggleButtonGroup value={formats} onChange={handleFormat} aria-label=\"text formatting\">\r\n      <ToggleButton value=\"bold\" aria-label=\"bold\">\r\n        <FormatBoldIcon />\r\n      </ToggleButton>\r\n      <ToggleButton value=\"italic\" aria-label=\"italic\">\r\n        <FormatItalicIcon />\r\n      </ToggleButton>\r\n      <ToggleButton value=\"underlined\" aria-label=\"underlined\">\r\n        <FormatUnderlinedIcon />\r\n      </ToggleButton>\r\n      <ToggleButton value=\"color\" aria-label=\"color\" disabled>\r\n        <FormatColorFillIcon />\r\n        <ArrowDropDownIcon />\r\n      </ToggleButton>\r\n    </ToggleButtonGroup>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\r\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\r\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\r\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport GridContainer from '../../../../../@jumbo/components/GridContainer';\r\n\r\nexport default function ToggleButtonSizes() {\r\n  const [alignment, setAlignment] = React.useState('left');\r\n\r\n  const handleChange = (event, newAlignment) => {\r\n    setAlignment(newAlignment);\r\n  };\r\n\r\n  return (\r\n    <GridContainer spacing={2} direction=\"column\" alignItems=\"center\">\r\n      <Grid item>\r\n        <ToggleButtonGroup size=\"small\" value={alignment} exclusive onChange={handleChange}>\r\n          <ToggleButton value=\"left\">\r\n            <FormatAlignLeftIcon fontSize=\"small\" />\r\n          </ToggleButton>\r\n          <ToggleButton value=\"center\">\r\n            <FormatAlignCenterIcon fontSize=\"small\" />\r\n          </ToggleButton>\r\n          <ToggleButton value=\"right\">\r\n            <FormatAlignRightIcon fontSize=\"small\" />\r\n          </ToggleButton>\r\n          <ToggleButton value=\"justify\">\r\n            <FormatAlignJustifyIcon fontSize=\"small\" />\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n      </Grid>\r\n      <Grid item>\r\n        <ToggleButtonGroup size=\"medium\" value={alignment} exclusive onChange={handleChange}>\r\n          <ToggleButton value=\"left\">\r\n            <FormatAlignLeftIcon />\r\n          </ToggleButton>\r\n          <ToggleButton value=\"center\">\r\n            <FormatAlignCenterIcon />\r\n          </ToggleButton>\r\n          <ToggleButton value=\"right\">\r\n            <FormatAlignRightIcon />\r\n          </ToggleButton>\r\n          <ToggleButton value=\"justify\">\r\n            <FormatAlignJustifyIcon />\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n      </Grid>\r\n      <Grid item>\r\n        <ToggleButtonGroup size=\"large\" value={alignment} exclusive onChange={handleChange}>\r\n          <ToggleButton value=\"left\">\r\n            <FormatAlignLeftIcon />\r\n          </ToggleButton>\r\n          <ToggleButton value=\"center\">\r\n            <FormatAlignCenterIcon />\r\n          </ToggleButton>\r\n          <ToggleButton value=\"right\">\r\n            <FormatAlignRightIcon />\r\n          </ToggleButton>\r\n          <ToggleButton value=\"justify\">\r\n            <FormatAlignJustifyIcon />\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n      </Grid>\r\n    </GridContainer>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\r\nimport ViewQuiltIcon from '@material-ui/icons/ViewQuilt';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\n\r\nexport default function VerticalToggleButtons() {\r\n  const [view, setView] = React.useState('list');\r\n\r\n  const handleChange = (event, nextView) => {\r\n    setView(nextView);\r\n  };\r\n\r\n  return (\r\n    <ToggleButtonGroup orientation=\"vertical\" value={view} exclusive onChange={handleChange}>\r\n      <ToggleButton value=\"list\" aria-label=\"list\">\r\n        <ViewListIcon />\r\n      </ToggleButton>\r\n      <ToggleButton value=\"module\" aria-label=\"module\">\r\n        <ViewModuleIcon />\r\n      </ToggleButton>\r\n      <ToggleButton value=\"quilt\" aria-label=\"quilt\">\r\n        <ViewQuiltIcon />\r\n      </ToggleButton>\r\n    </ToggleButtonGroup>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\r\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\r\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\r\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify';\r\nimport LaptopIcon from '@material-ui/icons/Laptop';\r\nimport TvIcon from '@material-ui/icons/Tv';\r\nimport PhoneAndroidIcon from '@material-ui/icons/PhoneAndroid';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport GridContainer from '../../../../../@jumbo/components/GridContainer';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  toggleContainer: {\r\n    margin: theme.spacing(2, 0),\r\n  },\r\n}));\r\n\r\nexport default function ToggleButtonNotEmpty() {\r\n  const [alignment, setAlignment] = React.useState('left');\r\n  const [formats, setFormats] = React.useState(() => ['phone']);\r\n\r\n  const handleFormat = (event, newFormats) => {\r\n    if (newFormats.length) {\r\n      setFormats(newFormats);\r\n    }\r\n  };\r\n\r\n  const handleAlignment = (event, newAlignment) => {\r\n    if (newAlignment !== null) {\r\n      setAlignment(newAlignment);\r\n    }\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <GridContainer spacing={2}>\r\n      <Grid item sm={12} md={6}>\r\n        <div className={classes.toggleContainer}>\r\n          <ToggleButtonGroup value={alignment} exclusive onChange={handleAlignment} aria-label=\"text alignment\">\r\n            <ToggleButton value=\"left\" aria-label=\"left aligned\">\r\n              <FormatAlignLeftIcon />\r\n            </ToggleButton>\r\n            <ToggleButton value=\"center\" aria-label=\"centered\">\r\n              <FormatAlignCenterIcon />\r\n            </ToggleButton>\r\n            <ToggleButton value=\"right\" aria-label=\"right aligned\">\r\n              <FormatAlignRightIcon />\r\n            </ToggleButton>\r\n            <ToggleButton value=\"justify\" aria-label=\"justified\" disabled>\r\n              <FormatAlignJustifyIcon />\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n        </div>\r\n      </Grid>\r\n      <Grid item sm={12} md={6}>\r\n        <div className={classes.toggleContainer}>\r\n          <ToggleButtonGroup value={formats} onChange={handleFormat} aria-label=\"device\">\r\n            <ToggleButton value=\"laptop\" aria-label=\"laptop\">\r\n              <LaptopIcon />\r\n            </ToggleButton>\r\n            <ToggleButton value=\"tv\" aria-label=\"tv\">\r\n              <TvIcon />\r\n            </ToggleButton>\r\n            <ToggleButton value=\"phone\" aria-label=\"phone\">\r\n              <PhoneAndroidIcon />\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n        </div>\r\n      </Grid>\r\n    </GridContainer>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\n\r\nexport default function StandaloneToggleButton() {\r\n  const [selected, setSelected] = React.useState(false);\r\n\r\n  return (\r\n    <ToggleButton\r\n      value=\"check\"\r\n      selected={selected}\r\n      onChange={() => {\r\n        setSelected(!selected);\r\n      }}>\r\n      <CheckIcon />\r\n    </ToggleButton>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\r\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\r\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\r\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify';\r\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\r\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic';\r\nimport FormatUnderlinedIcon from '@material-ui/icons/FormatUnderlined';\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    display: 'flex',\r\n    border: `1px solid ${theme.palette.divider}`,\r\n    flexWrap: 'wrap',\r\n  },\r\n  divider: {\r\n    margin: theme.spacing(1, 0.5),\r\n  },\r\n}));\r\n\r\nconst StyledToggleButtonGroup = withStyles(theme => ({\r\n  grouped: {\r\n    margin: theme.spacing(0.5),\r\n    border: 'none',\r\n    '&:not(:first-child)': {\r\n      borderRadius: theme.shape.borderRadius,\r\n    },\r\n    '&:first-child': {\r\n      borderRadius: theme.shape.borderRadius,\r\n    },\r\n  },\r\n}))(ToggleButtonGroup);\r\n\r\nexport default function CustomizedDividers() {\r\n  const [alignment, setAlignment] = React.useState('left');\r\n  const [formats, setFormats] = React.useState(() => ['italic']);\r\n\r\n  const handleFormat = (event, newFormats) => {\r\n    setFormats(newFormats);\r\n  };\r\n\r\n  const handleAlignment = (event, newAlignment) => {\r\n    setAlignment(newAlignment);\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Paper elevation={0} className={classes.paper}>\r\n        <StyledToggleButtonGroup\r\n          size=\"small\"\r\n          value={alignment}\r\n          exclusive\r\n          onChange={handleAlignment}\r\n          aria-label=\"text alignment\">\r\n          <ToggleButton value=\"left\" aria-label=\"left aligned\">\r\n            <FormatAlignLeftIcon />\r\n          </ToggleButton>\r\n          <ToggleButton value=\"center\" aria-label=\"centered\">\r\n            <FormatAlignCenterIcon />\r\n          </ToggleButton>\r\n          <ToggleButton value=\"right\" aria-label=\"right aligned\">\r\n            <FormatAlignRightIcon />\r\n          </ToggleButton>\r\n          <ToggleButton value=\"justify\" aria-label=\"justified\" disabled>\r\n            <FormatAlignJustifyIcon />\r\n          </ToggleButton>\r\n        </StyledToggleButtonGroup>\r\n        <Divider flexItem orientation=\"vertical\" className={classes.divider} />\r\n        <StyledToggleButtonGroup size=\"small\" value={formats} onChange={handleFormat} aria-label=\"text formatting\">\r\n          <ToggleButton value=\"bold\" aria-label=\"bold\">\r\n            <FormatBoldIcon />\r\n          </ToggleButton>\r\n          <ToggleButton value=\"italic\" aria-label=\"italic\">\r\n            <FormatItalicIcon />\r\n          </ToggleButton>\r\n          <ToggleButton value=\"underlined\" aria-label=\"underlined\">\r\n            <FormatUnderlinedIcon />\r\n          </ToggleButton>\r\n          <ToggleButton value=\"color\" aria-label=\"color\" disabled>\r\n            <FormatColorFillIcon />\r\n            <ArrowDropDownIcon />\r\n          </ToggleButton>\r\n        </StyledToggleButtonGroup>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { MuiComponentDemo } from '../../../../@jumbo/components/PageComponents';\r\nimport { Box, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport CodeViewerCard from '../../../../@jumbo/components/Common/CodeViewerCard';\r\nimport ToggleButtonsExclusive from './demo/ToggleButtonsExclusive';\r\nimport ToggleButtonsMultiple from './demo/ToggleButtonsMultiple';\r\nimport ToggleButtonSizes from './demo/ToggleButtonSizes';\r\nimport VerticalToggleButtons from './demo/VerticalToggleButtons';\r\nimport ToggleButtonNotEmpty from './demo/ToggleButtonNotEmpty';\r\nimport StandaloneToggleButton from './demo/StandaloneToggleButton';\r\nimport CustomizedDividers from './demo/CustomizedDividers';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  section: {\r\n    '&:not(:last-child)': {\r\n      marginBottom: theme.typography.pxToRem(32),\r\n    },\r\n  },\r\n  sectionHeading: {\r\n    marginBottom: theme.typography.pxToRem(16),\r\n  },\r\n}));\r\n\r\nconst requireRaw = require.context(\r\n  '!raw-loader!../../../../@fake-db/mui-components/toggle-buttons',\r\n  false,\r\n  /\\.(txt|js|md|tsx)$/,\r\n);\r\n\r\nconst demos = [\r\n  {\r\n    label: 'Exclusive selection',\r\n    link: 'exclusive-selection',\r\n    component: <ToggleButtonsExclusive />,\r\n    filename: './ToggleButtonsExclusive.txt',\r\n  },\r\n  {\r\n    label: 'Multiple selection',\r\n    link: 'multiple-selection',\r\n    component: <ToggleButtonsMultiple />,\r\n    filename: './ToggleButtonsMultiple.txt',\r\n  },\r\n  {\r\n    label: 'Sizes',\r\n    link: 'sizes',\r\n    component: <ToggleButtonSizes />,\r\n    filename: './ToggleButtonSizes.txt',\r\n  },\r\n  {\r\n    label: 'Vertical buttons',\r\n    link: 'vertical-buttons',\r\n    component: <VerticalToggleButtons />,\r\n    filename: './VerticalToggleButtons.txt',\r\n  },\r\n  {\r\n    label: 'Enforce value set',\r\n    link: 'enforce-value-set',\r\n    component: <ToggleButtonNotEmpty />,\r\n    filename: './ToggleButtonNotEmpty.txt',\r\n  },\r\n  {\r\n    label: 'Standalone toggle button',\r\n    link: 'standalone-toggle-button',\r\n    component: <StandaloneToggleButton />,\r\n    filename: './StandaloneToggleButton.txt',\r\n  },\r\n  {\r\n    label: 'Customized toggle button',\r\n    link: 'customized-toggle-button',\r\n    component: <CustomizedDividers />,\r\n    filename: './CustomizedDividers.txt',\r\n  },\r\n];\r\n\r\nexport default function ToggleButtons() {\r\n  const classes = useStyles();\r\n  return (\r\n    <MuiComponentDemo pageTitle=\"Toggle Buttons\" menus={demos}>\r\n      {demos.map((menu, index) => (\r\n        <Box key={index} id={menu.link} className={classes.section}>\r\n          <Typography component=\"h3\" variant=\"inherit\" className={classes.sectionHeading}>\r\n            {menu.label}\r\n          </Typography>\r\n          <CodeViewerCard code={requireRaw(menu.filename).default} language=\"jsx\">\r\n            {menu.component}\r\n          </CodeViewerCard>\r\n        </Box>\r\n      ))}\r\n    </MuiComponentDemo>\r\n  );\r\n}\r\n"],"sourceRoot":""}