{"version":3,"sources":["@jumbo/components/PageComponents/layouts/PageContainer.js","@jumbo/components/PageComponents/PageHeader.js","@jumbo/components/PageComponents/PageBreadcrumbs/index.js","@jumbo/components/PageComponents/layouts/CorematComponentDemo.js","@jumbo/components/PageComponents/layouts/MuiComponentDemo.js","@jumbo/components/PageComponents/layouts/ComponentsDemo.js","webpack:///./src/@fake-db/mui-components/auto-complete sync nonrecursive ./node_modules/raw-loader/dist/cjs.js \\.(txt|js|md|tsx)$?2da3","@fake-db/mui-components/auto-complete/Asynchronous.txt","@fake-db/mui-components/auto-complete/CheckboxesTags.txt","@fake-db/mui-components/auto-complete/ComboBox.txt","@fake-db/mui-components/auto-complete/ControllableStates.txt","@fake-db/mui-components/auto-complete/CountrySelect.txt","@fake-db/mui-components/auto-complete/CustomInputAutocomplete.txt","@fake-db/mui-components/auto-complete/CustomizedHook.txt","@fake-db/mui-components/auto-complete/DisabledOptions.txt","@fake-db/mui-components/auto-complete/Filter.txt","@fake-db/mui-components/auto-complete/FixedTags.txt","@fake-db/mui-components/auto-complete/FreeSolo.txt","@fake-db/mui-components/auto-complete/FreeSoloCreateOption.txt","@fake-db/mui-components/auto-complete/FreeSoloCreateOptionDialog.txt","@fake-db/mui-components/auto-complete/GitHubLabel.txt","@fake-db/mui-components/auto-complete/GoogleMaps.txt","@fake-db/mui-components/auto-complete/Grouped.txt","@fake-db/mui-components/auto-complete/Highlights.txt","@fake-db/mui-components/auto-complete/LimitTags.txt","@fake-db/mui-components/auto-complete/Playground.txt","@fake-db/mui-components/auto-complete/Sizes.txt","@fake-db/mui-components/auto-complete/Tags.txt","@fake-db/mui-components/auto-complete/UseAutocomplete.txt","@fake-db/mui-components/auto-complete/Virtualize.txt","routes/Components/MuiComponents/AutoComplete/demo/ComboBox.js","routes/Components/MuiComponents/AutoComplete/demo/Playground.js","routes/Components/MuiComponents/AutoComplete/demo/CountrySelect.js","routes/Components/MuiComponents/AutoComplete/demo/ControllableStates.js","routes/Components/MuiComponents/AutoComplete/demo/FreeSolo.js","routes/Components/MuiComponents/AutoComplete/demo/FreeSoloCreateOption.js","routes/Components/MuiComponents/AutoComplete/demo/FreeSoloCreateOptionDialog.js","routes/Components/MuiComponents/AutoComplete/demo/Grouped.js","routes/Components/MuiComponents/AutoComplete/demo/DisabledOptions.js","routes/Components/MuiComponents/AutoComplete/demo/UseAutocomplete.js","routes/Components/MuiComponents/AutoComplete/demo/CustomizedHook.js","routes/Components/MuiComponents/AutoComplete/demo/Asynchronous.js","routes/Components/MuiComponents/AutoComplete/demo/GoogleMaps.js","routes/Components/MuiComponents/AutoComplete/demo/Tags.js","routes/Components/MuiComponents/AutoComplete/demo/FixedTags.js","routes/Components/MuiComponents/AutoComplete/demo/CheckboxesTags.js","routes/Components/MuiComponents/AutoComplete/demo/LimitTags.js","routes/Components/MuiComponents/AutoComplete/demo/Sizes.js","routes/Components/MuiComponents/AutoComplete/demo/CustomInputAutocomplete.js","routes/Components/MuiComponents/AutoComplete/demo/GitHubLabel.js","routes/Components/MuiComponents/AutoComplete/demo/Highlights.js","routes/Components/MuiComponents/AutoComplete/demo/Filter.js","routes/Components/MuiComponents/AutoComplete/demo/Virtualize.js","routes/Components/MuiComponents/AutoComplete/index.js"],"names":["useStyles","makeStyles","pageFull","width","PageContainer","heading","breadcrumbs","children","className","restProps","classes","in","direction","mountOnEnter","unmountOnExit","clsx","breadcrumbComponent","items","theme","pageHeaderRoot","display","flexDirection","breakpoints","up","alignItems","titleRoot","down","marginBottom","PageHeader","rest","Box","mb","xs","md","lg","Typography","component","variant","ml","sm","textSm","fontSize","linkBlock","color","PageBreadcrumbs","Breadcrumbs","aria-label","map","item","index","isActive","key","label","to","link","CorematComponentDemo","SourceCodeComponent","SettingsComponent","GridContainer","Grid","CmtCard","MuiComponentDemo","pageTitle","menus","ComponentsDemo","root","flexWrap","contentArea","paddingRight","typography","pxToRem","contentSidebar","height","position","top","overflowY","flexShrink","xsDown","menu","dense","button","href","primary","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","ComboBox","Autocomplete","options","top100Films","getOptionLabel","option","title","style","renderInput","params","TextField","year","Playground","defaultProps","flatProps","React","useState","value","setValue","debug","margin","disableCloseOnSelect","clearOnEscape","disableClearable","includeInputInList","onChange","event","newValue","autoComplete","disableListWrap","openOnFocus","autoHighlight","autoSelect","disabled","disablePortal","blurOnSelect","clearOnBlur","selectOnFocus","marginRight","CountrySelect","countries","renderOption","Fragment","isoCode","String","fromCodePoint","toUpperCase","replace","char","charCodeAt","phone","inputProps","suggested","ControllableStates","inputValue","setInputValue","onInputChange","newInputValue","FreeSolo","freeSolo","InputProps","type","filter","createFilterOptions","FreeSoloCreateOption","filterOptions","filtered","push","handleHomeEndKeys","FreeSoloCreateOptionDialog","open","toggleOpen","handleClose","setDialogValue","dialogValue","setTimeout","Dialog","onClose","aria-labelledby","onSubmit","preventDefault","parseInt","DialogTitle","DialogContent","DialogContentText","autoFocus","target","DialogActions","Button","onClick","Grouped","firstLetter","test","sort","a","b","localeCompare","groupBy","DisabledOptions","timeSlots","getOptionDisabled","Array","from","_","Math","floor","input","listbox","padding","zIndex","listStyle","backgroundColor","palette","background","paper","overflow","maxHeight","border","cursor","UseAutocomplete","useAutocomplete","getRootProps","getInputLabelProps","getInputProps","getListboxProps","getOptionProps","groupedOptions","length","Label","styled","InputWrapper","Tag","onDelete","props","Listbox","CustomizedHook","defaultValue","multiple","getTagProps","focused","setAnchorEl","NoSsr","ref","sleep","delay","Promise","Asynchronous","setOpen","setOptions","loading","useEffect","active","fetch","response","json","onOpen","getOptionSelected","name","endAdornment","CircularProgress","size","autocompleteService","current","icon","text","secondary","spacing","GoogleMaps","loaded","useRef","window","document","querySelector","src","script","createElement","setAttribute","appendChild","loadScript","useMemo","throttle","request","callback","getPlacePredictions","google","maps","places","AutocompleteService","results","newOptions","description","x","filterSelectedOptions","fullWidth","matches","structured_formatting","main_text_matched_substrings","parts","parse","main_text","match","offset","part","fontWeight","highlight","secondary_text","marginTop","Tags","placeholder","renderTags","Chip","FixedTags","fixedOptions","indexOf","tagValue","checkedIcon","CheckboxesTags","selected","Checkbox","checked","LimitTags","limitTags","Sizes","CustomInputAutocomplete","textAlign","paddingBottom","tag","lineHeight","borderRadius","popper","boxShadow","header","borderBottom","inputBase","transition","transitions","create","alpha","main","borderColor","minHeight","action","hover","popperDisablePortal","iconSelected","marginLeft","flexGrow","close","opacity","GitHubLabel","anchorEl","labels","pendingValue","setPendingValue","useTheme","Boolean","undefined","ButtonBase","disableRipple","aria-describedby","currentTarget","getContrastText","Popper","placement","reason","focus","noOptionsText","visibility","ai","bi","InputBase","Highlights","matchFrom","stringify","Filter","renderRow","data","cloneElement","OuterElementContext","createContext","OuterElementType","forwardRef","outerProps","useContext","ListboxComponent","other","itemData","Children","toArray","smUp","useMediaQuery","noSsr","itemCount","itemSize","getChildSize","child","isValidElement","ListSubheader","gridRef","resetAfterIndex","useResetCache","Provider","reduce","outerElementType","innerElementType","overscanCount","boxSizing","OPTIONS","characters","result","i","charAt","random","ceil","renderGroup","group","Virtualize","noWrap","section","sectionHeading","requireRaw","require","demos","filename","AutoComplete","CodeViewerCard","default","language"],"mappings":"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","file":"static/js/53.74f0f1af.chunk.js","sourcesContent":["import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport { PageBreadcrumbs, PageHeader } from '../index';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport clsx from 'clsx';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  pageFull: {\r\n    width: '100%',\r\n  },\r\n}));\r\n\r\nconst PageContainer = ({ heading, breadcrumbs, children, className, restProps }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Slide in={true} direction=\"up\" mountOnEnter unmountOnExit>\r\n      <Box className={clsx(classes.pageFull, className)} {...restProps}>\r\n        {(heading || breadcrumbs) && (\r\n          <PageHeader heading={heading} breadcrumbComponent={breadcrumbs && <PageBreadcrumbs items={breadcrumbs} />} />\r\n        )}\r\n        {children}\r\n      </Box>\r\n    </Slide>\r\n  );\r\n};\r\n\r\nexport default PageContainer;\r\n","import React from 'react';\r\nimport { Box, makeStyles, Typography } from '@material-ui/core';\r\nimport clsx from 'clsx';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  pageHeaderRoot: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    [theme.breakpoints.up('sm')]: {\r\n      alignItems: 'center',\r\n      flexDirection: 'row',\r\n    },\r\n  },\r\n  titleRoot: {\r\n    [theme.breakpoints.down('xs')]: {\r\n      marginBottom: 10,\r\n    },\r\n  },\r\n}));\r\n\r\nconst PageHeader = ({ heading, breadcrumbComponent, children, ...rest }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box className={clsx(classes.pageHeaderRoot, 'page-header')} mb={{ xs: 5, md: 6, lg: 8 }} {...rest}>\r\n      <Typography component=\"div\" variant=\"h1\" className={clsx(classes.titleRoot, 'title')}>\r\n        {heading}\r\n      </Typography>\r\n      <Box ml={{ sm: 'auto' }}>{breadcrumbComponent}</Box>\r\n\r\n      {children}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PageHeader;\r\n","import React from 'react';\r\nimport { Breadcrumbs, makeStyles } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { NavLink } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  textSm: {\r\n    fontSize: 12,\r\n  },\r\n  linkBlock: {\r\n    display: 'block',\r\n    color: 'inherit',\r\n  },\r\n}));\r\n\r\nconst PageBreadcrumbs = ({ items, ...rest }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Breadcrumbs className=\"bread-crumbs\" aria-label=\"breadcrumb {...rest}\">\r\n      {items.map((item, index) =>\r\n        item.isActive ? (\r\n          <Typography key={index} className={classes.textSm} color=\"textPrimary\">\r\n            {item.label}\r\n          </Typography>\r\n        ) : (\r\n          <NavLink key={index} className={clsx(classes.textSm, classes.linkBlock)} color=\"inherit\" to={item.link || '/'}>\r\n            {item.label}\r\n          </NavLink>\r\n        ),\r\n      )}\r\n    </Breadcrumbs>\r\n  );\r\n};\r\n\r\nexport default PageBreadcrumbs;\r\n","import React from 'react';\r\nimport { Box, Grid } from '@material-ui/core';\r\nimport CmtCard from '../../../../@coremat/CmtCard';\r\nimport { PageHeader } from '../index';\r\nimport GridContainer from '../../GridContainer';\r\nimport PageContainer from './PageContainer';\r\n\r\nconst CorematComponentDemo = ({ SourceCodeComponent, SettingsComponent, children }) => {\r\n  return (\r\n    <PageContainer>\r\n      <GridContainer>\r\n        <Grid item xs={12} md={7}>\r\n          <PageHeader heading=\"Preview\" />\r\n          <Box mb={8}>{children}</Box>\r\n          <CmtCard>{SourceCodeComponent}</CmtCard>\r\n        </Grid>\r\n        <Grid item xs={12} md={5}>\r\n          {SettingsComponent}\r\n        </Grid>\r\n      </GridContainer>\r\n    </PageContainer>\r\n  );\r\n};\r\n\r\nexport default CorematComponentDemo;\r\n","import React from 'react';\r\nimport ComponentsDemo from './ComponentsDemo';\r\n\r\nconst MuiComponentDemo = ({ pageTitle, menus, children }) => {\r\n  const breadcrumbs = [\r\n    { label: 'Home', link: '/' },\r\n    { label: 'Material UI Components', link: '/components/mui' },\r\n    { label: pageTitle, isActive: true },\r\n  ];\r\n  return (\r\n    <ComponentsDemo pageTitle={pageTitle} breadcrumbs={breadcrumbs} menus={menus}>\r\n      {children}\r\n    </ComponentsDemo>\r\n  );\r\n};\r\nexport default MuiComponentDemo;\r\n","import React from 'react';\r\nimport { Box, Hidden, List, ListItem, ListItemText, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PageContainer from './PageContainer';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  contentArea: {\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      paddingRight: theme.typography.pxToRem(30),\r\n      width: `calc(100% - ${theme.typography.pxToRem(175)})`,\r\n    },\r\n    [theme.breakpoints.up('lg')]: {\r\n      paddingRight: theme.typography.pxToRem(54),\r\n    },\r\n  },\r\n  contentSidebar: {\r\n    width: theme.typography.pxToRem(175),\r\n    height: `calc(100vh - ${theme.typography.pxToRem(102)})`,\r\n    position: 'sticky',\r\n    top: 30,\r\n    overflowY: 'auto',\r\n    flexShrink: 0,\r\n  },\r\n}));\r\n\r\nconst ComponentsDemo = ({ pageTitle, menus, breadcrumbs, children }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <PageContainer heading={pageTitle} breadcrumbs={breadcrumbs}>\r\n      <Box className={classes.root}>\r\n        <Box className={classes.contentArea}>{children}</Box>\r\n        <Hidden xsDown>\r\n          <Box className={classes.contentSidebar}>\r\n            <Typography component=\"h4\" variant=\"h4\">\r\n              Contents\r\n            </Typography>\r\n            <List>\r\n              {menus.map((menu, index) => (\r\n                <ListItem key={index} dense button component=\"a\" href={`#${menu.link}`}>\r\n                  <ListItemText primary={menu.label} />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </Box>\r\n        </Hidden>\r\n      </Box>\r\n    </PageContainer>\r\n  );\r\n};\r\nexport default ComponentsDemo;\r\n","var map = {\n\t\"./Asynchronous.txt\": 2888,\n\t\"./CheckboxesTags.txt\": 2889,\n\t\"./ComboBox.txt\": 2890,\n\t\"./ControllableStates.txt\": 2891,\n\t\"./CountrySelect.txt\": 2892,\n\t\"./CustomInputAutocomplete.txt\": 2893,\n\t\"./CustomizedHook.txt\": 2894,\n\t\"./DisabledOptions.txt\": 2895,\n\t\"./Filter.txt\": 2896,\n\t\"./FixedTags.txt\": 2897,\n\t\"./FreeSolo.txt\": 2898,\n\t\"./FreeSoloCreateOption.txt\": 2899,\n\t\"./FreeSoloCreateOptionDialog.txt\": 2900,\n\t\"./GitHubLabel.txt\": 2901,\n\t\"./GoogleMaps.txt\": 2902,\n\t\"./Grouped.txt\": 2903,\n\t\"./Highlights.txt\": 2904,\n\t\"./LimitTags.txt\": 2905,\n\t\"./Playground.txt\": 2906,\n\t\"./Sizes.txt\": 2907,\n\t\"./Tags.txt\": 2908,\n\t\"./UseAutocomplete.txt\": 2909,\n\t\"./Virtualize.txt\": 2910\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2887;","export default \"// *https://www.registers.service.gov.uk/registers/country/use-the-api*\\r\\nimport fetch from 'cross-fetch';\\r\\nimport React from 'react';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\nimport Autocomplete from '@material-ui/lab/Autocomplete';\\r\\nimport CircularProgress from '@material-ui/core/CircularProgress';\\r\\n\\r\\nfunction sleep(delay = 0) {\\r\\n  return new Promise(resolve => {\\r\\n    setTimeout(resolve, delay);\\r\\n  });\\r\\n}\\r\\n\\r\\nexport default function Asynchronous() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n  const [options, setOptions] = React.useState([]);\\r\\n  const loading = open && options.length === 0;\\r\\n\\r\\n  React.useEffect(() => {\\r\\n    let active = true;\\r\\n\\r\\n    if (!loading) {\\r\\n      return undefined;\\r\\n    }\\r\\n\\r\\n    (async () => {\\r\\n      const response = await fetch('https://country.register.gov.uk/records.json?page-size=5000');\\r\\n      await sleep(1e3); // For demo purposes.\\r\\n      const countries = await response.json();\\r\\n\\r\\n      if (active) {\\r\\n        setOptions(Object.keys(countries).map(key => countries[key].item[0]));\\r\\n      }\\r\\n    })();\\r\\n\\r\\n    return () => {\\r\\n      active = false;\\r\\n    };\\r\\n  }, [loading]);\\r\\n\\r\\n  React.useEffect(() => {\\r\\n    if (!open) {\\r\\n      setOptions([]);\\r\\n    }\\r\\n  }, [open]);\\r\\n\\r\\n  return (\\r\\n    <Autocomplete\\r\\n      id=\\\"asynchronous-demo\\\"\\r\\n      style={{ width: 300 }}\\r\\n      open={open}\\r\\n      onOpen={() => {\\r\\n        setOpen(true);\\r\\n      }}\\r\\n      onClose={() => {\\r\\n        setOpen(false);\\r\\n      }}\\r\\n      getOptionSelected={(option, value) => option.name === value.name}\\r\\n      getOptionLabel={option => option.name}\\r\\n      options={options}\\r\\n      loading={loading}\\r\\n      renderInput={params => (\\r\\n        <TextField\\r\\n          {...params}\\r\\n          label=\\\"Asynchronous\\\"\\r\\n          variant=\\\"outlined\\\"\\r\\n          InputProps={{\\r\\n            ...params.InputProps,\\r\\n            endAdornment: (\\r\\n              <React.Fragment>\\r\\n                {loading ? <CircularProgress color=\\\"inherit\\\" size={20} /> : null}\\r\\n                {params.InputProps.endAdornment}\\r\\n              </React.Fragment>\\r\\n            ),\\r\\n          }}\\r\\n        />\\r\\n      )}\\r\\n    />\\r\\n  );\\r\\n}\\r\\n\";","export default \"/* eslint-disable no-use-before-define */\\r\\n\\r\\nimport React from 'react';\\r\\nimport Checkbox from '@material-ui/core/Checkbox';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\nimport Autocomplete from '@material-ui/lab/Autocomplete';\\r\\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\\r\\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\\r\\n\\r\\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\\\"small\\\" />;\\r\\nconst checkedIcon = <CheckBoxIcon fontSize=\\\"small\\\" />;\\r\\n\\r\\nexport default function CheckboxesTags() {\\r\\n  return (\\r\\n    <Autocomplete\\r\\n      multiple\\r\\n      id=\\\"checkboxes-tags-demo\\\"\\r\\n      options={top100Films}\\r\\n      disableCloseOnSelect\\r\\n      getOptionLabel={option => option.title}\\r\\n      renderOption={(option, { selected }) => (\\r\\n        <React.Fragment>\\r\\n          <Checkbox icon={icon} checkedIcon={checkedIcon} style={{ marginRight: 8 }} checked={selected} />\\r\\n          {option.title}\\r\\n        </React.Fragment>\\r\\n      )}\\r\\n      style={{ width: 500 }}\\r\\n      renderInput={params => <TextField {...params} variant=\\\"outlined\\\" label=\\\"Checkboxes\\\" placeholder=\\\"Favorites\\\" />}\\r\\n    />\\r\\n  );\\r\\n}\\r\\n\\r\\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\\r\\nconst top100Films = [\\r\\n  { title: 'The Shawshank Redemption', year: 1994 },\\r\\n  { title: 'The Godfather', year: 1972 },\\r\\n  { title: 'The Godfather: Part II', year: 1974 },\\r\\n  { title: 'The Dark Knight', year: 2008 },\\r\\n  { title: '12 Angry Men', year: 1957 },\\r\\n  { title: \\\"Schindler's List\\\", year: 1993 },\\r\\n  { title: 'Pulp Fiction', year: 1994 },\\r\\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\\r\\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\\r\\n  { title: 'Fight Club', year: 1999 },\\r\\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\\r\\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\\r\\n  { title: 'Forrest Gump', year: 1994 },\\r\\n  { title: 'Inception', year: 2010 },\\r\\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\\r\\n  { title: \\\"One Flew Over the Cuckoo's Nest\\\", year: 1975 },\\r\\n  { title: 'Goodfellas', year: 1990 },\\r\\n  { title: 'The Matrix', year: 1999 },\\r\\n  { title: 'Seven Samurai', year: 1954 },\\r\\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\\r\\n  { title: 'City of God', year: 2002 },\\r\\n  { title: 'Se7en', year: 1995 },\\r\\n  { title: 'The Silence of the Lambs', year: 1991 },\\r\\n  { title: \\\"It's a Wonderful Life\\\", year: 1946 },\\r\\n  { title: 'Life Is Beautiful', year: 1997 },\\r\\n  { title: 'The Usual Suspects', year: 1995 },\\r\\n  { title: 'Léon: The Professional', year: 1994 },\\r\\n  { title: 'Spirited Away', year: 2001 },\\r\\n  { title: 'Saving Private Ryan', year: 1998 },\\r\\n  { title: 'Once Upon a Time in the West', year: 1968 },\\r\\n  { title: 'American History X', year: 1998 },\\r\\n  { title: 'Interstellar', year: 2014 },\\r\\n];\\r\\n\";","export default \"/* eslint-disable no-use-before-define */\\r\\nimport React from 'react';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\nimport Autocomplete from '@material-ui/lab/Autocomplete';\\r\\n\\r\\nexport default function ComboBox() {\\r\\n  return (\\r\\n    <Autocomplete\\r\\n      id=\\\"combo-box-demo\\\"\\r\\n      options={top100Films}\\r\\n      getOptionLabel={option => option.title}\\r\\n      style={{ width: 300 }}\\r\\n      renderInput={params => <TextField {...params} label=\\\"Combo box\\\" variant=\\\"outlined\\\" />}\\r\\n    />\\r\\n  );\\r\\n}\\r\\n\\r\\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\\r\\nconst top100Films = [\\r\\n  { title: 'The Shawshank Redemption', year: 1994 },\\r\\n  { title: 'The Godfather', year: 1972 },\\r\\n  { title: 'The Godfather: Part II', year: 1974 },\\r\\n  { title: 'The Dark Knight', year: 2008 },\\r\\n  { title: '12 Angry Men', year: 1957 },\\r\\n  { title: \\\"Schindler's List\\\", year: 1993 },\\r\\n  { title: 'Pulp Fiction', year: 1994 },\\r\\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\\r\\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\\r\\n  { title: 'Fight Club', year: 1999 },\\r\\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\\r\\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\\r\\n  { title: 'Forrest Gump', year: 1994 },\\r\\n  { title: 'Inception', year: 2010 },\\r\\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\\r\\n  { title: \\\"One Flew Over the Cuckoo's Nest\\\", year: 1975 },\\r\\n  { title: 'Goodfellas', year: 1990 },\\r\\n  { title: 'The Matrix', year: 1999 },\\r\\n  { title: 'Seven Samurai', year: 1954 },\\r\\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\\r\\n  { title: 'City of God', year: 2002 },\\r\\n  { title: 'Se7en', year: 1995 },\\r\\n  { title: 'The Silence of the Lambs', year: 1991 },\\r\\n  { title: \\\"It's a Wonderful Life\\\", year: 1946 },\\r\\n  { title: 'Life Is Beautiful', year: 1997 },\\r\\n  { title: 'The Usual Suspects', year: 1995 },\\r\\n  { title: 'Léon: The Professional', year: 1994 },\\r\\n  { title: 'Spirited Away', year: 2001 },\\r\\n  { title: 'Saving Private Ryan', year: 1998 },\\r\\n  { title: 'Once Upon a Time in the West', year: 1968 },\\r\\n  { title: 'American History X', year: 1998 },\\r\\n  { title: 'Interstellar', year: 2014 },\\r\\n  { title: 'Casablanca', year: 1942 },\\r\\n  { title: 'City Lights', year: 1931 },\\r\\n  { title: 'Psycho', year: 1960 },\\r\\n  { title: 'The Green Mile', year: 1999 },\\r\\n  { title: 'The Intouchables', year: 2011 },\\r\\n  { title: 'Modern Times', year: 1936 },\\r\\n  { title: 'Raiders of the Lost Ark', year: 1981 },\\r\\n  { title: 'Rear Window', year: 1954 },\\r\\n  { title: 'The Pianist', year: 2002 },\\r\\n  { title: 'The Departed', year: 2006 },\\r\\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\\r\\n  { title: 'Back to the Future', year: 1985 },\\r\\n  { title: 'Whiplash', year: 2014 },\\r\\n  { title: 'Gladiator', year: 2000 },\\r\\n  { title: 'Memento', year: 2000 },\\r\\n  { title: 'The Prestige', year: 2006 },\\r\\n  { title: 'The Lion King', year: 1994 },\\r\\n  { title: 'Apocalypse Now', year: 1979 },\\r\\n  { title: 'Alien', year: 1979 },\\r\\n  { title: 'Sunset Boulevard', year: 1950 },\\r\\n  {\\r\\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\\r\\n    year: 1964,\\r\\n  },\\r\\n  { title: 'The Great Dictator', year: 1940 },\\r\\n  { title: 'Cinema Paradiso', year: 1988 },\\r\\n  { title: 'The Lives of Others', year: 2006 },\\r\\n  { title: 'Grave of the Fireflies', year: 1988 },\\r\\n  { title: 'Paths of Glory', year: 1957 },\\r\\n  { title: 'Django Unchained', year: 2012 },\\r\\n  { title: 'The Shining', year: 1980 },\\r\\n  { title: 'WALL·E', year: 2008 },\\r\\n  { title: 'American Beauty', year: 1999 },\\r\\n  { title: 'The Dark Knight Rises', year: 2012 },\\r\\n  { title: 'Princess Mononoke', year: 1997 },\\r\\n  { title: 'Aliens', year: 1986 },\\r\\n  { title: 'Oldboy', year: 2003 },\\r\\n  { title: 'Once Upon a Time in America', year: 1984 },\\r\\n  { title: 'Witness for the Prosecution', year: 1957 },\\r\\n  { title: 'Das Boot', year: 1981 },\\r\\n  { title: 'Citizen Kane', year: 1941 },\\r\\n  { title: 'North by Northwest', year: 1959 },\\r\\n  { title: 'Vertigo', year: 1958 },\\r\\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\\r\\n  { title: 'Reservoir Dogs', year: 1992 },\\r\\n  { title: 'Braveheart', year: 1995 },\\r\\n  { title: 'M', year: 1931 },\\r\\n  { title: 'Requiem for a Dream', year: 2000 },\\r\\n  { title: 'Amélie', year: 2001 },\\r\\n  { title: 'A Clockwork Orange', year: 1971 },\\r\\n  { title: 'Like Stars on Earth', year: 2007 },\\r\\n  { title: 'Taxi Driver', year: 1976 },\\r\\n  { title: 'Lawrence of Arabia', year: 1962 },\\r\\n  { title: 'Double Indemnity', year: 1944 },\\r\\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\\r\\n  { title: 'Amadeus', year: 1984 },\\r\\n  { title: 'To Kill a Mockingbird', year: 1962 },\\r\\n  { title: 'Toy Story 3', year: 2010 },\\r\\n  { title: 'Logan', year: 2017 },\\r\\n  { title: 'Full Metal Jacket', year: 1987 },\\r\\n  { title: 'Dangal', year: 2016 },\\r\\n  { title: 'The Sting', year: 1973 },\\r\\n  { title: '2001: A Space Odyssey', year: 1968 },\\r\\n  { title: \\\"Singin' in the Rain\\\", year: 1952 },\\r\\n  { title: 'Toy Story', year: 1995 },\\r\\n  { title: 'Bicycle Thieves', year: 1948 },\\r\\n  { title: 'The Kid', year: 1921 },\\r\\n  { title: 'Inglourious Basterds', year: 2009 },\\r\\n  { title: 'Snatch', year: 2000 },\\r\\n  { title: '3 Idiots', year: 2009 },\\r\\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\\r\\n];\\r\\n\";","export default \"import React from 'react';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\nimport Autocomplete from '@material-ui/lab/Autocomplete';\\r\\n\\r\\nconst options = ['Option 1', 'Option 2'];\\r\\n\\r\\nexport default function ControllableStates() {\\r\\n  const [value, setValue] = React.useState(options[0]);\\r\\n  const [inputValue, setInputValue] = React.useState('');\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <div>{`value: ${value !== null ? `'${value}'` : 'null'}`}</div>\\r\\n      <div>{`inputValue: '${inputValue}'`}</div>\\r\\n      <br />\\r\\n      <Autocomplete\\r\\n        value={value}\\r\\n        onChange={(event, newValue) => {\\r\\n          setValue(newValue);\\r\\n        }}\\r\\n        inputValue={inputValue}\\r\\n        onInputChange={(event, newInputValue) => {\\r\\n          setInputValue(newInputValue);\\r\\n        }}\\r\\n        id=\\\"controllable-states-demo\\\"\\r\\n        options={options}\\r\\n        style={{ width: 300 }}\\r\\n        renderInput={params => <TextField {...params} label=\\\"Controllable\\\" variant=\\\"outlined\\\" />}\\r\\n      />\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","export default \"/* eslint-disable no-use-before-define */\\r\\nimport React from 'react';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\nimport Autocomplete from '@material-ui/lab/Autocomplete';\\r\\nimport { makeStyles } from '@material-ui/core/styles';\\r\\n\\r\\n// ISO 3166-1 alpha-2\\r\\n// ⚠️ No support for IE 11\\r\\nfunction countryToFlag(isoCode) {\\r\\n  return typeof String.fromCodePoint !== 'undefined'\\r\\n    ? isoCode.toUpperCase().replace(/./g, char => String.fromCodePoint(char.charCodeAt(0) + 127397))\\r\\n    : isoCode;\\r\\n}\\r\\n\\r\\nconst useStyles = makeStyles({\\r\\n  option: {\\r\\n    fontSize: 15,\\r\\n    '& > span': {\\r\\n      marginRight: 10,\\r\\n      fontSize: 18,\\r\\n    },\\r\\n  },\\r\\n});\\r\\n\\r\\nexport default function CountrySelect() {\\r\\n  const classes = useStyles();\\r\\n\\r\\n  return (\\r\\n    <Autocomplete\\r\\n      id=\\\"country-select-demo\\\"\\r\\n      style={{ width: 300 }}\\r\\n      options={countries}\\r\\n      classes={{\\r\\n        option: classes.option,\\r\\n      }}\\r\\n      autoHighlight\\r\\n      getOptionLabel={option => option.label}\\r\\n      renderOption={option => (\\r\\n        <React.Fragment>\\r\\n          <span>{countryToFlag(option.code)}</span>\\r\\n          {option.label} ({option.code}) +{option.phone}\\r\\n        </React.Fragment>\\r\\n      )}\\r\\n      renderInput={params => (\\r\\n        <TextField\\r\\n          {...params}\\r\\n          label=\\\"Choose a country\\\"\\r\\n          variant=\\\"outlined\\\"\\r\\n          inputProps={{\\r\\n            ...params.inputProps,\\r\\n            autoComplete: 'new-password', // disable autocomplete and autofill\\r\\n          }}\\r\\n        />\\r\\n      )}\\r\\n    />\\r\\n  );\\r\\n}\\r\\n\\r\\n// From https://bitbucket.org/atlassian/atlaskit-mk-2/raw/4ad0e56649c3e6c973e226b7efaeb28cb240ccb0/packages/core/select/src/data/countries.js\\r\\nconst countries = [\\r\\n  { code: 'AD', label: 'Andorra', phone: '376' },\\r\\n  { code: 'AE', label: 'United Arab Emirates', phone: '971' },\\r\\n  { code: 'AF', label: 'Afghanistan', phone: '93' },\\r\\n  { code: 'AG', label: 'Antigua and Barbuda', phone: '1-268' },\\r\\n  { code: 'AI', label: 'Anguilla', phone: '1-264' },\\r\\n  { code: 'AL', label: 'Albania', phone: '355' },\\r\\n  { code: 'AM', label: 'Armenia', phone: '374' },\\r\\n  { code: 'AO', label: 'Angola', phone: '244' },\\r\\n  { code: 'AQ', label: 'Antarctica', phone: '672' },\\r\\n  { code: 'AR', label: 'Argentina', phone: '54' },\\r\\n  { code: 'AS', label: 'American Samoa', phone: '1-684' },\\r\\n  { code: 'AT', label: 'Austria', phone: '43' },\\r\\n  { code: 'AU', label: 'Australia', phone: '61', suggested: true },\\r\\n  { code: 'AW', label: 'Aruba', phone: '297' },\\r\\n  { code: 'AX', label: 'Alland Islands', phone: '358' },\\r\\n  { code: 'AZ', label: 'Azerbaijan', phone: '994' },\\r\\n  { code: 'BA', label: 'Bosnia and Herzegovina', phone: '387' },\\r\\n  { code: 'BB', label: 'Barbados', phone: '1-246' },\\r\\n  { code: 'BD', label: 'Bangladesh', phone: '880' },\\r\\n  { code: 'BE', label: 'Belgium', phone: '32' },\\r\\n  { code: 'BF', label: 'Burkina Faso', phone: '226' },\\r\\n  { code: 'BG', label: 'Bulgaria', phone: '359' },\\r\\n  { code: 'BH', label: 'Bahrain', phone: '973' },\\r\\n  { code: 'BI', label: 'Burundi', phone: '257' },\\r\\n  { code: 'BJ', label: 'Benin', phone: '229' },\\r\\n  { code: 'BL', label: 'Saint Barthelemy', phone: '590' },\\r\\n  { code: 'BM', label: 'Bermuda', phone: '1-441' },\\r\\n  { code: 'BN', label: 'Brunei Darussalam', phone: '673' },\\r\\n  { code: 'BO', label: 'Bolivia', phone: '591' },\\r\\n  { code: 'BR', label: 'Brazil', phone: '55' },\\r\\n  { code: 'BS', label: 'Bahamas', phone: '1-242' },\\r\\n  { code: 'BT', label: 'Bhutan', phone: '975' },\\r\\n  { code: 'BV', label: 'Bouvet Island', phone: '47' },\\r\\n  { code: 'BW', label: 'Botswana', phone: '267' },\\r\\n  { code: 'BY', label: 'Belarus', phone: '375' },\\r\\n  { code: 'BZ', label: 'Belize', phone: '501' },\\r\\n  { code: 'CA', label: 'Canada', phone: '1', suggested: true },\\r\\n  { code: 'CC', label: 'Cocos (Keeling) Islands', phone: '61' },\\r\\n  { code: 'CD', label: 'Congo, Democratic Republic of the', phone: '243' },\\r\\n  { code: 'CF', label: 'Central African Republic', phone: '236' },\\r\\n  { code: 'CG', label: 'Congo, Republic of the', phone: '242' },\\r\\n  { code: 'CH', label: 'Switzerland', phone: '41' },\\r\\n  { code: 'CI', label: \\\"Cote d'Ivoire\\\", phone: '225' },\\r\\n  { code: 'CK', label: 'Cook Islands', phone: '682' },\\r\\n  { code: 'CL', label: 'Chile', phone: '56' },\\r\\n  { code: 'CM', label: 'Cameroon', phone: '237' },\\r\\n  { code: 'CN', label: 'China', phone: '86' },\\r\\n  { code: 'CO', label: 'Colombia', phone: '57' },\\r\\n  { code: 'CR', label: 'Costa Rica', phone: '506' },\\r\\n  { code: 'CU', label: 'Cuba', phone: '53' },\\r\\n  { code: 'CV', label: 'Cape Verde', phone: '238' },\\r\\n  { code: 'CW', label: 'Curacao', phone: '599' },\\r\\n  { code: 'CX', label: 'Christmas Island', phone: '61' },\\r\\n  { code: 'CY', label: 'Cyprus', phone: '357' },\\r\\n  { code: 'CZ', label: 'Czech Republic', phone: '420' },\\r\\n  { code: 'DE', label: 'Germany', phone: '49', suggested: true },\\r\\n  { code: 'DJ', label: 'Djibouti', phone: '253' },\\r\\n  { code: 'DK', label: 'Denmark', phone: '45' },\\r\\n  { code: 'DM', label: 'Dominica', phone: '1-767' },\\r\\n  { code: 'DO', label: 'Dominican Republic', phone: '1-809' },\\r\\n  { code: 'DZ', label: 'Algeria', phone: '213' },\\r\\n  { code: 'EC', label: 'Ecuador', phone: '593' },\\r\\n  { code: 'EE', label: 'Estonia', phone: '372' },\\r\\n  { code: 'EG', label: 'Egypt', phone: '20' },\\r\\n  { code: 'EH', label: 'Western Sahara', phone: '212' },\\r\\n  { code: 'ER', label: 'Eritrea', phone: '291' },\\r\\n  { code: 'ES', label: 'Spain', phone: '34' },\\r\\n  { code: 'ET', label: 'Ethiopia', phone: '251' },\\r\\n  { code: 'FI', label: 'Finland', phone: '358' },\\r\\n  { code: 'FJ', label: 'Fiji', phone: '679' },\\r\\n  { code: 'FK', label: 'Falkland Islands (Malvinas)', phone: '500' },\\r\\n  { code: 'FM', label: 'Micronesia, Federated States of', phone: '691' },\\r\\n  { code: 'FO', label: 'Faroe Islands', phone: '298' },\\r\\n  { code: 'FR', label: 'France', phone: '33', suggested: true },\\r\\n  { code: 'GA', label: 'Gabon', phone: '241' },\\r\\n  { code: 'GB', label: 'United Kingdom', phone: '44' },\\r\\n  { code: 'GD', label: 'Grenada', phone: '1-473' },\\r\\n  { code: 'GE', label: 'Georgia', phone: '995' },\\r\\n  { code: 'GF', label: 'French Guiana', phone: '594' },\\r\\n  { code: 'GG', label: 'Guernsey', phone: '44' },\\r\\n  { code: 'GH', label: 'Ghana', phone: '233' },\\r\\n  { code: 'GI', label: 'Gibraltar', phone: '350' },\\r\\n  { code: 'GL', label: 'Greenland', phone: '299' },\\r\\n  { code: 'GM', label: 'Gambia', phone: '220' },\\r\\n  { code: 'GN', label: 'Guinea', phone: '224' },\\r\\n  { code: 'GP', label: 'Guadeloupe', phone: '590' },\\r\\n  { code: 'GQ', label: 'Equatorial Guinea', phone: '240' },\\r\\n  { code: 'GR', label: 'Greece', phone: '30' },\\r\\n  {\\r\\n    code: 'GS',\\r\\n    label: 'South Georgia and the South Sandwich Islands',\\r\\n    phone: '500',\\r\\n  },\\r\\n  { code: 'GT', label: 'Guatemala', phone: '502' },\\r\\n  { code: 'GU', label: 'Guam', phone: '1-671' },\\r\\n  { code: 'GW', label: 'Guinea-Bissau', phone: '245' },\\r\\n  { code: 'GY', label: 'Guyana', phone: '592' },\\r\\n  { code: 'HK', label: 'Hong Kong', phone: '852' },\\r\\n  { code: 'HM', label: 'Heard Island and McDonald Islands', phone: '672' },\\r\\n  { code: 'HN', label: 'Honduras', phone: '504' },\\r\\n  { code: 'HR', label: 'Croatia', phone: '385' },\\r\\n  { code: 'HT', label: 'Haiti', phone: '509' },\\r\\n  { code: 'HU', label: 'Hungary', phone: '36' },\\r\\n  { code: 'ID', label: 'Indonesia', phone: '62' },\\r\\n  { code: 'IE', label: 'Ireland', phone: '353' },\\r\\n  { code: 'IL', label: 'Israel', phone: '972' },\\r\\n  { code: 'IM', label: 'Isle of Man', phone: '44' },\\r\\n  { code: 'IN', label: 'India', phone: '91' },\\r\\n  { code: 'IO', label: 'British Indian Ocean Territory', phone: '246' },\\r\\n  { code: 'IQ', label: 'Iraq', phone: '964' },\\r\\n  { code: 'IR', label: 'Iran, Islamic Republic of', phone: '98' },\\r\\n  { code: 'IS', label: 'Iceland', phone: '354' },\\r\\n  { code: 'IT', label: 'Italy', phone: '39' },\\r\\n  { code: 'JE', label: 'Jersey', phone: '44' },\\r\\n  { code: 'JM', label: 'Jamaica', phone: '1-876' },\\r\\n  { code: 'JO', label: 'Jordan', phone: '962' },\\r\\n  { code: 'JP', label: 'Japan', phone: '81', suggested: true },\\r\\n  { code: 'KE', label: 'Kenya', phone: '254' },\\r\\n  { code: 'KG', label: 'Kyrgyzstan', phone: '996' },\\r\\n  { code: 'KH', label: 'Cambodia', phone: '855' },\\r\\n  { code: 'KI', label: 'Kiribati', phone: '686' },\\r\\n  { code: 'KM', label: 'Comoros', phone: '269' },\\r\\n  { code: 'KN', label: 'Saint Kitts and Nevis', phone: '1-869' },\\r\\n  { code: 'KP', label: \\\"Korea, Democratic People's Republic of\\\", phone: '850' },\\r\\n  { code: 'KR', label: 'Korea, Republic of', phone: '82' },\\r\\n  { code: 'KW', label: 'Kuwait', phone: '965' },\\r\\n  { code: 'KY', label: 'Cayman Islands', phone: '1-345' },\\r\\n  { code: 'KZ', label: 'Kazakhstan', phone: '7' },\\r\\n  { code: 'LA', label: \\\"Lao People's Democratic Republic\\\", phone: '856' },\\r\\n  { code: 'LB', label: 'Lebanon', phone: '961' },\\r\\n  { code: 'LC', label: 'Saint Lucia', phone: '1-758' },\\r\\n  { code: 'LI', label: 'Liechtenstein', phone: '423' },\\r\\n  { code: 'LK', label: 'Sri Lanka', phone: '94' },\\r\\n  { code: 'LR', label: 'Liberia', phone: '231' },\\r\\n  { code: 'LS', label: 'Lesotho', phone: '266' },\\r\\n  { code: 'LT', label: 'Lithuania', phone: '370' },\\r\\n  { code: 'LU', label: 'Luxembourg', phone: '352' },\\r\\n  { code: 'LV', label: 'Latvia', phone: '371' },\\r\\n  { code: 'LY', label: 'Libya', phone: '218' },\\r\\n  { code: 'MA', label: 'Morocco', phone: '212' },\\r\\n  { code: 'MC', label: 'Monaco', phone: '377' },\\r\\n  { code: 'MD', label: 'Moldova, Republic of', phone: '373' },\\r\\n  { code: 'ME', label: 'Montenegro', phone: '382' },\\r\\n  { code: 'MF', label: 'Saint Martin (French part)', phone: '590' },\\r\\n  { code: 'MG', label: 'Madagascar', phone: '261' },\\r\\n  { code: 'MH', label: 'Marshall Islands', phone: '692' },\\r\\n  {\\r\\n    code: 'MK',\\r\\n    label: 'Macedonia, the Former Yugoslav Republic of',\\r\\n    phone: '389',\\r\\n  },\\r\\n  { code: 'ML', label: 'Mali', phone: '223' },\\r\\n  { code: 'MM', label: 'Myanmar', phone: '95' },\\r\\n  { code: 'MN', label: 'Mongolia', phone: '976' },\\r\\n  { code: 'MO', label: 'Macao', phone: '853' },\\r\\n  { code: 'MP', label: 'Northern Mariana Islands', phone: '1-670' },\\r\\n  { code: 'MQ', label: 'Martinique', phone: '596' },\\r\\n  { code: 'MR', label: 'Mauritania', phone: '222' },\\r\\n  { code: 'MS', label: 'Montserrat', phone: '1-664' },\\r\\n  { code: 'MT', label: 'Malta', phone: '356' },\\r\\n  { code: 'MU', label: 'Mauritius', phone: '230' },\\r\\n  { code: 'MV', label: 'Maldives', phone: '960' },\\r\\n  { code: 'MW', label: 'Malawi', phone: '265' },\\r\\n  { code: 'MX', label: 'Mexico', phone: '52' },\\r\\n  { code: 'MY', label: 'Malaysia', phone: '60' },\\r\\n  { code: 'MZ', label: 'Mozambique', phone: '258' },\\r\\n  { code: 'NA', label: 'Namibia', phone: '264' },\\r\\n  { code: 'NC', label: 'New Caledonia', phone: '687' },\\r\\n  { code: 'NE', label: 'Niger', phone: '227' },\\r\\n  { code: 'NF', label: 'Norfolk Island', phone: '672' },\\r\\n  { code: 'NG', label: 'Nigeria', phone: '234' },\\r\\n  { code: 'NI', label: 'Nicaragua', phone: '505' },\\r\\n  { code: 'NL', label: 'Netherlands', phone: '31' },\\r\\n  { code: 'NO', label: 'Norway', phone: '47' },\\r\\n  { code: 'NP', label: 'Nepal', phone: '977' },\\r\\n  { code: 'NR', label: 'Nauru', phone: '674' },\\r\\n  { code: 'NU', label: 'Niue', phone: '683' },\\r\\n  { code: 'NZ', label: 'New Zealand', phone: '64' },\\r\\n  { code: 'OM', label: 'Oman', phone: '968' },\\r\\n  { code: 'PA', label: 'Panama', phone: '507' },\\r\\n  { code: 'PE', label: 'Peru', phone: '51' },\\r\\n  { code: 'PF', label: 'French Polynesia', phone: '689' },\\r\\n  { code: 'PG', label: 'Papua New Guinea', phone: '675' },\\r\\n  { code: 'PH', label: 'Philippines', phone: '63' },\\r\\n  { code: 'PK', label: 'Pakistan', phone: '92' },\\r\\n  { code: 'PL', label: 'Poland', phone: '48' },\\r\\n  { code: 'PM', label: 'Saint Pierre and Miquelon', phone: '508' },\\r\\n  { code: 'PN', label: 'Pitcairn', phone: '870' },\\r\\n  { code: 'PR', label: 'Puerto Rico', phone: '1' },\\r\\n  { code: 'PS', label: 'Palestine, State of', phone: '970' },\\r\\n  { code: 'PT', label: 'Portugal', phone: '351' },\\r\\n  { code: 'PW', label: 'Palau', phone: '680' },\\r\\n  { code: 'PY', label: 'Paraguay', phone: '595' },\\r\\n  { code: 'QA', label: 'Qatar', phone: '974' },\\r\\n  { code: 'RE', label: 'Reunion', phone: '262' },\\r\\n  { code: 'RO', label: 'Romania', phone: '40' },\\r\\n  { code: 'RS', label: 'Serbia', phone: '381' },\\r\\n  { code: 'RU', label: 'Russian Federation', phone: '7' },\\r\\n  { code: 'RW', label: 'Rwanda', phone: '250' },\\r\\n  { code: 'SA', label: 'Saudi Arabia', phone: '966' },\\r\\n  { code: 'SB', label: 'Solomon Islands', phone: '677' },\\r\\n  { code: 'SC', label: 'Seychelles', phone: '248' },\\r\\n  { code: 'SD', label: 'Sudan', phone: '249' },\\r\\n  { code: 'SE', label: 'Sweden', phone: '46' },\\r\\n  { code: 'SG', label: 'Singapore', phone: '65' },\\r\\n  { code: 'SH', label: 'Saint Helena', phone: '290' },\\r\\n  { code: 'SI', label: 'Slovenia', phone: '386' },\\r\\n  { code: 'SJ', label: 'Svalbard and Jan Mayen', phone: '47' },\\r\\n  { code: 'SK', label: 'Slovakia', phone: '421' },\\r\\n  { code: 'SL', label: 'Sierra Leone', phone: '232' },\\r\\n  { code: 'SM', label: 'San Marino', phone: '378' },\\r\\n  { code: 'SN', label: 'Senegal', phone: '221' },\\r\\n  { code: 'SO', label: 'Somalia', phone: '252' },\\r\\n  { code: 'SR', label: 'Suriname', phone: '597' },\\r\\n  { code: 'SS', label: 'South Sudan', phone: '211' },\\r\\n  { code: 'ST', label: 'Sao Tome and Principe', phone: '239' },\\r\\n  { code: 'SV', label: 'El Salvador', phone: '503' },\\r\\n  { code: 'SX', label: 'Sint Maarten (Dutch part)', phone: '1-721' },\\r\\n  { code: 'SY', label: 'Syrian Arab Republic', phone: '963' },\\r\\n  { code: 'SZ', label: 'Swaziland', phone: '268' },\\r\\n  { code: 'TC', label: 'Turks and Caicos Islands', phone: '1-649' },\\r\\n  { code: 'TD', label: 'Chad', phone: '235' },\\r\\n  { code: 'TF', label: 'French Southern Territories', phone: '262' },\\r\\n  { code: 'TG', label: 'Togo', phone: '228' },\\r\\n  { code: 'TH', label: 'Thailand', phone: '66' },\\r\\n  { code: 'TJ', label: 'Tajikistan', phone: '992' },\\r\\n  { code: 'TK', label: 'Tokelau', phone: '690' },\\r\\n  { code: 'TL', label: 'Timor-Leste', phone: '670' },\\r\\n  { code: 'TM', label: 'Turkmenistan', phone: '993' },\\r\\n  { code: 'TN', label: 'Tunisia', phone: '216' },\\r\\n  { code: 'TO', label: 'Tonga', phone: '676' },\\r\\n  { code: 'TR', label: 'Turkey', phone: '90' },\\r\\n  { code: 'TT', label: 'Trinidad and Tobago', phone: '1-868' },\\r\\n  { code: 'TV', label: 'Tuvalu', phone: '688' },\\r\\n  { code: 'TW', label: 'Taiwan, Province of China', phone: '886' },\\r\\n  { code: 'TZ', label: 'United Republic of Tanzania', phone: '255' },\\r\\n  { code: 'UA', label: 'Ukraine', phone: '380' },\\r\\n  { code: 'UG', label: 'Uganda', phone: '256' },\\r\\n  { code: 'US', label: 'United States', phone: '1', suggested: true },\\r\\n  { code: 'UY', label: 'Uruguay', phone: '598' },\\r\\n  { code: 'UZ', label: 'Uzbekistan', phone: '998' },\\r\\n  { code: 'VA', label: 'Holy See (Vatican City State)', phone: '379' },\\r\\n  { code: 'VC', label: 'Saint Vincent and the Grenadines', phone: '1-784' },\\r\\n  { code: 'VE', label: 'Venezuela', phone: '58' },\\r\\n  { code: 'VG', label: 'British Virgin Islands', phone: '1-284' },\\r\\n  { code: 'VI', label: 'US Virgin Islands', phone: '1-340' },\\r\\n  { code: 'VN', label: 'Vietnam', phone: '84' },\\r\\n  { code: 'VU', label: 'Vanuatu', phone: '678' },\\r\\n  { code: 'WF', label: 'Wallis and Futuna', phone: '681' },\\r\\n  { code: 'WS', label: 'Samoa', phone: '685' },\\r\\n  { code: 'XK', label: 'Kosovo', phone: '383' },\\r\\n  { code: 'YE', label: 'Yemen', phone: '967' },\\r\\n  { code: 'YT', label: 'Mayotte', phone: '262' },\\r\\n  { code: 'ZA', label: 'South Africa', phone: '27' },\\r\\n  { code: 'ZM', label: 'Zambia', phone: '260' },\\r\\n  { code: 'ZW', label: 'Zimbabwe', phone: '263' },\\r\\n];\\r\\n\";","export default \"import React from 'react';\\r\\nimport Autocomplete from '@material-ui/lab/Autocomplete';\\r\\n\\r\\nconst options = ['Option 1', 'Option 2'];\\r\\n\\r\\nexport default function CustomInputAutocomplete() {\\r\\n  return (\\r\\n    <Autocomplete\\r\\n      id=\\\"custom-input-demo\\\"\\r\\n      options={options}\\r\\n      renderInput={params => (\\r\\n        <div ref={params.InputProps.ref}>\\r\\n          <input style={{ width: 200 }} type=\\\"text\\\" {...params.inputProps} />\\r\\n        </div>\\r\\n      )}\\r\\n    />\\r\\n  );\\r\\n}\\r\\n\";","export default \"/* eslint-disable no-use-before-define */\\r\\nimport React from 'react';\\r\\nimport useAutocomplete from '@material-ui/lab/useAutocomplete';\\r\\nimport NoSsr from '@material-ui/core/NoSsr';\\r\\nimport CheckIcon from '@material-ui/icons/Check';\\r\\nimport CloseIcon from '@material-ui/icons/Close';\\r\\nimport styled from 'styled-components';\\r\\n\\r\\nconst Label = styled('label')`\\r\\n  padding: 0 0 4px;\\r\\n  line-height: 1.5;\\r\\n  display: block;\\r\\n`;\\r\\n\\r\\nconst InputWrapper = styled('div')`\\r\\n  width: 300px;\\r\\n  border: 1px solid #d9d9d9;\\r\\n  background-color: #fff;\\r\\n  border-radius: 4px;\\r\\n  padding: 1px;\\r\\n  display: flex;\\r\\n  flex-wrap: wrap;\\r\\n\\r\\n  &:hover {\\r\\n    border-color: #40a9ff;\\r\\n  }\\r\\n\\r\\n  &.focused {\\r\\n    border-color: #40a9ff;\\r\\n    box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\\r\\n  }\\r\\n\\r\\n  & input {\\r\\n    font-size: 14px;\\r\\n    height: 30px;\\r\\n    box-sizing: border-box;\\r\\n    padding: 4px 6px;\\r\\n    width: 0;\\r\\n    min-width: 30px;\\r\\n    flex-grow: 1;\\r\\n    border: 0;\\r\\n    margin: 0;\\r\\n    outline: 0;\\r\\n  }\\r\\n`;\\r\\n\\r\\nconst Tag = styled(({ label, onDelete, ...props }) => (\\r\\n  <div {...props}>\\r\\n    <span>{label}</span>\\r\\n    <CloseIcon onClick={onDelete} />\\r\\n  </div>\\r\\n))`\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  height: 24px;\\r\\n  margin: 2px;\\r\\n  line-height: 22px;\\r\\n  background-color: #fafafa;\\r\\n  border: 1px solid #e8e8e8;\\r\\n  border-radius: 2px;\\r\\n  box-sizing: content-box;\\r\\n  padding: 0 4px 0 10px;\\r\\n  outline: 0;\\r\\n  overflow: hidden;\\r\\n\\r\\n  &:focus {\\r\\n    border-color: #40a9ff;\\r\\n    background-color: #e6f7ff;\\r\\n  }\\r\\n\\r\\n  & span {\\r\\n    overflow: hidden;\\r\\n    white-space: nowrap;\\r\\n    text-overflow: ellipsis;\\r\\n  }\\r\\n\\r\\n  & svg {\\r\\n    font-size: 12px;\\r\\n    cursor: pointer;\\r\\n    padding: 4px;\\r\\n  }\\r\\n`;\\r\\n\\r\\nconst Listbox = styled('ul')`\\r\\n  width: 300px;\\r\\n  margin: 2px 0 0;\\r\\n  padding: 0;\\r\\n  position: absolute;\\r\\n  list-style: none;\\r\\n  background-color: #fff;\\r\\n  overflow: auto;\\r\\n  max-height: 250px;\\r\\n  border-radius: 4px;\\r\\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\\r\\n  z-index: 1;\\r\\n\\r\\n  & li {\\r\\n    padding: 5px 12px;\\r\\n    display: flex;\\r\\n\\r\\n    & span {\\r\\n      flex-grow: 1;\\r\\n    }\\r\\n\\r\\n    & svg {\\r\\n      color: transparent;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  & li[aria-selected='true'] {\\r\\n    background-color: #fafafa;\\r\\n    font-weight: 600;\\r\\n\\r\\n    & svg {\\r\\n      color: #1890ff;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  & li[data-focus='true'] {\\r\\n    background-color: #e6f7ff;\\r\\n    cursor: pointer;\\r\\n\\r\\n    & svg {\\r\\n      color: #000;\\r\\n    }\\r\\n  }\\r\\n`;\\r\\n\\r\\nexport default function CustomizedHook() {\\r\\n  const {\\r\\n    getRootProps,\\r\\n    getInputLabelProps,\\r\\n    getInputProps,\\r\\n    getTagProps,\\r\\n    getListboxProps,\\r\\n    getOptionProps,\\r\\n    groupedOptions,\\r\\n    value,\\r\\n    focused,\\r\\n    setAnchorEl,\\r\\n  } = useAutocomplete({\\r\\n    id: 'customized-hook-demo',\\r\\n    defaultValue: [top100Films[1]],\\r\\n    multiple: true,\\r\\n    options: top100Films,\\r\\n    getOptionLabel: option => option.title,\\r\\n  });\\r\\n\\r\\n  return (\\r\\n    <NoSsr>\\r\\n      <div>\\r\\n        <div {...getRootProps()}>\\r\\n          <Label {...getInputLabelProps()}>Customized hook</Label>\\r\\n          <InputWrapper ref={setAnchorEl} className={focused ? 'focused' : ''}>\\r\\n            {value.map((option, index) => (\\r\\n              <Tag label={option.title} {...getTagProps({ index })} />\\r\\n            ))}\\r\\n\\r\\n            <input {...getInputProps()} />\\r\\n          </InputWrapper>\\r\\n        </div>\\r\\n        {groupedOptions.length > 0 ? (\\r\\n          <Listbox {...getListboxProps()}>\\r\\n            {groupedOptions.map((option, index) => (\\r\\n              <li {...getOptionProps({ option, index })}>\\r\\n                <span>{option.title}</span>\\r\\n                <CheckIcon fontSize=\\\"small\\\" />\\r\\n              </li>\\r\\n            ))}\\r\\n          </Listbox>\\r\\n        ) : null}\\r\\n      </div>\\r\\n    </NoSsr>\\r\\n  );\\r\\n}\\r\\n\\r\\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\\r\\nconst top100Films = [\\r\\n  { title: 'The Shawshank Redemption', year: 1994 },\\r\\n  { title: 'The Godfather', year: 1972 },\\r\\n  { title: 'The Godfather: Part II', year: 1974 },\\r\\n  { title: 'The Dark Knight', year: 2008 },\\r\\n  { title: '12 Angry Men', year: 1957 },\\r\\n  { title: \\\"Schindler's List\\\", year: 1993 },\\r\\n  { title: 'Pulp Fiction', year: 1994 },\\r\\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\\r\\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\\r\\n  { title: 'Fight Club', year: 1999 },\\r\\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\\r\\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\\r\\n  { title: 'Forrest Gump', year: 1994 },\\r\\n  { title: 'Inception', year: 2010 },\\r\\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\\r\\n  { title: \\\"One Flew Over the Cuckoo's Nest\\\", year: 1975 },\\r\\n  { title: 'Goodfellas', year: 1990 },\\r\\n  { title: 'The Matrix', year: 1999 },\\r\\n  { title: 'Seven Samurai', year: 1954 },\\r\\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\\r\\n  { title: 'City of God', year: 2002 },\\r\\n  { title: 'Se7en', year: 1995 },\\r\\n  { title: 'The Silence of the Lambs', year: 1991 },\\r\\n  { title: \\\"It's a Wonderful Life\\\", year: 1946 },\\r\\n  { title: 'Life Is Beautiful', year: 1997 },\\r\\n  { title: 'The Usual Suspects', year: 1995 },\\r\\n  { title: 'Léon: The Professional', year: 1994 },\\r\\n  { title: 'Spirited Away', year: 2001 },\\r\\n  { title: 'Saving Private Ryan', year: 1998 },\\r\\n  { title: 'Once Upon a Time in the West', year: 1968 },\\r\\n  { title: 'American History X', year: 1998 },\\r\\n  { title: 'Interstellar', year: 2014 },\\r\\n  { title: 'Casablanca', year: 1942 },\\r\\n  { title: 'City Lights', year: 1931 },\\r\\n  { title: 'Psycho', year: 1960 },\\r\\n  { title: 'The Green Mile', year: 1999 },\\r\\n  { title: 'The Intouchables', year: 2011 },\\r\\n  { title: 'Modern Times', year: 1936 },\\r\\n  { title: 'Raiders of the Lost Ark', year: 1981 },\\r\\n  { title: 'Rear Window', year: 1954 },\\r\\n  { title: 'The Pianist', year: 2002 },\\r\\n  { title: 'The Departed', year: 2006 },\\r\\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\\r\\n  { title: 'Back to the Future', year: 1985 },\\r\\n  { title: 'Whiplash', year: 2014 },\\r\\n  { title: 'Gladiator', year: 2000 },\\r\\n  { title: 'Memento', year: 2000 },\\r\\n  { title: 'The Prestige', year: 2006 },\\r\\n  { title: 'The Lion King', year: 1994 },\\r\\n  { title: 'Apocalypse Now', year: 1979 },\\r\\n  { title: 'Alien', year: 1979 },\\r\\n  { title: 'Sunset Boulevard', year: 1950 },\\r\\n  {\\r\\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\\r\\n    year: 1964,\\r\\n  },\\r\\n  { title: 'The Great Dictator', year: 1940 },\\r\\n  { title: 'Cinema Paradiso', year: 1988 },\\r\\n  { title: 'The Lives of Others', year: 2006 },\\r\\n  { title: 'Grave of the Fireflies', year: 1988 },\\r\\n  { title: 'Paths of Glory', year: 1957 },\\r\\n  { title: 'Django Unchained', year: 2012 },\\r\\n  { title: 'The Shining', year: 1980 },\\r\\n  { title: 'WALL·E', year: 2008 },\\r\\n  { title: 'American Beauty', year: 1999 },\\r\\n  { title: 'The Dark Knight Rises', year: 2012 },\\r\\n  { title: 'Princess Mononoke', year: 1997 },\\r\\n  { title: 'Aliens', year: 1986 },\\r\\n  { title: 'Oldboy', year: 2003 },\\r\\n  { title: 'Once Upon a Time in America', year: 1984 },\\r\\n  { title: 'Witness for the Prosecution', year: 1957 },\\r\\n  { title: 'Das Boot', year: 1981 },\\r\\n  { title: 'Citizen Kane', year: 1941 },\\r\\n  { title: 'North by Northwest', year: 1959 },\\r\\n  { title: 'Vertigo', year: 1958 },\\r\\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\\r\\n  { title: 'Reservoir Dogs', year: 1992 },\\r\\n  { title: 'Braveheart', year: 1995 },\\r\\n  { title: 'M', year: 1931 },\\r\\n  { title: 'Requiem for a Dream', year: 2000 },\\r\\n  { title: 'Amélie', year: 2001 },\\r\\n  { title: 'A Clockwork Orange', year: 1971 },\\r\\n  { title: 'Like Stars on Earth', year: 2007 },\\r\\n  { title: 'Taxi Driver', year: 1976 },\\r\\n  { title: 'Lawrence of Arabia', year: 1962 },\\r\\n  { title: 'Double Indemnity', year: 1944 },\\r\\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\\r\\n  { title: 'Amadeus', year: 1984 },\\r\\n  { title: 'To Kill a Mockingbird', year: 1962 },\\r\\n  { title: 'Toy Story 3', year: 2010 },\\r\\n  { title: 'Logan', year: 2017 },\\r\\n  { title: 'Full Metal Jacket', year: 1987 },\\r\\n  { title: 'Dangal', year: 2016 },\\r\\n  { title: 'The Sting', year: 1973 },\\r\\n  { title: '2001: A Space Odyssey', year: 1968 },\\r\\n  { title: \\\"Singin' in the Rain\\\", year: 1952 },\\r\\n  { title: 'Toy Story', year: 1995 },\\r\\n  { title: 'Bicycle Thieves', year: 1948 },\\r\\n  { title: 'The Kid', year: 1921 },\\r\\n  { title: 'Inglourious Basterds', year: 2009 },\\r\\n  { title: 'Snatch', year: 2000 },\\r\\n  { title: '3 Idiots', year: 2009 },\\r\\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\\r\\n];\\r\\n\";","export default \"/* eslint-disable no-use-before-define */\\r\\nimport React from 'react';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\nimport Autocomplete from '@material-ui/lab/Autocomplete';\\r\\n\\r\\nexport default function DisabledOptions() {\\r\\n  return (\\r\\n    <Autocomplete\\r\\n      id=\\\"disabled-options-demo\\\"\\r\\n      options={timeSlots}\\r\\n      getOptionDisabled={option => option === timeSlots[0] || option === timeSlots[2]}\\r\\n      style={{ width: 300 }}\\r\\n      renderInput={params => <TextField {...params} label=\\\"Disabled options\\\" variant=\\\"outlined\\\" />}\\r\\n    />\\r\\n  );\\r\\n}\\r\\n\\r\\n// One time slot every 30 minutes.\\r\\nconst timeSlots = Array.from(new Array(24 * 2)).map(\\r\\n  (_, index) => `${index < 20 ? '0' : ''}${Math.floor(index / 2)}:${index % 2 === 0 ? '00' : '30'}`,\\r\\n);\\r\\n\";","export default \"/* eslint-disable no-use-before-define */\\r\\nimport React from 'react';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\\r\\n\\r\\nconst filterOptions = createFilterOptions({\\r\\n  matchFrom: 'start',\\r\\n  stringify: option => option.title,\\r\\n});\\r\\n\\r\\nexport default function Filter() {\\r\\n  return (\\r\\n    <Autocomplete\\r\\n      id=\\\"filter-demo\\\"\\r\\n      options={top100Films}\\r\\n      getOptionLabel={option => option.title}\\r\\n      filterOptions={filterOptions}\\r\\n      style={{ width: 300 }}\\r\\n      renderInput={params => <TextField {...params} label=\\\"Custom filter\\\" variant=\\\"outlined\\\" />}\\r\\n    />\\r\\n  );\\r\\n}\\r\\n\\r\\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\\r\\nconst top100Films = [\\r\\n  { title: 'The Shawshank Redemption', year: 1994 },\\r\\n  { title: 'The Godfather', year: 1972 },\\r\\n  { title: 'The Godfather: Part II', year: 1974 },\\r\\n  { title: 'The Dark Knight', year: 2008 },\\r\\n  { title: '12 Angry Men', year: 1957 },\\r\\n  { title: \\\"Schindler's List\\\", year: 1993 },\\r\\n  { title: 'Pulp Fiction', year: 1994 },\\r\\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\\r\\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\\r\\n  { title: 'Fight Club', year: 1999 },\\r\\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\\r\\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\\r\\n  { title: 'Forrest Gump', year: 1994 },\\r\\n  { title: 'Inception', year: 2010 },\\r\\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\\r\\n  { title: \\\"One Flew Over the Cuckoo's Nest\\\", year: 1975 },\\r\\n  { title: 'Goodfellas', year: 1990 },\\r\\n  { title: 'The Matrix', year: 1999 },\\r\\n  { title: 'Seven Samurai', year: 1954 },\\r\\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\\r\\n  { title: 'City of God', year: 2002 },\\r\\n  { title: 'Se7en', year: 1995 },\\r\\n  { title: 'The Silence of the Lambs', year: 1991 },\\r\\n  { title: \\\"It's a Wonderful Life\\\", year: 1946 },\\r\\n  { title: 'Life Is Beautiful', year: 1997 },\\r\\n  { title: 'The Usual Suspects', year: 1995 },\\r\\n  { title: 'Léon: The Professional', year: 1994 },\\r\\n  { title: 'Spirited Away', year: 2001 },\\r\\n  { title: 'Saving Private Ryan', year: 1998 },\\r\\n  { title: 'Once Upon a Time in the West', year: 1968 },\\r\\n  { title: 'American History X', year: 1998 },\\r\\n  { title: 'Interstellar', year: 2014 },\\r\\n  { title: 'Casablanca', year: 1942 },\\r\\n  { title: 'City Lights', year: 1931 },\\r\\n  { title: 'Psycho', year: 1960 },\\r\\n  { title: 'The Green Mile', year: 1999 },\\r\\n  { title: 'The Intouchables', year: 2011 },\\r\\n  { title: 'Modern Times', year: 1936 },\\r\\n  { title: 'Raiders of the Lost Ark', year: 1981 },\\r\\n  { title: 'Rear Window', year: 1954 },\\r\\n  { title: 'The Pianist', year: 2002 },\\r\\n  { title: 'The Departed', year: 2006 },\\r\\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\\r\\n  { title: 'Back to the Future', year: 1985 },\\r\\n  { title: 'Whiplash', year: 2014 },\\r\\n  { title: 'Gladiator', year: 2000 },\\r\\n  { title: 'Memento', year: 2000 },\\r\\n  { title: 'The Prestige', year: 2006 },\\r\\n  { title: 'The Lion King', year: 1994 },\\r\\n  { title: 'Apocalypse Now', year: 1979 },\\r\\n  { title: 'Alien', year: 1979 },\\r\\n  { title: 'Sunset Boulevard', year: 1950 },\\r\\n  {\\r\\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\\r\\n    year: 1964,\\r\\n  },\\r\\n  { title: 'The Great Dictator', year: 1940 },\\r\\n  { title: 'Cinema Paradiso', year: 1988 },\\r\\n  { title: 'The Lives of Others', year: 2006 },\\r\\n  { title: 'Grave of the Fireflies', year: 1988 },\\r\\n  { title: 'Paths of Glory', year: 1957 },\\r\\n  { title: 'Django Unchained', year: 2012 },\\r\\n  { title: 'The Shining', year: 1980 },\\r\\n  { title: 'WALL·E', year: 2008 },\\r\\n  { title: 'American Beauty', year: 1999 },\\r\\n  { title: 'The Dark Knight Rises', year: 2012 },\\r\\n  { title: 'Princess Mononoke', year: 1997 },\\r\\n  { title: 'Aliens', year: 1986 },\\r\\n  { title: 'Oldboy', year: 2003 },\\r\\n  { title: 'Once Upon a Time in America', year: 1984 },\\r\\n  { title: 'Witness for the Prosecution', year: 1957 },\\r\\n  { title: 'Das Boot', year: 1981 },\\r\\n  { title: 'Citizen Kane', year: 1941 },\\r\\n  { title: 'North by Northwest', year: 1959 },\\r\\n  { title: 'Vertigo', year: 1958 },\\r\\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\\r\\n  { title: 'Reservoir Dogs', year: 1992 },\\r\\n  { title: 'Braveheart', year: 1995 },\\r\\n  { title: 'M', year: 1931 },\\r\\n  { title: 'Requiem for a Dream', year: 2000 },\\r\\n  { title: 'Amélie', year: 2001 },\\r\\n  { title: 'A Clockwork Orange', year: 1971 },\\r\\n  { title: 'Like Stars on Earth', year: 2007 },\\r\\n  { title: 'Taxi Driver', year: 1976 },\\r\\n  { title: 'Lawrence of Arabia', year: 1962 },\\r\\n  { title: 'Double Indemnity', year: 1944 },\\r\\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\\r\\n  { title: 'Amadeus', year: 1984 },\\r\\n  { title: 'To Kill a Mockingbird', year: 1962 },\\r\\n  { title: 'Toy Story 3', year: 2010 },\\r\\n  { title: 'Logan', year: 2017 },\\r\\n  { title: 'Full Metal Jacket', year: 1987 },\\r\\n  { title: 'Dangal', year: 2016 },\\r\\n  { title: 'The Sting', year: 1973 },\\r\\n  { title: '2001: A Space Odyssey', year: 1968 },\\r\\n  { title: \\\"Singin' in the Rain\\\", year: 1952 },\\r\\n  { title: 'Toy Story', year: 1995 },\\r\\n  { title: 'Bicycle Thieves', year: 1948 },\\r\\n  { title: 'The Kid', year: 1921 },\\r\\n  { title: 'Inglourious Basterds', year: 2009 },\\r\\n  { title: 'Snatch', year: 2000 },\\r\\n  { title: '3 Idiots', year: 2009 },\\r\\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\\r\\n];\\r\\n\";","export default \"/* eslint-disable no-use-before-define */\\r\\nimport React from 'react';\\r\\nimport Chip from '@material-ui/core/Chip';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\nimport Autocomplete from '@material-ui/lab/Autocomplete';\\r\\n\\r\\nexport default function FixedTags() {\\r\\n  const fixedOptions = [top100Films[6]];\\r\\n  const [value, setValue] = React.useState([...fixedOptions, top100Films[13]]);\\r\\n\\r\\n  return (\\r\\n    <Autocomplete\\r\\n      multiple\\r\\n      id=\\\"fixed-tags-demo\\\"\\r\\n      value={value}\\r\\n      onChange={(event, newValue) => {\\r\\n        setValue([...fixedOptions, ...newValue.filter(option => fixedOptions.indexOf(option) === -1)]);\\r\\n      }}\\r\\n      options={top100Films}\\r\\n      getOptionLabel={option => option.title}\\r\\n      renderTags={(tagValue, getTagProps) =>\\r\\n        tagValue.map((option, index) => (\\r\\n          <Chip label={option.title} {...getTagProps({ index })} disabled={fixedOptions.indexOf(option) !== -1} />\\r\\n        ))\\r\\n      }\\r\\n      style={{ width: 500 }}\\r\\n      renderInput={params => <TextField {...params} label=\\\"Fixed tag\\\" variant=\\\"outlined\\\" placeholder=\\\"Favorites\\\" />}\\r\\n    />\\r\\n  );\\r\\n}\\r\\n\\r\\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\\r\\nconst top100Films = [\\r\\n  { title: 'The Shawshank Redemption', year: 1994 },\\r\\n  { title: 'The Godfather', year: 1972 },\\r\\n  { title: 'The Godfather: Part II', year: 1974 },\\r\\n  { title: 'The Dark Knight', year: 2008 },\\r\\n  { title: '12 Angry Men', year: 1957 },\\r\\n  { title: \\\"Schindler's List\\\", year: 1993 },\\r\\n  { title: 'Pulp Fiction', year: 1994 },\\r\\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\\r\\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\\r\\n  { title: 'Fight Club', year: 1999 },\\r\\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\\r\\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\\r\\n  { title: 'Forrest Gump', year: 1994 },\\r\\n  { title: 'Inception', year: 2010 },\\r\\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\\r\\n  { title: \\\"One Flew Over the Cuckoo's Nest\\\", year: 1975 },\\r\\n  { title: 'Goodfellas', year: 1990 },\\r\\n  { title: 'The Matrix', year: 1999 },\\r\\n  { title: 'Seven Samurai', year: 1954 },\\r\\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\\r\\n  { title: 'City of God', year: 2002 },\\r\\n  { title: 'Se7en', year: 1995 },\\r\\n  { title: 'The Silence of the Lambs', year: 1991 },\\r\\n  { title: \\\"It's a Wonderful Life\\\", year: 1946 },\\r\\n  { title: 'Life Is Beautiful', year: 1997 },\\r\\n  { title: 'The Usual Suspects', year: 1995 },\\r\\n  { title: 'Léon: The Professional', year: 1994 },\\r\\n  { title: 'Spirited Away', year: 2001 },\\r\\n  { title: 'Saving Private Ryan', year: 1998 },\\r\\n  { title: 'Once Upon a Time in the West', year: 1968 },\\r\\n  { title: 'American History X', year: 1998 },\\r\\n  { title: 'Interstellar', year: 2014 },\\r\\n  { title: 'Casablanca', year: 1942 },\\r\\n  { title: 'City Lights', year: 1931 },\\r\\n  { title: 'Psycho', year: 1960 },\\r\\n  { title: 'The Green Mile', year: 1999 },\\r\\n  { title: 'The Intouchables', year: 2011 },\\r\\n  { title: 'Modern Times', year: 1936 },\\r\\n  { title: 'Raiders of the Lost Ark', year: 1981 },\\r\\n  { title: 'Rear Window', year: 1954 },\\r\\n  { title: 'The Pianist', year: 2002 },\\r\\n  { title: 'The Departed', year: 2006 },\\r\\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\\r\\n  { title: 'Back to the Future', year: 1985 },\\r\\n  { title: 'Whiplash', year: 2014 },\\r\\n  { title: 'Gladiator', year: 2000 },\\r\\n  { title: 'Memento', year: 2000 },\\r\\n  { title: 'The Prestige', year: 2006 },\\r\\n  { title: 'The Lion King', year: 1994 },\\r\\n  { title: 'Apocalypse Now', year: 1979 },\\r\\n  { title: 'Alien', year: 1979 },\\r\\n  { title: 'Sunset Boulevard', year: 1950 },\\r\\n  {\\r\\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\\r\\n    year: 1964,\\r\\n  },\\r\\n  { title: 'The Great Dictator', year: 1940 },\\r\\n  { title: 'Cinema Paradiso', year: 1988 },\\r\\n  { title: 'The Lives of Others', year: 2006 },\\r\\n  { title: 'Grave of the Fireflies', year: 1988 },\\r\\n  { title: 'Paths of Glory', year: 1957 },\\r\\n  { title: 'Django Unchained', year: 2012 },\\r\\n  { title: 'The Shining', year: 1980 },\\r\\n  { title: 'WALL·E', year: 2008 },\\r\\n  { title: 'American Beauty', year: 1999 },\\r\\n  { title: 'The Dark Knight Rises', year: 2012 },\\r\\n  { title: 'Princess Mononoke', year: 1997 },\\r\\n  { title: 'Aliens', year: 1986 },\\r\\n  { title: 'Oldboy', year: 2003 },\\r\\n  { title: 'Once Upon a Time in America', year: 1984 },\\r\\n  { title: 'Witness for the Prosecution', year: 1957 },\\r\\n  { title: 'Das Boot', year: 1981 },\\r\\n  { title: 'Citizen Kane', year: 1941 },\\r\\n  { title: 'North by Northwest', year: 1959 },\\r\\n  { title: 'Vertigo', year: 1958 },\\r\\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\\r\\n  { title: 'Reservoir Dogs', year: 1992 },\\r\\n  { title: 'Braveheart', year: 1995 },\\r\\n  { title: 'M', year: 1931 },\\r\\n  { title: 'Requiem for a Dream', year: 2000 },\\r\\n  { title: 'Amélie', year: 2001 },\\r\\n  { title: 'A Clockwork Orange', year: 1971 },\\r\\n  { title: 'Like Stars on Earth', year: 2007 },\\r\\n  { title: 'Taxi Driver', year: 1976 },\\r\\n  { title: 'Lawrence of Arabia', year: 1962 },\\r\\n  { title: 'Double Indemnity', year: 1944 },\\r\\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\\r\\n  { title: 'Amadeus', year: 1984 },\\r\\n  { title: 'To Kill a Mockingbird', year: 1962 },\\r\\n  { title: 'Toy Story 3', year: 2010 },\\r\\n  { title: 'Logan', year: 2017 },\\r\\n  { title: 'Full Metal Jacket', year: 1987 },\\r\\n  { title: 'Dangal', year: 2016 },\\r\\n  { title: 'The Sting', year: 1973 },\\r\\n  { title: '2001: A Space Odyssey', year: 1968 },\\r\\n  { title: \\\"Singin' in the Rain\\\", year: 1952 },\\r\\n  { title: 'Toy Story', year: 1995 },\\r\\n  { title: 'Bicycle Thieves', year: 1948 },\\r\\n  { title: 'The Kid', year: 1921 },\\r\\n  { title: 'Inglourious Basterds', year: 2009 },\\r\\n  { title: 'Snatch', year: 2000 },\\r\\n  { title: '3 Idiots', year: 2009 },\\r\\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\\r\\n];\\r\\n\";","export default \"/* eslint-disable no-use-before-define */\\r\\nimport React from 'react';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\nimport Autocomplete from '@material-ui/lab/Autocomplete';\\r\\n\\r\\nexport default function FreeSolo() {\\r\\n  return (\\r\\n    <div style={{ width: 300 }}>\\r\\n      <Autocomplete\\r\\n        id=\\\"free-solo-demo\\\"\\r\\n        freeSolo\\r\\n        options={top100Films.map(option => option.title)}\\r\\n        renderInput={params => <TextField {...params} label=\\\"freeSolo\\\" margin=\\\"normal\\\" variant=\\\"outlined\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        freeSolo\\r\\n        id=\\\"free-solo-2-demo\\\"\\r\\n        disableClearable\\r\\n        options={top100Films.map(option => option.title)}\\r\\n        renderInput={params => (\\r\\n          <TextField\\r\\n            {...params}\\r\\n            label=\\\"Search input\\\"\\r\\n            margin=\\\"normal\\\"\\r\\n            variant=\\\"outlined\\\"\\r\\n            InputProps={{ ...params.InputProps, type: 'search' }}\\r\\n          />\\r\\n        )}\\r\\n      />\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\\r\\nconst top100Films = [\\r\\n  { title: 'The Shawshank Redemption', year: 1994 },\\r\\n  { title: 'The Godfather', year: 1972 },\\r\\n  { title: 'The Godfather: Part II', year: 1974 },\\r\\n  { title: 'The Dark Knight', year: 2008 },\\r\\n  { title: '12 Angry Men', year: 1957 },\\r\\n  { title: \\\"Schindler's List\\\", year: 1993 },\\r\\n  { title: 'Pulp Fiction', year: 1994 },\\r\\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\\r\\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\\r\\n  { title: 'Fight Club', year: 1999 },\\r\\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\\r\\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\\r\\n  { title: 'Forrest Gump', year: 1994 },\\r\\n  { title: 'Inception', year: 2010 },\\r\\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\\r\\n  { title: \\\"One Flew Over the Cuckoo's Nest\\\", year: 1975 },\\r\\n  { title: 'Goodfellas', year: 1990 },\\r\\n  { title: 'The Matrix', year: 1999 },\\r\\n  { title: 'Seven Samurai', year: 1954 },\\r\\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\\r\\n  { title: 'City of God', year: 2002 },\\r\\n  { title: 'Se7en', year: 1995 },\\r\\n  { title: 'The Silence of the Lambs', year: 1991 },\\r\\n  { title: \\\"It's a Wonderful Life\\\", year: 1946 },\\r\\n  { title: 'Life Is Beautiful', year: 1997 },\\r\\n  { title: 'The Usual Suspects', year: 1995 },\\r\\n  { title: 'Léon: The Professional', year: 1994 },\\r\\n  { title: 'Spirited Away', year: 2001 },\\r\\n  { title: 'Saving Private Ryan', year: 1998 },\\r\\n  { title: 'Once Upon a Time in the West', year: 1968 },\\r\\n  { title: 'American History X', year: 1998 },\\r\\n  { title: 'Interstellar', year: 2014 },\\r\\n  { title: 'Casablanca', year: 1942 },\\r\\n  { title: 'City Lights', year: 1931 },\\r\\n  { title: 'Psycho', year: 1960 },\\r\\n  { title: 'The Green Mile', year: 1999 },\\r\\n  { title: 'The Intouchables', year: 2011 },\\r\\n  { title: 'Modern Times', year: 1936 },\\r\\n  { title: 'Raiders of the Lost Ark', year: 1981 },\\r\\n  { title: 'Rear Window', year: 1954 },\\r\\n  { title: 'The Pianist', year: 2002 },\\r\\n  { title: 'The Departed', year: 2006 },\\r\\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\\r\\n  { title: 'Back to the Future', year: 1985 },\\r\\n  { title: 'Whiplash', year: 2014 },\\r\\n  { title: 'Gladiator', year: 2000 },\\r\\n  { title: 'Memento', year: 2000 },\\r\\n  { title: 'The Prestige', year: 2006 },\\r\\n  { title: 'The Lion King', year: 1994 },\\r\\n  { title: 'Apocalypse Now', year: 1979 },\\r\\n  { title: 'Alien', year: 1979 },\\r\\n  { title: 'Sunset Boulevard', year: 1950 },\\r\\n  {\\r\\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\\r\\n    year: 1964,\\r\\n  },\\r\\n  { title: 'The Great Dictator', year: 1940 },\\r\\n  { title: 'Cinema Paradiso', year: 1988 },\\r\\n  { title: 'The Lives of Others', year: 2006 },\\r\\n  { title: 'Grave of the Fireflies', year: 1988 },\\r\\n  { title: 'Paths of Glory', year: 1957 },\\r\\n  { title: 'Django Unchained', year: 2012 },\\r\\n  { title: 'The Shining', year: 1980 },\\r\\n  { title: 'WALL·E', year: 2008 },\\r\\n  { title: 'American Beauty', year: 1999 },\\r\\n  { title: 'The Dark Knight Rises', year: 2012 },\\r\\n  { title: 'Princess Mononoke', year: 1997 },\\r\\n  { title: 'Aliens', year: 1986 },\\r\\n  { title: 'Oldboy', year: 2003 },\\r\\n  { title: 'Once Upon a Time in America', year: 1984 },\\r\\n  { title: 'Witness for the Prosecution', year: 1957 },\\r\\n  { title: 'Das Boot', year: 1981 },\\r\\n  { title: 'Citizen Kane', year: 1941 },\\r\\n  { title: 'North by Northwest', year: 1959 },\\r\\n  { title: 'Vertigo', year: 1958 },\\r\\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\\r\\n  { title: 'Reservoir Dogs', year: 1992 },\\r\\n  { title: 'Braveheart', year: 1995 },\\r\\n  { title: 'M', year: 1931 },\\r\\n  { title: 'Requiem for a Dream', year: 2000 },\\r\\n  { title: 'Amélie', year: 2001 },\\r\\n  { title: 'A Clockwork Orange', year: 1971 },\\r\\n  { title: 'Like Stars on Earth', year: 2007 },\\r\\n  { title: 'Taxi Driver', year: 1976 },\\r\\n  { title: 'Lawrence of Arabia', year: 1962 },\\r\\n  { title: 'Double Indemnity', year: 1944 },\\r\\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\\r\\n  { title: 'Amadeus', year: 1984 },\\r\\n  { title: 'To Kill a Mockingbird', year: 1962 },\\r\\n  { title: 'Toy Story 3', year: 2010 },\\r\\n  { title: 'Logan', year: 2017 },\\r\\n  { title: 'Full Metal Jacket', year: 1987 },\\r\\n  { title: 'Dangal', year: 2016 },\\r\\n  { title: 'The Sting', year: 1973 },\\r\\n  { title: '2001: A Space Odyssey', year: 1968 },\\r\\n  { title: \\\"Singin' in the Rain\\\", year: 1952 },\\r\\n  { title: 'Toy Story', year: 1995 },\\r\\n  { title: 'Bicycle Thieves', year: 1948 },\\r\\n  { title: 'The Kid', year: 1921 },\\r\\n  { title: 'Inglourious Basterds', year: 2009 },\\r\\n  { title: 'Snatch', year: 2000 },\\r\\n  { title: '3 Idiots', year: 2009 },\\r\\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\\r\\n];\\r\\n\";","export default \"/* eslint-disable no-use-before-define */\\r\\nimport React from 'react';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\\r\\n\\r\\nconst filter = createFilterOptions();\\r\\n\\r\\nexport default function FreeSoloCreateOption() {\\r\\n  const [value, setValue] = React.useState(null);\\r\\n\\r\\n  return (\\r\\n    <Autocomplete\\r\\n      value={value}\\r\\n      onChange={(event, newValue) => {\\r\\n        if (typeof newValue === 'string') {\\r\\n          setValue({\\r\\n            title: newValue,\\r\\n          });\\r\\n        } else if (newValue && newValue.inputValue) {\\r\\n          // Create a new value from the user input\\r\\n          setValue({\\r\\n            title: newValue.inputValue,\\r\\n          });\\r\\n        } else {\\r\\n          setValue(newValue);\\r\\n        }\\r\\n      }}\\r\\n      filterOptions={(options, params) => {\\r\\n        const filtered = filter(options, params);\\r\\n\\r\\n        // Suggest the creation of a new value\\r\\n        if (params.inputValue !== '') {\\r\\n          filtered.push({\\r\\n            inputValue: params.inputValue,\\r\\n            title: `Add \\\"${params.inputValue}\\\"`,\\r\\n          });\\r\\n        }\\r\\n\\r\\n        return filtered;\\r\\n      }}\\r\\n      selectOnFocus\\r\\n      clearOnBlur\\r\\n      handleHomeEndKeys\\r\\n      id=\\\"free-solo-with-text-demo\\\"\\r\\n      options={top100Films}\\r\\n      getOptionLabel={option => {\\r\\n        // Value selected with enter, right from the input\\r\\n        if (typeof option === 'string') {\\r\\n          return option;\\r\\n        }\\r\\n        // Add \\\"xxx\\\" option created dynamically\\r\\n        if (option.inputValue) {\\r\\n          return option.inputValue;\\r\\n        }\\r\\n        // Regular option\\r\\n        return option.title;\\r\\n      }}\\r\\n      renderOption={option => option.title}\\r\\n      style={{ width: 300 }}\\r\\n      freeSolo\\r\\n      renderInput={params => <TextField {...params} label=\\\"Free solo with text demo\\\" variant=\\\"outlined\\\" />}\\r\\n    />\\r\\n  );\\r\\n}\\r\\n\\r\\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\\r\\nconst top100Films = [\\r\\n  { title: 'The Shawshank Redemption', year: 1994 },\\r\\n  { title: 'The Godfather', year: 1972 },\\r\\n  { title: 'The Godfather: Part II', year: 1974 },\\r\\n  { title: 'The Dark Knight', year: 2008 },\\r\\n  { title: '12 Angry Men', year: 1957 },\\r\\n  { title: \\\"Schindler's List\\\", year: 1993 },\\r\\n  { title: 'Pulp Fiction', year: 1994 },\\r\\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\\r\\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\\r\\n  { title: 'Fight Club', year: 1999 },\\r\\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\\r\\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\\r\\n  { title: 'Forrest Gump', year: 1994 },\\r\\n  { title: 'Inception', year: 2010 },\\r\\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\\r\\n  { title: \\\"One Flew Over the Cuckoo's Nest\\\", year: 1975 },\\r\\n  { title: 'Goodfellas', year: 1990 },\\r\\n  { title: 'The Matrix', year: 1999 },\\r\\n  { title: 'Seven Samurai', year: 1954 },\\r\\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\\r\\n  { title: 'City of God', year: 2002 },\\r\\n  { title: 'Se7en', year: 1995 },\\r\\n  { title: 'The Silence of the Lambs', year: 1991 },\\r\\n  { title: \\\"It's a Wonderful Life\\\", year: 1946 },\\r\\n  { title: 'Life Is Beautiful', year: 1997 },\\r\\n  { title: 'The Usual Suspects', year: 1995 },\\r\\n  { title: 'Léon: The Professional', year: 1994 },\\r\\n  { title: 'Spirited Away', year: 2001 },\\r\\n  { title: 'Saving Private Ryan', year: 1998 },\\r\\n  { title: 'Once Upon a Time in the West', year: 1968 },\\r\\n  { title: 'American History X', year: 1998 },\\r\\n  { title: 'Interstellar', year: 2014 },\\r\\n  { title: 'Casablanca', year: 1942 },\\r\\n  { title: 'City Lights', year: 1931 },\\r\\n  { title: 'Psycho', year: 1960 },\\r\\n  { title: 'The Green Mile', year: 1999 },\\r\\n  { title: 'The Intouchables', year: 2011 },\\r\\n  { title: 'Modern Times', year: 1936 },\\r\\n  { title: 'Raiders of the Lost Ark', year: 1981 },\\r\\n  { title: 'Rear Window', year: 1954 },\\r\\n  { title: 'The Pianist', year: 2002 },\\r\\n  { title: 'The Departed', year: 2006 },\\r\\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\\r\\n  { title: 'Back to the Future', year: 1985 },\\r\\n  { title: 'Whiplash', year: 2014 },\\r\\n  { title: 'Gladiator', year: 2000 },\\r\\n  { title: 'Memento', year: 2000 },\\r\\n  { title: 'The Prestige', year: 2006 },\\r\\n  { title: 'The Lion King', year: 1994 },\\r\\n  { title: 'Apocalypse Now', year: 1979 },\\r\\n  { title: 'Alien', year: 1979 },\\r\\n  { title: 'Sunset Boulevard', year: 1950 },\\r\\n  {\\r\\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\\r\\n    year: 1964,\\r\\n  },\\r\\n  { title: 'The Great Dictator', year: 1940 },\\r\\n  { title: 'Cinema Paradiso', year: 1988 },\\r\\n  { title: 'The Lives of Others', year: 2006 },\\r\\n  { title: 'Grave of the Fireflies', year: 1988 },\\r\\n  { title: 'Paths of Glory', year: 1957 },\\r\\n  { title: 'Django Unchained', year: 2012 },\\r\\n  { title: 'The Shining', year: 1980 },\\r\\n  { title: 'WALL·E', year: 2008 },\\r\\n  { title: 'American Beauty', year: 1999 },\\r\\n  { title: 'The Dark Knight Rises', year: 2012 },\\r\\n  { title: 'Princess Mononoke', year: 1997 },\\r\\n  { title: 'Aliens', year: 1986 },\\r\\n  { title: 'Oldboy', year: 2003 },\\r\\n  { title: 'Once Upon a Time in America', year: 1984 },\\r\\n  { title: 'Witness for the Prosecution', year: 1957 },\\r\\n  { title: 'Das Boot', year: 1981 },\\r\\n  { title: 'Citizen Kane', year: 1941 },\\r\\n  { title: 'North by Northwest', year: 1959 },\\r\\n  { title: 'Vertigo', year: 1958 },\\r\\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\\r\\n  { title: 'Reservoir Dogs', year: 1992 },\\r\\n  { title: 'Braveheart', year: 1995 },\\r\\n  { title: 'M', year: 1931 },\\r\\n  { title: 'Requiem for a Dream', year: 2000 },\\r\\n  { title: 'Amélie', year: 2001 },\\r\\n  { title: 'A Clockwork Orange', year: 1971 },\\r\\n  { title: 'Like Stars on Earth', year: 2007 },\\r\\n  { title: 'Taxi Driver', year: 1976 },\\r\\n  { title: 'Lawrence of Arabia', year: 1962 },\\r\\n  { title: 'Double Indemnity', year: 1944 },\\r\\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\\r\\n  { title: 'Amadeus', year: 1984 },\\r\\n  { title: 'To Kill a Mockingbird', year: 1962 },\\r\\n  { title: 'Toy Story 3', year: 2010 },\\r\\n  { title: 'Logan', year: 2017 },\\r\\n  { title: 'Full Metal Jacket', year: 1987 },\\r\\n  { title: 'Dangal', year: 2016 },\\r\\n  { title: 'The Sting', year: 1973 },\\r\\n  { title: '2001: A Space Odyssey', year: 1968 },\\r\\n  { title: \\\"Singin' in the Rain\\\", year: 1952 },\\r\\n  { title: 'Toy Story', year: 1995 },\\r\\n  { title: 'Bicycle Thieves', year: 1948 },\\r\\n  { title: 'The Kid', year: 1921 },\\r\\n  { title: 'Inglourious Basterds', year: 2009 },\\r\\n  { title: 'Snatch', year: 2000 },\\r\\n  { title: '3 Idiots', year: 2009 },\\r\\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\\r\\n];\\r\\n\";","export default \"/* eslint-disable no-use-before-define */\\r\\nimport React from 'react';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\nimport Dialog from '@material-ui/core/Dialog';\\r\\nimport DialogTitle from '@material-ui/core/DialogTitle';\\r\\nimport DialogContent from '@material-ui/core/DialogContent';\\r\\nimport DialogContentText from '@material-ui/core/DialogContentText';\\r\\nimport DialogActions from '@material-ui/core/DialogActions';\\r\\nimport Button from '@material-ui/core/Button';\\r\\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\\r\\n\\r\\nconst filter = createFilterOptions();\\r\\n\\r\\nexport default function FreeSoloCreateOptionDialog() {\\r\\n  const [value, setValue] = React.useState(null);\\r\\n  const [open, toggleOpen] = React.useState(false);\\r\\n\\r\\n  const handleClose = () => {\\r\\n    setDialogValue({\\r\\n      title: '',\\r\\n      year: '',\\r\\n    });\\r\\n\\r\\n    toggleOpen(false);\\r\\n  };\\r\\n\\r\\n  const [dialogValue, setDialogValue] = React.useState({\\r\\n    title: '',\\r\\n    year: '',\\r\\n  });\\r\\n\\r\\n  const handleSubmit = event => {\\r\\n    event.preventDefault();\\r\\n    setValue({\\r\\n      title: dialogValue.title,\\r\\n      year: parseInt(dialogValue.year, 10),\\r\\n    });\\r\\n\\r\\n    handleClose();\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <React.Fragment>\\r\\n      <Autocomplete\\r\\n        value={value}\\r\\n        onChange={(event, newValue) => {\\r\\n          if (typeof newValue === 'string') {\\r\\n            // timeout to avoid instant validation of the dialog's form.\\r\\n            setTimeout(() => {\\r\\n              toggleOpen(true);\\r\\n              setDialogValue({\\r\\n                title: newValue,\\r\\n                year: '',\\r\\n              });\\r\\n            });\\r\\n          } else if (newValue && newValue.inputValue) {\\r\\n            toggleOpen(true);\\r\\n            setDialogValue({\\r\\n              title: newValue.inputValue,\\r\\n              year: '',\\r\\n            });\\r\\n          } else {\\r\\n            setValue(newValue);\\r\\n          }\\r\\n        }}\\r\\n        filterOptions={(options, params) => {\\r\\n          const filtered = filter(options, params);\\r\\n\\r\\n          if (params.inputValue !== '') {\\r\\n            filtered.push({\\r\\n              inputValue: params.inputValue,\\r\\n              title: `Add \\\"${params.inputValue}\\\"`,\\r\\n            });\\r\\n          }\\r\\n\\r\\n          return filtered;\\r\\n        }}\\r\\n        id=\\\"free-solo-dialog-demo\\\"\\r\\n        options={top100Films}\\r\\n        getOptionLabel={option => {\\r\\n          // e.g value selected with enter, right from the input\\r\\n          if (typeof option === 'string') {\\r\\n            return option;\\r\\n          }\\r\\n          if (option.inputValue) {\\r\\n            return option.inputValue;\\r\\n          }\\r\\n          return option.title;\\r\\n        }}\\r\\n        selectOnFocus\\r\\n        clearOnBlur\\r\\n        handleHomeEndKeys\\r\\n        renderOption={option => option.title}\\r\\n        style={{ width: 300 }}\\r\\n        freeSolo\\r\\n        renderInput={params => <TextField {...params} label=\\\"Free solo dialog\\\" variant=\\\"outlined\\\" />}\\r\\n      />\\r\\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\\\"form-dialog-title\\\">\\r\\n        <form onSubmit={handleSubmit}>\\r\\n          <DialogTitle id=\\\"form-dialog-title\\\">Add a new film</DialogTitle>\\r\\n          <DialogContent>\\r\\n            <DialogContentText>Did you miss any film in our list? Please, add it!</DialogContentText>\\r\\n            <TextField\\r\\n              autoFocus\\r\\n              margin=\\\"dense\\\"\\r\\n              id=\\\"name\\\"\\r\\n              value={dialogValue.title}\\r\\n              onChange={event => setDialogValue({ ...dialogValue, title: event.target.value })}\\r\\n              label=\\\"title\\\"\\r\\n              type=\\\"text\\\"\\r\\n            />\\r\\n            <TextField\\r\\n              margin=\\\"dense\\\"\\r\\n              id=\\\"name\\\"\\r\\n              value={dialogValue.year}\\r\\n              onChange={event => setDialogValue({ ...dialogValue, year: event.target.value })}\\r\\n              label=\\\"year\\\"\\r\\n              type=\\\"number\\\"\\r\\n            />\\r\\n          </DialogContent>\\r\\n          <DialogActions>\\r\\n            <Button onClick={handleClose} color=\\\"primary\\\">\\r\\n              Cancel\\r\\n            </Button>\\r\\n            <Button type=\\\"submit\\\" color=\\\"primary\\\">\\r\\n              Add\\r\\n            </Button>\\r\\n          </DialogActions>\\r\\n        </form>\\r\\n      </Dialog>\\r\\n    </React.Fragment>\\r\\n  );\\r\\n}\\r\\n\\r\\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\\r\\nconst top100Films = [\\r\\n  { title: 'The Shawshank Redemption', year: 1994 },\\r\\n  { title: 'The Godfather', year: 1972 },\\r\\n  { title: 'The Godfather: Part II', year: 1974 },\\r\\n  { title: 'The Dark Knight', year: 2008 },\\r\\n  { title: '12 Angry Men', year: 1957 },\\r\\n  { title: \\\"Schindler's List\\\", year: 1993 },\\r\\n  { title: 'Pulp Fiction', year: 1994 },\\r\\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\\r\\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\\r\\n  { title: 'Fight Club', year: 1999 },\\r\\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\\r\\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\\r\\n  { title: 'Forrest Gump', year: 1994 },\\r\\n  { title: 'Inception', year: 2010 },\\r\\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\\r\\n  { title: \\\"One Flew Over the Cuckoo's Nest\\\", year: 1975 },\\r\\n  { title: 'Goodfellas', year: 1990 },\\r\\n  { title: 'The Matrix', year: 1999 },\\r\\n  { title: 'Seven Samurai', year: 1954 },\\r\\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\\r\\n  { title: 'City of God', year: 2002 },\\r\\n  { title: 'Se7en', year: 1995 },\\r\\n  { title: 'The Silence of the Lambs', year: 1991 },\\r\\n  { title: \\\"It's a Wonderful Life\\\", year: 1946 },\\r\\n  { title: 'Life Is Beautiful', year: 1997 },\\r\\n  { title: 'The Usual Suspects', year: 1995 },\\r\\n  { title: 'Léon: The Professional', year: 1994 },\\r\\n  { title: 'Spirited Away', year: 2001 },\\r\\n  { title: 'Saving Private Ryan', year: 1998 },\\r\\n  { title: 'Once Upon a Time in the West', year: 1968 },\\r\\n  { title: 'American History X', year: 1998 },\\r\\n  { title: 'Interstellar', year: 2014 },\\r\\n  { title: 'Casablanca', year: 1942 },\\r\\n  { title: 'City Lights', year: 1931 },\\r\\n  { title: 'Psycho', year: 1960 },\\r\\n  { title: 'The Green Mile', year: 1999 },\\r\\n  { title: 'The Intouchables', year: 2011 },\\r\\n  { title: 'Modern Times', year: 1936 },\\r\\n  { title: 'Raiders of the Lost Ark', year: 1981 },\\r\\n  { title: 'Rear Window', year: 1954 },\\r\\n  { title: 'The Pianist', year: 2002 },\\r\\n  { title: 'The Departed', year: 2006 },\\r\\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\\r\\n  { title: 'Back to the Future', year: 1985 },\\r\\n  { title: 'Whiplash', year: 2014 },\\r\\n  { title: 'Gladiator', year: 2000 },\\r\\n  { title: 'Memento', year: 2000 },\\r\\n  { title: 'The Prestige', year: 2006 },\\r\\n  { title: 'The Lion King', year: 1994 },\\r\\n  { title: 'Apocalypse Now', year: 1979 },\\r\\n  { title: 'Alien', year: 1979 },\\r\\n  { title: 'Sunset Boulevard', year: 1950 },\\r\\n  {\\r\\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\\r\\n    year: 1964,\\r\\n  },\\r\\n  { title: 'The Great Dictator', year: 1940 },\\r\\n  { title: 'Cinema Paradiso', year: 1988 },\\r\\n  { title: 'The Lives of Others', year: 2006 },\\r\\n  { title: 'Grave of the Fireflies', year: 1988 },\\r\\n  { title: 'Paths of Glory', year: 1957 },\\r\\n  { title: 'Django Unchained', year: 2012 },\\r\\n  { title: 'The Shining', year: 1980 },\\r\\n  { title: 'WALL·E', year: 2008 },\\r\\n  { title: 'American Beauty', year: 1999 },\\r\\n  { title: 'The Dark Knight Rises', year: 2012 },\\r\\n  { title: 'Princess Mononoke', year: 1997 },\\r\\n  { title: 'Aliens', year: 1986 },\\r\\n  { title: 'Oldboy', year: 2003 },\\r\\n  { title: 'Once Upon a Time in America', year: 1984 },\\r\\n  { title: 'Witness for the Prosecution', year: 1957 },\\r\\n  { title: 'Das Boot', year: 1981 },\\r\\n  { title: 'Citizen Kane', year: 1941 },\\r\\n  { title: 'North by Northwest', year: 1959 },\\r\\n  { title: 'Vertigo', year: 1958 },\\r\\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\\r\\n  { title: 'Reservoir Dogs', year: 1992 },\\r\\n  { title: 'Braveheart', year: 1995 },\\r\\n  { title: 'M', year: 1931 },\\r\\n  { title: 'Requiem for a Dream', year: 2000 },\\r\\n  { title: 'Amélie', year: 2001 },\\r\\n  { title: 'A Clockwork Orange', year: 1971 },\\r\\n  { title: 'Like Stars on Earth', year: 2007 },\\r\\n  { title: 'Taxi Driver', year: 1976 },\\r\\n  { title: 'Lawrence of Arabia', year: 1962 },\\r\\n  { title: 'Double Indemnity', year: 1944 },\\r\\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\\r\\n  { title: 'Amadeus', year: 1984 },\\r\\n  { title: 'To Kill a Mockingbird', year: 1962 },\\r\\n  { title: 'Toy Story 3', year: 2010 },\\r\\n  { title: 'Logan', year: 2017 },\\r\\n  { title: 'Full Metal Jacket', year: 1987 },\\r\\n  { title: 'Dangal', year: 2016 },\\r\\n  { title: 'The Sting', year: 1973 },\\r\\n  { title: '2001: A Space Odyssey', year: 1968 },\\r\\n  { title: \\\"Singin' in the Rain\\\", year: 1952 },\\r\\n  { title: 'Toy Story', year: 1995 },\\r\\n  { title: 'Bicycle Thieves', year: 1948 },\\r\\n  { title: 'The Kid', year: 1921 },\\r\\n  { title: 'Inglourious Basterds', year: 2009 },\\r\\n  { title: 'Snatch', year: 2000 },\\r\\n  { title: '3 Idiots', year: 2009 },\\r\\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\\r\\n];\\r\\n\";","export default \"/* eslint-disable no-use-before-define */\\r\\nimport React from 'react';\\r\\nimport { useTheme, alpha, makeStyles } from '@material-ui/core/styles';\\r\\nimport Popper from '@material-ui/core/Popper';\\r\\nimport SettingsIcon from '@material-ui/icons/Settings';\\r\\nimport CloseIcon from '@material-ui/icons/Close';\\r\\nimport DoneIcon from '@material-ui/icons/Done';\\r\\nimport Autocomplete from '@material-ui/lab/Autocomplete';\\r\\nimport ButtonBase from '@material-ui/core/ButtonBase';\\r\\nimport InputBase from '@material-ui/core/InputBase';\\r\\n\\r\\nconst useStyles = makeStyles(theme => ({\\r\\n  root: {\\r\\n    width: 221,\\r\\n    fontSize: 13,\\r\\n  },\\r\\n  button: {\\r\\n    fontSize: 13,\\r\\n    width: '100%',\\r\\n    textAlign: 'left',\\r\\n    paddingBottom: 8,\\r\\n    color: '#586069',\\r\\n    fontWeight: 600,\\r\\n    '&:hover,&:focus': {\\r\\n      color: '#0366d6',\\r\\n    },\\r\\n    '& span': {\\r\\n      width: '100%',\\r\\n    },\\r\\n    '& svg': {\\r\\n      width: 16,\\r\\n      height: 16,\\r\\n    },\\r\\n  },\\r\\n  tag: {\\r\\n    marginTop: 3,\\r\\n    height: 20,\\r\\n    padding: '.15em 4px',\\r\\n    fontWeight: 600,\\r\\n    lineHeight: '15px',\\r\\n    borderRadius: 2,\\r\\n  },\\r\\n  popper: {\\r\\n    border: '1px solid rgba(27,31,35,.15)',\\r\\n    boxShadow: '0 3px 12px rgba(27,31,35,.15)',\\r\\n    borderRadius: 3,\\r\\n    width: 300,\\r\\n    zIndex: 1,\\r\\n    fontSize: 13,\\r\\n    color: '#586069',\\r\\n    backgroundColor: '#f6f8fa',\\r\\n  },\\r\\n  header: {\\r\\n    borderBottom: '1px solid #e1e4e8',\\r\\n    padding: '8px 10px',\\r\\n    fontWeight: 600,\\r\\n  },\\r\\n  inputBase: {\\r\\n    padding: 10,\\r\\n    width: '100%',\\r\\n    borderBottom: '1px solid #dfe2e5',\\r\\n    '& input': {\\r\\n      borderRadius: 4,\\r\\n      backgroundColor: theme.palette.background.paper,\\r\\n      padding: 8,\\r\\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\\r\\n      border: '1px solid #ced4da',\\r\\n      fontSize: 14,\\r\\n      '&:focus': {\\r\\n        boxShadow: `${alpha(theme.palette.primary.main, 0.25)} 0 0 0 0.2rem`,\\r\\n        borderColor: theme.palette.primary.main,\\r\\n      },\\r\\n    },\\r\\n  },\\r\\n  paper: {\\r\\n    boxShadow: 'none',\\r\\n    margin: 0,\\r\\n    color: '#586069',\\r\\n    fontSize: 13,\\r\\n  },\\r\\n  option: {\\r\\n    minHeight: 'auto',\\r\\n    alignItems: 'flex-start',\\r\\n    padding: 8,\\r\\n    '&[aria-selected=\\\"true\\\"]': {\\r\\n      backgroundColor: 'transparent',\\r\\n    },\\r\\n    '&[data-focus=\\\"true\\\"]': {\\r\\n      backgroundColor: theme.palette.action.hover,\\r\\n    },\\r\\n  },\\r\\n  popperDisablePortal: {\\r\\n    position: 'relative',\\r\\n  },\\r\\n  iconSelected: {\\r\\n    width: 17,\\r\\n    height: 17,\\r\\n    marginRight: 5,\\r\\n    marginLeft: -2,\\r\\n  },\\r\\n  color: {\\r\\n    width: 14,\\r\\n    height: 14,\\r\\n    flexShrink: 0,\\r\\n    borderRadius: 3,\\r\\n    marginRight: 8,\\r\\n    marginTop: 2,\\r\\n  },\\r\\n  text: {\\r\\n    flexGrow: 1,\\r\\n  },\\r\\n  close: {\\r\\n    opacity: 0.6,\\r\\n    width: 18,\\r\\n    height: 18,\\r\\n  },\\r\\n}));\\r\\n\\r\\nexport default function GitHubLabel() {\\r\\n  const classes = useStyles();\\r\\n  const [anchorEl, setAnchorEl] = React.useState(null);\\r\\n  const [value, setValue] = React.useState([labels[1], labels[11]]);\\r\\n  const [pendingValue, setPendingValue] = React.useState([]);\\r\\n  const theme = useTheme();\\r\\n\\r\\n  const handleClick = event => {\\r\\n    setPendingValue(value);\\r\\n    setAnchorEl(event.currentTarget);\\r\\n  };\\r\\n\\r\\n  const handleClose = (event, reason) => {\\r\\n    if (reason === 'toggleInput') {\\r\\n      return;\\r\\n    }\\r\\n    setValue(pendingValue);\\r\\n    if (anchorEl) {\\r\\n      anchorEl.focus();\\r\\n    }\\r\\n    setAnchorEl(null);\\r\\n  };\\r\\n\\r\\n  const open = Boolean(anchorEl);\\r\\n  const id = open ? 'github-label' : undefined;\\r\\n\\r\\n  return (\\r\\n    <React.Fragment>\\r\\n      <div className={classes.root}>\\r\\n        <ButtonBase disableRipple className={classes.button} aria-describedby={id} onClick={handleClick}>\\r\\n          <span>Labels</span>\\r\\n          <SettingsIcon />\\r\\n        </ButtonBase>\\r\\n        {value.map(label => (\\r\\n          <div\\r\\n            key={label.name}\\r\\n            className={classes.tag}\\r\\n            style={{\\r\\n              backgroundColor: label.color,\\r\\n              color: theme.palette.getContrastText(label.color),\\r\\n            }}>\\r\\n            {label.name}\\r\\n          </div>\\r\\n        ))}\\r\\n      </div>\\r\\n      <Popper id={id} open={open} anchorEl={anchorEl} placement=\\\"bottom-start\\\" className={classes.popper}>\\r\\n        <div className={classes.header}>Apply labels to this pull request</div>\\r\\n        <Autocomplete\\r\\n          open\\r\\n          onClose={handleClose}\\r\\n          multiple\\r\\n          classes={{\\r\\n            paper: classes.paper,\\r\\n            option: classes.option,\\r\\n            popperDisablePortal: classes.popperDisablePortal,\\r\\n          }}\\r\\n          value={pendingValue}\\r\\n          onChange={(event, newValue) => {\\r\\n            setPendingValue(newValue);\\r\\n          }}\\r\\n          disableCloseOnSelect\\r\\n          disablePortal\\r\\n          renderTags={() => null}\\r\\n          noOptionsText=\\\"No labels\\\"\\r\\n          renderOption={(option, { selected }) => (\\r\\n            <React.Fragment>\\r\\n              <DoneIcon className={classes.iconSelected} style={{ visibility: selected ? 'visible' : 'hidden' }} />\\r\\n              <span className={classes.color} style={{ backgroundColor: option.color }} />\\r\\n              <div className={classes.text}>\\r\\n                {option.name}\\r\\n                <br />\\r\\n                {option.description}\\r\\n              </div>\\r\\n              <CloseIcon className={classes.close} style={{ visibility: selected ? 'visible' : 'hidden' }} />\\r\\n            </React.Fragment>\\r\\n          )}\\r\\n          options={[...labels].sort((a, b) => {\\r\\n            // Display the selected labels first.\\r\\n            let ai = value.indexOf(a);\\r\\n            ai = ai === -1 ? value.length + labels.indexOf(a) : ai;\\r\\n            let bi = value.indexOf(b);\\r\\n            bi = bi === -1 ? value.length + labels.indexOf(b) : bi;\\r\\n            return ai - bi;\\r\\n          })}\\r\\n          getOptionLabel={option => option.name}\\r\\n          renderInput={params => (\\r\\n            <InputBase ref={params.InputProps.ref} inputProps={params.inputProps} autoFocus className={classes.inputBase} />\\r\\n          )}\\r\\n        />\\r\\n      </Popper>\\r\\n    </React.Fragment>\\r\\n  );\\r\\n}\\r\\n\\r\\n// From https://github.com/abdonrd/github-labels\\r\\nconst labels = [\\r\\n  {\\r\\n    name: 'good first issue',\\r\\n    color: '#7057ff',\\r\\n    description: 'Good for newcomers',\\r\\n  },\\r\\n  {\\r\\n    name: 'help wanted',\\r\\n    color: '#008672',\\r\\n    description: 'Extra attention is needed',\\r\\n  },\\r\\n  {\\r\\n    name: 'priority: critical',\\r\\n    color: '#b60205',\\r\\n    description: '',\\r\\n  },\\r\\n  {\\r\\n    name: 'priority: high',\\r\\n    color: '#d93f0b',\\r\\n    description: '',\\r\\n  },\\r\\n  {\\r\\n    name: 'priority: low',\\r\\n    color: '#0e8a16',\\r\\n    description: '',\\r\\n  },\\r\\n  {\\r\\n    name: 'priority: medium',\\r\\n    color: '#fbca04',\\r\\n    description: '',\\r\\n  },\\r\\n  {\\r\\n    name: \\\"status: can't reproduce\\\",\\r\\n    color: '#fec1c1',\\r\\n    description: '',\\r\\n  },\\r\\n  {\\r\\n    name: 'status: confirmed',\\r\\n    color: '#215cea',\\r\\n    description: '',\\r\\n  },\\r\\n  {\\r\\n    name: 'status: duplicate',\\r\\n    color: '#cfd3d7',\\r\\n    description: 'This issue or pull request already exists',\\r\\n  },\\r\\n  {\\r\\n    name: 'status: needs information',\\r\\n    color: '#fef2c0',\\r\\n    description: '',\\r\\n  },\\r\\n  {\\r\\n    name: 'status: wont do/fix',\\r\\n    color: '#eeeeee',\\r\\n    description: 'This will not be worked on',\\r\\n  },\\r\\n  {\\r\\n    name: 'type: bug',\\r\\n    color: '#d73a4a',\\r\\n    description: \\\"Something isn't working\\\",\\r\\n  },\\r\\n  {\\r\\n    name: 'type: discussion',\\r\\n    color: '#d4c5f9',\\r\\n    description: '',\\r\\n  },\\r\\n  {\\r\\n    name: 'type: documentation',\\r\\n    color: '#006b75',\\r\\n    description: '',\\r\\n  },\\r\\n  {\\r\\n    name: 'type: enhancement',\\r\\n    color: '#84b6eb',\\r\\n    description: '',\\r\\n  },\\r\\n  {\\r\\n    name: 'type: epic',\\r\\n    color: '#3e4b9e',\\r\\n    description: 'A theme of work that contain sub-tasks',\\r\\n  },\\r\\n  {\\r\\n    name: 'type: feature request',\\r\\n    color: '#fbca04',\\r\\n    description: 'New feature or request',\\r\\n  },\\r\\n  {\\r\\n    name: 'type: question',\\r\\n    color: '#d876e3',\\r\\n    description: 'Further information is requested',\\r\\n  },\\r\\n];\\r\\n\";","export default \"import React from 'react';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\nimport Autocomplete from '@material-ui/lab/Autocomplete';\\r\\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\\r\\nimport Grid from '@material-ui/core/Grid';\\r\\nimport Typography from '@material-ui/core/Typography';\\r\\nimport { makeStyles } from '@material-ui/core/styles';\\r\\nimport parse from 'autosuggest-highlight/parse';\\r\\nimport throttle from 'lodash/throttle';\\r\\n\\r\\nfunction loadScript(src, position, id) {\\r\\n  if (!position) {\\r\\n    return;\\r\\n  }\\r\\n\\r\\n  const script = document.createElement('script');\\r\\n  script.setAttribute('async', '');\\r\\n  script.setAttribute('id', id);\\r\\n  script.src = src;\\r\\n  position.appendChild(script);\\r\\n}\\r\\n\\r\\nconst autocompleteService = { current: null };\\r\\n\\r\\nconst useStyles = makeStyles(theme => ({\\r\\n  icon: {\\r\\n    color: theme.palette.text.secondary,\\r\\n    marginRight: theme.spacing(2),\\r\\n  },\\r\\n}));\\r\\n\\r\\nexport default function GoogleMaps() {\\r\\n  const classes = useStyles();\\r\\n  const [value, setValue] = React.useState(null);\\r\\n  const [inputValue, setInputValue] = React.useState('');\\r\\n  const [options, setOptions] = React.useState([]);\\r\\n  const loaded = React.useRef(false);\\r\\n\\r\\n  if (typeof window !== 'undefined' && !loaded.current) {\\r\\n    if (!document.querySelector('#google-maps')) {\\r\\n      loadScript(\\r\\n        'https://maps.googleapis.com/maps/api/js?key=AIzaSyBwRp1e12ec1vOTtGiA4fcCt2sCUS78UYc&libraries=places',\\r\\n        document.querySelector('head'),\\r\\n        'google-maps',\\r\\n      );\\r\\n    }\\r\\n\\r\\n    loaded.current = true;\\r\\n  }\\r\\n\\r\\n  const fetch = React.useMemo(\\r\\n    () =>\\r\\n      throttle((request, callback) => {\\r\\n        autocompleteService.current.getPlacePredictions(request, callback);\\r\\n      }, 200),\\r\\n    [],\\r\\n  );\\r\\n\\r\\n  React.useEffect(() => {\\r\\n    let active = true;\\r\\n\\r\\n    if (!autocompleteService.current && window.google) {\\r\\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\\r\\n    }\\r\\n    if (!autocompleteService.current) {\\r\\n      return undefined;\\r\\n    }\\r\\n\\r\\n    if (inputValue === '') {\\r\\n      setOptions(value ? [value] : []);\\r\\n      return undefined;\\r\\n    }\\r\\n\\r\\n    fetch({ input: inputValue }, results => {\\r\\n      if (active) {\\r\\n        let newOptions = [];\\r\\n\\r\\n        if (value) {\\r\\n          newOptions = [value];\\r\\n        }\\r\\n\\r\\n        if (results) {\\r\\n          newOptions = [...newOptions, ...results];\\r\\n        }\\r\\n\\r\\n        setOptions(newOptions);\\r\\n      }\\r\\n    });\\r\\n\\r\\n    return () => {\\r\\n      active = false;\\r\\n    };\\r\\n  }, [value, inputValue, fetch]);\\r\\n\\r\\n  return (\\r\\n    <Autocomplete\\r\\n      id=\\\"google-map-demo\\\"\\r\\n      style={{ width: 300 }}\\r\\n      getOptionLabel={option => (typeof option === 'string' ? option : option.description)}\\r\\n      filterOptions={x => x}\\r\\n      options={options}\\r\\n      autoComplete\\r\\n      includeInputInList\\r\\n      filterSelectedOptions\\r\\n      value={value}\\r\\n      onChange={(event, newValue) => {\\r\\n        setOptions(newValue ? [newValue, ...options] : options);\\r\\n        setValue(newValue);\\r\\n      }}\\r\\n      onInputChange={(event, newInputValue) => {\\r\\n        setInputValue(newInputValue);\\r\\n      }}\\r\\n      renderInput={params => <TextField {...params} label=\\\"Add a location\\\" variant=\\\"outlined\\\" fullWidth />}\\r\\n      renderOption={option => {\\r\\n        const matches = option.structured_formatting.main_text_matched_substrings;\\r\\n        const parts = parse(\\r\\n          option.structured_formatting.main_text,\\r\\n          matches.map(match => [match.offset, match.offset + match.length]),\\r\\n        );\\r\\n\\r\\n        return (\\r\\n          <Grid container alignItems=\\\"center\\\">\\r\\n            <Grid item>\\r\\n              <LocationOnIcon className={classes.icon} />\\r\\n            </Grid>\\r\\n            <Grid item xs>\\r\\n              {parts.map((part, index) => (\\r\\n                <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\\r\\n                  {part.text}\\r\\n                </span>\\r\\n              ))}\\r\\n\\r\\n              <Typography variant=\\\"body2\\\" color=\\\"textSecondary\\\">\\r\\n                {option.structured_formatting.secondary_text}\\r\\n              </Typography>\\r\\n            </Grid>\\r\\n          </Grid>\\r\\n        );\\r\\n      }}\\r\\n    />\\r\\n  );\\r\\n}\\r\\n\";","export default \"/* eslint-disable no-use-before-define */\\r\\nimport React from 'react';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\nimport Autocomplete from '@material-ui/lab/Autocomplete';\\r\\n\\r\\nexport default function Grouped() {\\r\\n  const options = top100Films.map(option => {\\r\\n    const firstLetter = option.title[0].toUpperCase();\\r\\n    return {\\r\\n      firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter,\\r\\n      ...option,\\r\\n    };\\r\\n  });\\r\\n\\r\\n  return (\\r\\n    <Autocomplete\\r\\n      id=\\\"grouped-demo\\\"\\r\\n      options={options.sort((a, b) => -b.firstLetter.localeCompare(a.firstLetter))}\\r\\n      groupBy={option => option.firstLetter}\\r\\n      getOptionLabel={option => option.title}\\r\\n      style={{ width: 300 }}\\r\\n      renderInput={params => <TextField {...params} label=\\\"With categories\\\" variant=\\\"outlined\\\" />}\\r\\n    />\\r\\n  );\\r\\n}\\r\\n\\r\\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\\r\\nconst top100Films = [\\r\\n  { title: 'The Shawshank Redemption', year: 1994 },\\r\\n  { title: 'The Godfather', year: 1972 },\\r\\n  { title: 'The Godfather: Part II', year: 1974 },\\r\\n  { title: 'The Dark Knight', year: 2008 },\\r\\n  { title: '12 Angry Men', year: 1957 },\\r\\n  { title: \\\"Schindler's List\\\", year: 1993 },\\r\\n  { title: 'Pulp Fiction', year: 1994 },\\r\\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\\r\\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\\r\\n  { title: 'Fight Club', year: 1999 },\\r\\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\\r\\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\\r\\n  { title: 'Forrest Gump', year: 1994 },\\r\\n  { title: 'Inception', year: 2010 },\\r\\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\\r\\n  { title: \\\"One Flew Over the Cuckoo's Nest\\\", year: 1975 },\\r\\n  { title: 'Goodfellas', year: 1990 },\\r\\n  { title: 'The Matrix', year: 1999 },\\r\\n  { title: 'Seven Samurai', year: 1954 },\\r\\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\\r\\n  { title: 'City of God', year: 2002 },\\r\\n  { title: 'Se7en', year: 1995 },\\r\\n  { title: 'The Silence of the Lambs', year: 1991 },\\r\\n  { title: \\\"It's a Wonderful Life\\\", year: 1946 },\\r\\n  { title: 'Life Is Beautiful', year: 1997 },\\r\\n  { title: 'The Usual Suspects', year: 1995 },\\r\\n  { title: 'Léon: The Professional', year: 1994 },\\r\\n  { title: 'Spirited Away', year: 2001 },\\r\\n  { title: 'Saving Private Ryan', year: 1998 },\\r\\n  { title: 'Once Upon a Time in the West', year: 1968 },\\r\\n  { title: 'American History X', year: 1998 },\\r\\n  { title: 'Interstellar', year: 2014 },\\r\\n  { title: 'Casablanca', year: 1942 },\\r\\n  { title: 'City Lights', year: 1931 },\\r\\n  { title: 'Psycho', year: 1960 },\\r\\n  { title: 'The Green Mile', year: 1999 },\\r\\n  { title: 'The Intouchables', year: 2011 },\\r\\n  { title: 'Modern Times', year: 1936 },\\r\\n  { title: 'Raiders of the Lost Ark', year: 1981 },\\r\\n  { title: 'Rear Window', year: 1954 },\\r\\n  { title: 'The Pianist', year: 2002 },\\r\\n  { title: 'The Departed', year: 2006 },\\r\\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\\r\\n  { title: 'Back to the Future', year: 1985 },\\r\\n  { title: 'Whiplash', year: 2014 },\\r\\n  { title: 'Gladiator', year: 2000 },\\r\\n  { title: 'Memento', year: 2000 },\\r\\n  { title: 'The Prestige', year: 2006 },\\r\\n  { title: 'The Lion King', year: 1994 },\\r\\n  { title: 'Apocalypse Now', year: 1979 },\\r\\n  { title: 'Alien', year: 1979 },\\r\\n  { title: 'Sunset Boulevard', year: 1950 },\\r\\n  {\\r\\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\\r\\n    year: 1964,\\r\\n  },\\r\\n  { title: 'The Great Dictator', year: 1940 },\\r\\n  { title: 'Cinema Paradiso', year: 1988 },\\r\\n  { title: 'The Lives of Others', year: 2006 },\\r\\n  { title: 'Grave of the Fireflies', year: 1988 },\\r\\n  { title: 'Paths of Glory', year: 1957 },\\r\\n  { title: 'Django Unchained', year: 2012 },\\r\\n  { title: 'The Shining', year: 1980 },\\r\\n  { title: 'WALL·E', year: 2008 },\\r\\n  { title: 'American Beauty', year: 1999 },\\r\\n  { title: 'The Dark Knight Rises', year: 2012 },\\r\\n  { title: 'Princess Mononoke', year: 1997 },\\r\\n  { title: 'Aliens', year: 1986 },\\r\\n  { title: 'Oldboy', year: 2003 },\\r\\n  { title: 'Once Upon a Time in America', year: 1984 },\\r\\n  { title: 'Witness for the Prosecution', year: 1957 },\\r\\n  { title: 'Das Boot', year: 1981 },\\r\\n  { title: 'Citizen Kane', year: 1941 },\\r\\n  { title: 'North by Northwest', year: 1959 },\\r\\n  { title: 'Vertigo', year: 1958 },\\r\\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\\r\\n  { title: 'Reservoir Dogs', year: 1992 },\\r\\n  { title: 'Braveheart', year: 1995 },\\r\\n  { title: 'M', year: 1931 },\\r\\n  { title: 'Requiem for a Dream', year: 2000 },\\r\\n  { title: 'Amélie', year: 2001 },\\r\\n  { title: 'A Clockwork Orange', year: 1971 },\\r\\n  { title: 'Like Stars on Earth', year: 2007 },\\r\\n  { title: 'Taxi Driver', year: 1976 },\\r\\n  { title: 'Lawrence of Arabia', year: 1962 },\\r\\n  { title: 'Double Indemnity', year: 1944 },\\r\\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\\r\\n  { title: 'Amadeus', year: 1984 },\\r\\n  { title: 'To Kill a Mockingbird', year: 1962 },\\r\\n  { title: 'Toy Story 3', year: 2010 },\\r\\n  { title: 'Logan', year: 2017 },\\r\\n  { title: 'Full Metal Jacket', year: 1987 },\\r\\n  { title: 'Dangal', year: 2016 },\\r\\n  { title: 'The Sting', year: 1973 },\\r\\n  { title: '2001: A Space Odyssey', year: 1968 },\\r\\n  { title: \\\"Singin' in the Rain\\\", year: 1952 },\\r\\n  { title: 'Toy Story', year: 1995 },\\r\\n  { title: 'Bicycle Thieves', year: 1948 },\\r\\n  { title: 'The Kid', year: 1921 },\\r\\n  { title: 'Inglourious Basterds', year: 2009 },\\r\\n  { title: 'Snatch', year: 2000 },\\r\\n  { title: '3 Idiots', year: 2009 },\\r\\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\\r\\n];\\r\\n\";","export default \"/* eslint-disable no-use-before-define */\\r\\nimport React from 'react';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\nimport Autocomplete from '@material-ui/lab/Autocomplete';\\r\\nimport parse from 'autosuggest-highlight/parse';\\r\\nimport match from 'autosuggest-highlight/match';\\r\\n\\r\\nexport default function Highlights() {\\r\\n  return (\\r\\n    <Autocomplete\\r\\n      id=\\\"highlights-demo\\\"\\r\\n      style={{ width: 300 }}\\r\\n      options={top100Films}\\r\\n      getOptionLabel={option => option.title}\\r\\n      renderInput={params => <TextField {...params} label=\\\"Highlights\\\" variant=\\\"outlined\\\" margin=\\\"normal\\\" />}\\r\\n      renderOption={(option, { inputValue }) => {\\r\\n        const matches = match(option.title, inputValue);\\r\\n        const parts = parse(option.title, matches);\\r\\n\\r\\n        return (\\r\\n          <div>\\r\\n            {parts.map((part, index) => (\\r\\n              <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\\r\\n                {part.text}\\r\\n              </span>\\r\\n            ))}\\r\\n          </div>\\r\\n        );\\r\\n      }}\\r\\n    />\\r\\n  );\\r\\n}\\r\\n\\r\\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\\r\\nconst top100Films = [\\r\\n  { title: 'The Shawshank Redemption', year: 1994 },\\r\\n  { title: 'The Godfather', year: 1972 },\\r\\n  { title: 'The Godfather: Part II', year: 1974 },\\r\\n  { title: 'The Dark Knight', year: 2008 },\\r\\n  { title: '12 Angry Men', year: 1957 },\\r\\n  { title: \\\"Schindler's List\\\", year: 1993 },\\r\\n  { title: 'Pulp Fiction', year: 1994 },\\r\\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\\r\\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\\r\\n  { title: 'Fight Club', year: 1999 },\\r\\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\\r\\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\\r\\n  { title: 'Forrest Gump', year: 1994 },\\r\\n  { title: 'Inception', year: 2010 },\\r\\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\\r\\n  { title: \\\"One Flew Over the Cuckoo's Nest\\\", year: 1975 },\\r\\n  { title: 'Goodfellas', year: 1990 },\\r\\n  { title: 'The Matrix', year: 1999 },\\r\\n  { title: 'Seven Samurai', year: 1954 },\\r\\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\\r\\n  { title: 'City of God', year: 2002 },\\r\\n  { title: 'Se7en', year: 1995 },\\r\\n  { title: 'The Silence of the Lambs', year: 1991 },\\r\\n  { title: \\\"It's a Wonderful Life\\\", year: 1946 },\\r\\n  { title: 'Life Is Beautiful', year: 1997 },\\r\\n  { title: 'The Usual Suspects', year: 1995 },\\r\\n  { title: 'Léon: The Professional', year: 1994 },\\r\\n  { title: 'Spirited Away', year: 2001 },\\r\\n  { title: 'Saving Private Ryan', year: 1998 },\\r\\n  { title: 'Once Upon a Time in the West', year: 1968 },\\r\\n  { title: 'American History X', year: 1998 },\\r\\n  { title: 'Interstellar', year: 2014 },\\r\\n  { title: 'Casablanca', year: 1942 },\\r\\n  { title: 'City Lights', year: 1931 },\\r\\n  { title: 'Psycho', year: 1960 },\\r\\n  { title: 'The Green Mile', year: 1999 },\\r\\n  { title: 'The Intouchables', year: 2011 },\\r\\n  { title: 'Modern Times', year: 1936 },\\r\\n  { title: 'Raiders of the Lost Ark', year: 1981 },\\r\\n  { title: 'Rear Window', year: 1954 },\\r\\n  { title: 'The Pianist', year: 2002 },\\r\\n  { title: 'The Departed', year: 2006 },\\r\\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\\r\\n  { title: 'Back to the Future', year: 1985 },\\r\\n  { title: 'Whiplash', year: 2014 },\\r\\n  { title: 'Gladiator', year: 2000 },\\r\\n  { title: 'Memento', year: 2000 },\\r\\n  { title: 'The Prestige', year: 2006 },\\r\\n  { title: 'The Lion King', year: 1994 },\\r\\n  { title: 'Apocalypse Now', year: 1979 },\\r\\n  { title: 'Alien', year: 1979 },\\r\\n  { title: 'Sunset Boulevard', year: 1950 },\\r\\n  {\\r\\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\\r\\n    year: 1964,\\r\\n  },\\r\\n  { title: 'The Great Dictator', year: 1940 },\\r\\n  { title: 'Cinema Paradiso', year: 1988 },\\r\\n  { title: 'The Lives of Others', year: 2006 },\\r\\n  { title: 'Grave of the Fireflies', year: 1988 },\\r\\n  { title: 'Paths of Glory', year: 1957 },\\r\\n  { title: 'Django Unchained', year: 2012 },\\r\\n  { title: 'The Shining', year: 1980 },\\r\\n  { title: 'WALL·E', year: 2008 },\\r\\n  { title: 'American Beauty', year: 1999 },\\r\\n  { title: 'The Dark Knight Rises', year: 2012 },\\r\\n  { title: 'Princess Mononoke', year: 1997 },\\r\\n  { title: 'Aliens', year: 1986 },\\r\\n  { title: 'Oldboy', year: 2003 },\\r\\n  { title: 'Once Upon a Time in America', year: 1984 },\\r\\n  { title: 'Witness for the Prosecution', year: 1957 },\\r\\n  { title: 'Das Boot', year: 1981 },\\r\\n  { title: 'Citizen Kane', year: 1941 },\\r\\n  { title: 'North by Northwest', year: 1959 },\\r\\n  { title: 'Vertigo', year: 1958 },\\r\\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\\r\\n  { title: 'Reservoir Dogs', year: 1992 },\\r\\n  { title: 'Braveheart', year: 1995 },\\r\\n  { title: 'M', year: 1931 },\\r\\n  { title: 'Requiem for a Dream', year: 2000 },\\r\\n  { title: 'Amélie', year: 2001 },\\r\\n  { title: 'A Clockwork Orange', year: 1971 },\\r\\n  { title: 'Like Stars on Earth', year: 2007 },\\r\\n  { title: 'Taxi Driver', year: 1976 },\\r\\n  { title: 'Lawrence of Arabia', year: 1962 },\\r\\n  { title: 'Double Indemnity', year: 1944 },\\r\\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\\r\\n  { title: 'Amadeus', year: 1984 },\\r\\n  { title: 'To Kill a Mockingbird', year: 1962 },\\r\\n  { title: 'Toy Story 3', year: 2010 },\\r\\n  { title: 'Logan', year: 2017 },\\r\\n  { title: 'Full Metal Jacket', year: 1987 },\\r\\n  { title: 'Dangal', year: 2016 },\\r\\n  { title: 'The Sting', year: 1973 },\\r\\n  { title: '2001: A Space Odyssey', year: 1968 },\\r\\n  { title: \\\"Singin' in the Rain\\\", year: 1952 },\\r\\n  { title: 'Toy Story', year: 1995 },\\r\\n  { title: 'Bicycle Thieves', year: 1948 },\\r\\n  { title: 'The Kid', year: 1921 },\\r\\n  { title: 'Inglourious Basterds', year: 2009 },\\r\\n  { title: 'Snatch', year: 2000 },\\r\\n  { title: '3 Idiots', year: 2009 },\\r\\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\\r\\n];\\r\\n\";","export default \"/* eslint-disable no-use-before-define */\\r\\nimport React from 'react';\\r\\nimport Autocomplete from '@material-ui/lab/Autocomplete';\\r\\nimport { makeStyles } from '@material-ui/core/styles';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\n\\r\\nconst useStyles = makeStyles(theme => ({\\r\\n  root: {\\r\\n    width: 500,\\r\\n    '& > * + *': {\\r\\n      marginTop: theme.spacing(3),\\r\\n    },\\r\\n  },\\r\\n}));\\r\\n\\r\\nexport default function LimitTags() {\\r\\n  const classes = useStyles();\\r\\n\\r\\n  return (\\r\\n    <div className={classes.root}>\\r\\n      <Autocomplete\\r\\n        multiple\\r\\n        limitTags={2}\\r\\n        id=\\\"multiple-limit-tags\\\"\\r\\n        options={top100Films}\\r\\n        getOptionLabel={option => option.title}\\r\\n        defaultValue={[top100Films[13], top100Films[12], top100Films[11]]}\\r\\n        renderInput={params => <TextField {...params} variant=\\\"outlined\\\" label=\\\"limitTags\\\" placeholder=\\\"Favorites\\\" />}\\r\\n      />\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\\r\\nconst top100Films = [\\r\\n  { title: 'The Shawshank Redemption', year: 1994 },\\r\\n  { title: 'The Godfather', year: 1972 },\\r\\n  { title: 'The Godfather: Part II', year: 1974 },\\r\\n  { title: 'The Dark Knight', year: 2008 },\\r\\n  { title: '12 Angry Men', year: 1957 },\\r\\n  { title: \\\"Schindler's List\\\", year: 1993 },\\r\\n  { title: 'Pulp Fiction', year: 1994 },\\r\\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\\r\\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\\r\\n  { title: 'Fight Club', year: 1999 },\\r\\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\\r\\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\\r\\n  { title: 'Forrest Gump', year: 1994 },\\r\\n  { title: 'Inception', year: 2010 },\\r\\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\\r\\n  { title: \\\"One Flew Over the Cuckoo's Nest\\\", year: 1975 },\\r\\n  { title: 'Goodfellas', year: 1990 },\\r\\n  { title: 'The Matrix', year: 1999 },\\r\\n  { title: 'Seven Samurai', year: 1954 },\\r\\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\\r\\n  { title: 'City of God', year: 2002 },\\r\\n  { title: 'Se7en', year: 1995 },\\r\\n  { title: 'The Silence of the Lambs', year: 1991 },\\r\\n  { title: \\\"It's a Wonderful Life\\\", year: 1946 },\\r\\n  { title: 'Life Is Beautiful', year: 1997 },\\r\\n  { title: 'The Usual Suspects', year: 1995 },\\r\\n  { title: 'Léon: The Professional', year: 1994 },\\r\\n  { title: 'Spirited Away', year: 2001 },\\r\\n  { title: 'Saving Private Ryan', year: 1998 },\\r\\n  { title: 'Once Upon a Time in the West', year: 1968 },\\r\\n  { title: 'American History X', year: 1998 },\\r\\n  { title: 'Interstellar', year: 2014 },\\r\\n  { title: 'Casablanca', year: 1942 },\\r\\n  { title: 'City Lights', year: 1931 },\\r\\n  { title: 'Psycho', year: 1960 },\\r\\n  { title: 'The Green Mile', year: 1999 },\\r\\n  { title: 'The Intouchables', year: 2011 },\\r\\n  { title: 'Modern Times', year: 1936 },\\r\\n  { title: 'Raiders of the Lost Ark', year: 1981 },\\r\\n  { title: 'Rear Window', year: 1954 },\\r\\n  { title: 'The Pianist', year: 2002 },\\r\\n  { title: 'The Departed', year: 2006 },\\r\\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\\r\\n  { title: 'Back to the Future', year: 1985 },\\r\\n  { title: 'Whiplash', year: 2014 },\\r\\n  { title: 'Gladiator', year: 2000 },\\r\\n  { title: 'Memento', year: 2000 },\\r\\n  { title: 'The Prestige', year: 2006 },\\r\\n  { title: 'The Lion King', year: 1994 },\\r\\n  { title: 'Apocalypse Now', year: 1979 },\\r\\n  { title: 'Alien', year: 1979 },\\r\\n  { title: 'Sunset Boulevard', year: 1950 },\\r\\n  {\\r\\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\\r\\n    year: 1964,\\r\\n  },\\r\\n  { title: 'The Great Dictator', year: 1940 },\\r\\n  { title: 'Cinema Paradiso', year: 1988 },\\r\\n  { title: 'The Lives of Others', year: 2006 },\\r\\n  { title: 'Grave of the Fireflies', year: 1988 },\\r\\n  { title: 'Paths of Glory', year: 1957 },\\r\\n  { title: 'Django Unchained', year: 2012 },\\r\\n  { title: 'The Shining', year: 1980 },\\r\\n  { title: 'WALL·E', year: 2008 },\\r\\n  { title: 'American Beauty', year: 1999 },\\r\\n  { title: 'The Dark Knight Rises', year: 2012 },\\r\\n  { title: 'Princess Mononoke', year: 1997 },\\r\\n  { title: 'Aliens', year: 1986 },\\r\\n  { title: 'Oldboy', year: 2003 },\\r\\n  { title: 'Once Upon a Time in America', year: 1984 },\\r\\n  { title: 'Witness for the Prosecution', year: 1957 },\\r\\n  { title: 'Das Boot', year: 1981 },\\r\\n  { title: 'Citizen Kane', year: 1941 },\\r\\n  { title: 'North by Northwest', year: 1959 },\\r\\n  { title: 'Vertigo', year: 1958 },\\r\\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\\r\\n  { title: 'Reservoir Dogs', year: 1992 },\\r\\n  { title: 'Braveheart', year: 1995 },\\r\\n  { title: 'M', year: 1931 },\\r\\n  { title: 'Requiem for a Dream', year: 2000 },\\r\\n  { title: 'Amélie', year: 2001 },\\r\\n  { title: 'A Clockwork Orange', year: 1971 },\\r\\n  { title: 'Like Stars on Earth', year: 2007 },\\r\\n  { title: 'Taxi Driver', year: 1976 },\\r\\n  { title: 'Lawrence of Arabia', year: 1962 },\\r\\n  { title: 'Double Indemnity', year: 1944 },\\r\\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\\r\\n  { title: 'Amadeus', year: 1984 },\\r\\n  { title: 'To Kill a Mockingbird', year: 1962 },\\r\\n  { title: 'Toy Story 3', year: 2010 },\\r\\n  { title: 'Logan', year: 2017 },\\r\\n  { title: 'Full Metal Jacket', year: 1987 },\\r\\n  { title: 'Dangal', year: 2016 },\\r\\n  { title: 'The Sting', year: 1973 },\\r\\n  { title: '2001: A Space Odyssey', year: 1968 },\\r\\n  { title: \\\"Singin' in the Rain\\\", year: 1952 },\\r\\n  { title: 'Toy Story', year: 1995 },\\r\\n  { title: 'Bicycle Thieves', year: 1948 },\\r\\n  { title: 'The Kid', year: 1921 },\\r\\n  { title: 'Inglourious Basterds', year: 2009 },\\r\\n  { title: 'Snatch', year: 2000 },\\r\\n  { title: '3 Idiots', year: 2009 },\\r\\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\\r\\n];\\r\\n\";","export default \"/* eslint-disable no-use-before-define */\\r\\nimport React from 'react';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\nimport Autocomplete from '@material-ui/lab/Autocomplete';\\r\\n\\r\\nexport default function Playground() {\\r\\n  const defaultProps = {\\r\\n    options: top100Films,\\r\\n    getOptionLabel: option => option.title,\\r\\n  };\\r\\n\\r\\n  const flatProps = {\\r\\n    options: top100Films.map(option => option.title),\\r\\n  };\\r\\n\\r\\n  const [value, setValue] = React.useState(null);\\r\\n\\r\\n  return (\\r\\n    <div style={{ width: 300 }}>\\r\\n      <Autocomplete\\r\\n        {...defaultProps}\\r\\n        id=\\\"debug\\\"\\r\\n        debug\\r\\n        renderInput={params => <TextField {...params} label=\\\"debug\\\" margin=\\\"normal\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        {...defaultProps}\\r\\n        id=\\\"disable-close-on-select\\\"\\r\\n        disableCloseOnSelect\\r\\n        renderInput={params => <TextField {...params} label=\\\"disableCloseOnSelect\\\" margin=\\\"normal\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        {...defaultProps}\\r\\n        id=\\\"clear-on-escape\\\"\\r\\n        clearOnEscape\\r\\n        renderInput={params => <TextField {...params} label=\\\"clearOnEscape\\\" margin=\\\"normal\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        {...defaultProps}\\r\\n        id=\\\"disable-clearable\\\"\\r\\n        disableClearable\\r\\n        renderInput={params => <TextField {...params} label=\\\"disableClearable\\\" margin=\\\"normal\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        {...defaultProps}\\r\\n        id=\\\"include-input-in-list\\\"\\r\\n        includeInputInList\\r\\n        renderInput={params => <TextField {...params} label=\\\"includeInputInList\\\" margin=\\\"normal\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        {...flatProps}\\r\\n        id=\\\"flat-demo\\\"\\r\\n        renderInput={params => <TextField {...params} label=\\\"flat\\\" margin=\\\"normal\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        {...defaultProps}\\r\\n        id=\\\"controlled-demo\\\"\\r\\n        value={value}\\r\\n        onChange={(event, newValue) => {\\r\\n          setValue(newValue);\\r\\n        }}\\r\\n        renderInput={params => <TextField {...params} label=\\\"controlled\\\" margin=\\\"normal\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        {...defaultProps}\\r\\n        id=\\\"auto-complete\\\"\\r\\n        autoComplete\\r\\n        includeInputInList\\r\\n        renderInput={params => <TextField {...params} label=\\\"autoComplete\\\" margin=\\\"normal\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        {...defaultProps}\\r\\n        id=\\\"disable-list-wrap\\\"\\r\\n        disableListWrap\\r\\n        renderInput={params => <TextField {...params} label=\\\"disableListWrap\\\" margin=\\\"normal\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        {...defaultProps}\\r\\n        id=\\\"open-on-focus\\\"\\r\\n        openOnFocus\\r\\n        renderInput={params => <TextField {...params} label=\\\"openOnFocus\\\" margin=\\\"normal\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        {...defaultProps}\\r\\n        id=\\\"auto-highlight\\\"\\r\\n        autoHighlight\\r\\n        renderInput={params => <TextField {...params} label=\\\"autoHighlight\\\" margin=\\\"normal\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        {...defaultProps}\\r\\n        id=\\\"auto-select\\\"\\r\\n        autoSelect\\r\\n        renderInput={params => <TextField {...params} label=\\\"autoSelect\\\" margin=\\\"normal\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        {...defaultProps}\\r\\n        id=\\\"disabled\\\"\\r\\n        disabled\\r\\n        renderInput={params => <TextField {...params} label=\\\"disabled\\\" margin=\\\"normal\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        {...defaultProps}\\r\\n        id=\\\"disable-portal\\\"\\r\\n        disablePortal\\r\\n        renderInput={params => <TextField {...params} label=\\\"disablePortal\\\" margin=\\\"normal\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        {...defaultProps}\\r\\n        id=\\\"blur-on-select\\\"\\r\\n        blurOnSelect\\r\\n        renderInput={params => <TextField {...params} label=\\\"blurOnSelect\\\" margin=\\\"normal\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        {...defaultProps}\\r\\n        id=\\\"clear-on-blur\\\"\\r\\n        clearOnBlur\\r\\n        renderInput={params => <TextField {...params} label=\\\"clearOnBlur\\\" margin=\\\"normal\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        {...defaultProps}\\r\\n        id=\\\"select-on-focus\\\"\\r\\n        selectOnFocus\\r\\n        renderInput={params => <TextField {...params} label=\\\"selectOnFocus\\\" margin=\\\"normal\\\" />}\\r\\n      />\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\\r\\nconst top100Films = [\\r\\n  { title: 'The Shawshank Redemption', year: 1994 },\\r\\n  { title: 'The Godfather', year: 1972 },\\r\\n  { title: 'The Godfather: Part II', year: 1974 },\\r\\n  { title: 'The Dark Knight', year: 2008 },\\r\\n  { title: '12 Angry Men', year: 1957 },\\r\\n  { title: \\\"Schindler's List\\\", year: 1993 },\\r\\n  { title: 'Pulp Fiction', year: 1994 },\\r\\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\\r\\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\\r\\n  { title: 'Fight Club', year: 1999 },\\r\\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\\r\\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\\r\\n  { title: 'Forrest Gump', year: 1994 },\\r\\n  { title: 'Inception', year: 2010 },\\r\\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\\r\\n  { title: \\\"One Flew Over the Cuckoo's Nest\\\", year: 1975 },\\r\\n  { title: 'Goodfellas', year: 1990 },\\r\\n  { title: 'The Matrix', year: 1999 },\\r\\n  { title: 'Seven Samurai', year: 1954 },\\r\\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\\r\\n  { title: 'City of God', year: 2002 },\\r\\n  { title: 'Se7en', year: 1995 },\\r\\n  { title: 'The Silence of the Lambs', year: 1991 },\\r\\n  { title: \\\"It's a Wonderful Life\\\", year: 1946 },\\r\\n  { title: 'Life Is Beautiful', year: 1997 },\\r\\n  { title: 'The Usual Suspects', year: 1995 },\\r\\n  { title: 'Léon: The Professional', year: 1994 },\\r\\n  { title: 'Spirited Away', year: 2001 },\\r\\n  { title: 'Saving Private Ryan', year: 1998 },\\r\\n  { title: 'Once Upon a Time in the West', year: 1968 },\\r\\n  { title: 'American History X', year: 1998 },\\r\\n  { title: 'Interstellar', year: 2014 },\\r\\n  { title: 'Casablanca', year: 1942 },\\r\\n  { title: 'City Lights', year: 1931 },\\r\\n  { title: 'Psycho', year: 1960 },\\r\\n  { title: 'The Green Mile', year: 1999 },\\r\\n  { title: 'The Intouchables', year: 2011 },\\r\\n  { title: 'Modern Times', year: 1936 },\\r\\n  { title: 'Raiders of the Lost Ark', year: 1981 },\\r\\n  { title: 'Rear Window', year: 1954 },\\r\\n  { title: 'The Pianist', year: 2002 },\\r\\n  { title: 'The Departed', year: 2006 },\\r\\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\\r\\n  { title: 'Back to the Future', year: 1985 },\\r\\n  { title: 'Whiplash', year: 2014 },\\r\\n  { title: 'Gladiator', year: 2000 },\\r\\n  { title: 'Memento', year: 2000 },\\r\\n  { title: 'The Prestige', year: 2006 },\\r\\n  { title: 'The Lion King', year: 1994 },\\r\\n  { title: 'Apocalypse Now', year: 1979 },\\r\\n  { title: 'Alien', year: 1979 },\\r\\n  { title: 'Sunset Boulevard', year: 1950 },\\r\\n  {\\r\\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\\r\\n    year: 1964,\\r\\n  },\\r\\n  { title: 'The Great Dictator', year: 1940 },\\r\\n  { title: 'Cinema Paradiso', year: 1988 },\\r\\n  { title: 'The Lives of Others', year: 2006 },\\r\\n  { title: 'Grave of the Fireflies', year: 1988 },\\r\\n  { title: 'Paths of Glory', year: 1957 },\\r\\n  { title: 'Django Unchained', year: 2012 },\\r\\n  { title: 'The Shining', year: 1980 },\\r\\n  { title: 'WALL·E', year: 2008 },\\r\\n  { title: 'American Beauty', year: 1999 },\\r\\n  { title: 'The Dark Knight Rises', year: 2012 },\\r\\n  { title: 'Princess Mononoke', year: 1997 },\\r\\n  { title: 'Aliens', year: 1986 },\\r\\n  { title: 'Oldboy', year: 2003 },\\r\\n  { title: 'Once Upon a Time in America', year: 1984 },\\r\\n  { title: 'Witness for the Prosecution', year: 1957 },\\r\\n  { title: 'Das Boot', year: 1981 },\\r\\n  { title: 'Citizen Kane', year: 1941 },\\r\\n  { title: 'North by Northwest', year: 1959 },\\r\\n  { title: 'Vertigo', year: 1958 },\\r\\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\\r\\n  { title: 'Reservoir Dogs', year: 1992 },\\r\\n  { title: 'Braveheart', year: 1995 },\\r\\n  { title: 'M', year: 1931 },\\r\\n  { title: 'Requiem for a Dream', year: 2000 },\\r\\n  { title: 'Amélie', year: 2001 },\\r\\n  { title: 'A Clockwork Orange', year: 1971 },\\r\\n  { title: 'Like Stars on Earth', year: 2007 },\\r\\n  { title: 'Taxi Driver', year: 1976 },\\r\\n  { title: 'Lawrence of Arabia', year: 1962 },\\r\\n  { title: 'Double Indemnity', year: 1944 },\\r\\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\\r\\n  { title: 'Amadeus', year: 1984 },\\r\\n  { title: 'To Kill a Mockingbird', year: 1962 },\\r\\n  { title: 'Toy Story 3', year: 2010 },\\r\\n  { title: 'Logan', year: 2017 },\\r\\n  { title: 'Full Metal Jacket', year: 1987 },\\r\\n  { title: 'Dangal', year: 2016 },\\r\\n  { title: 'The Sting', year: 1973 },\\r\\n  { title: '2001: A Space Odyssey', year: 1968 },\\r\\n  { title: \\\"Singin' in the Rain\\\", year: 1952 },\\r\\n  { title: 'Toy Story', year: 1995 },\\r\\n  { title: 'Bicycle Thieves', year: 1948 },\\r\\n  { title: 'The Kid', year: 1921 },\\r\\n  { title: 'Inglourious Basterds', year: 2009 },\\r\\n  { title: 'Snatch', year: 2000 },\\r\\n  { title: '3 Idiots', year: 2009 },\\r\\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\\r\\n];\\r\\n\";","export default \"/* eslint-disable no-use-before-define */\\r\\nimport React from 'react';\\r\\nimport Chip from '@material-ui/core/Chip';\\r\\nimport Autocomplete from '@material-ui/lab/Autocomplete';\\r\\nimport { makeStyles } from '@material-ui/core/styles';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\n\\r\\nconst useStyles = makeStyles(theme => ({\\r\\n  root: {\\r\\n    width: 500,\\r\\n    '& > * + *': {\\r\\n      marginTop: theme.spacing(2),\\r\\n    },\\r\\n  },\\r\\n}));\\r\\n\\r\\nexport default function Sizes() {\\r\\n  const classes = useStyles();\\r\\n\\r\\n  return (\\r\\n    <div className={classes.root}>\\r\\n      <Autocomplete\\r\\n        id=\\\"size-small-standard\\\"\\r\\n        size=\\\"small\\\"\\r\\n        options={top100Films}\\r\\n        getOptionLabel={option => option.title}\\r\\n        defaultValue={top100Films[13]}\\r\\n        renderInput={params => <TextField {...params} variant=\\\"standard\\\" label=\\\"Size small\\\" placeholder=\\\"Favorites\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        multiple\\r\\n        id=\\\"size-small-standard-multi\\\"\\r\\n        size=\\\"small\\\"\\r\\n        options={top100Films}\\r\\n        getOptionLabel={option => option.title}\\r\\n        defaultValue={[top100Films[13]]}\\r\\n        renderInput={params => <TextField {...params} variant=\\\"standard\\\" label=\\\"Size small\\\" placeholder=\\\"Favorites\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        id=\\\"size-small-outlined\\\"\\r\\n        size=\\\"small\\\"\\r\\n        options={top100Films}\\r\\n        getOptionLabel={option => option.title}\\r\\n        defaultValue={top100Films[13]}\\r\\n        renderInput={params => <TextField {...params} variant=\\\"outlined\\\" label=\\\"Size small\\\" placeholder=\\\"Favorites\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        multiple\\r\\n        id=\\\"size-small-outlined-multi\\\"\\r\\n        size=\\\"small\\\"\\r\\n        options={top100Films}\\r\\n        getOptionLabel={option => option.title}\\r\\n        defaultValue={[top100Films[13]]}\\r\\n        renderInput={params => <TextField {...params} variant=\\\"outlined\\\" label=\\\"Size small\\\" placeholder=\\\"Favorites\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        id=\\\"size-small-filled\\\"\\r\\n        size=\\\"small\\\"\\r\\n        options={top100Films}\\r\\n        getOptionLabel={option => option.title}\\r\\n        defaultValue={top100Films[13]}\\r\\n        renderTags={(value, getTagProps) =>\\r\\n          value.map((option, index) => (\\r\\n            <Chip variant=\\\"outlined\\\" label={option.title} size=\\\"small\\\" {...getTagProps({ index })} />\\r\\n          ))\\r\\n        }\\r\\n        renderInput={params => <TextField {...params} variant=\\\"filled\\\" label=\\\"Size small\\\" placeholder=\\\"Favorites\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        multiple\\r\\n        id=\\\"size-small-filled-multi\\\"\\r\\n        size=\\\"small\\\"\\r\\n        options={top100Films}\\r\\n        getOptionLabel={option => option.title}\\r\\n        defaultValue={[top100Films[13]]}\\r\\n        renderTags={(value, getTagProps) =>\\r\\n          value.map((option, index) => (\\r\\n            <Chip variant=\\\"outlined\\\" label={option.title} size=\\\"small\\\" {...getTagProps({ index })} />\\r\\n          ))\\r\\n        }\\r\\n        renderInput={params => <TextField {...params} variant=\\\"filled\\\" label=\\\"Size small\\\" placeholder=\\\"Favorites\\\" />}\\r\\n      />\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\\r\\nconst top100Films = [\\r\\n  { title: 'The Shawshank Redemption', year: 1994 },\\r\\n  { title: 'The Godfather', year: 1972 },\\r\\n  { title: 'The Godfather: Part II', year: 1974 },\\r\\n  { title: 'The Dark Knight', year: 2008 },\\r\\n  { title: '12 Angry Men', year: 1957 },\\r\\n  { title: \\\"Schindler's List\\\", year: 1993 },\\r\\n  { title: 'Pulp Fiction', year: 1994 },\\r\\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\\r\\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\\r\\n  { title: 'Fight Club', year: 1999 },\\r\\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\\r\\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\\r\\n  { title: 'Forrest Gump', year: 1994 },\\r\\n  { title: 'Inception', year: 2010 },\\r\\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\\r\\n  { title: \\\"One Flew Over the Cuckoo's Nest\\\", year: 1975 },\\r\\n  { title: 'Goodfellas', year: 1990 },\\r\\n  { title: 'The Matrix', year: 1999 },\\r\\n  { title: 'Seven Samurai', year: 1954 },\\r\\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\\r\\n  { title: 'City of God', year: 2002 },\\r\\n  { title: 'Se7en', year: 1995 },\\r\\n  { title: 'The Silence of the Lambs', year: 1991 },\\r\\n  { title: \\\"It's a Wonderful Life\\\", year: 1946 },\\r\\n  { title: 'Life Is Beautiful', year: 1997 },\\r\\n  { title: 'The Usual Suspects', year: 1995 },\\r\\n  { title: 'Léon: The Professional', year: 1994 },\\r\\n  { title: 'Spirited Away', year: 2001 },\\r\\n  { title: 'Saving Private Ryan', year: 1998 },\\r\\n  { title: 'Once Upon a Time in the West', year: 1968 },\\r\\n  { title: 'American History X', year: 1998 },\\r\\n  { title: 'Interstellar', year: 2014 },\\r\\n  { title: 'Casablanca', year: 1942 },\\r\\n  { title: 'City Lights', year: 1931 },\\r\\n  { title: 'Psycho', year: 1960 },\\r\\n  { title: 'The Green Mile', year: 1999 },\\r\\n  { title: 'The Intouchables', year: 2011 },\\r\\n  { title: 'Modern Times', year: 1936 },\\r\\n  { title: 'Raiders of the Lost Ark', year: 1981 },\\r\\n  { title: 'Rear Window', year: 1954 },\\r\\n  { title: 'The Pianist', year: 2002 },\\r\\n  { title: 'The Departed', year: 2006 },\\r\\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\\r\\n  { title: 'Back to the Future', year: 1985 },\\r\\n  { title: 'Whiplash', year: 2014 },\\r\\n  { title: 'Gladiator', year: 2000 },\\r\\n  { title: 'Memento', year: 2000 },\\r\\n  { title: 'The Prestige', year: 2006 },\\r\\n  { title: 'The Lion King', year: 1994 },\\r\\n  { title: 'Apocalypse Now', year: 1979 },\\r\\n  { title: 'Alien', year: 1979 },\\r\\n  { title: 'Sunset Boulevard', year: 1950 },\\r\\n  {\\r\\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\\r\\n    year: 1964,\\r\\n  },\\r\\n  { title: 'The Great Dictator', year: 1940 },\\r\\n  { title: 'Cinema Paradiso', year: 1988 },\\r\\n  { title: 'The Lives of Others', year: 2006 },\\r\\n  { title: 'Grave of the Fireflies', year: 1988 },\\r\\n  { title: 'Paths of Glory', year: 1957 },\\r\\n  { title: 'Django Unchained', year: 2012 },\\r\\n  { title: 'The Shining', year: 1980 },\\r\\n  { title: 'WALL·E', year: 2008 },\\r\\n  { title: 'American Beauty', year: 1999 },\\r\\n  { title: 'The Dark Knight Rises', year: 2012 },\\r\\n  { title: 'Princess Mononoke', year: 1997 },\\r\\n  { title: 'Aliens', year: 1986 },\\r\\n  { title: 'Oldboy', year: 2003 },\\r\\n  { title: 'Once Upon a Time in America', year: 1984 },\\r\\n  { title: 'Witness for the Prosecution', year: 1957 },\\r\\n  { title: 'Das Boot', year: 1981 },\\r\\n  { title: 'Citizen Kane', year: 1941 },\\r\\n  { title: 'North by Northwest', year: 1959 },\\r\\n  { title: 'Vertigo', year: 1958 },\\r\\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\\r\\n  { title: 'Reservoir Dogs', year: 1992 },\\r\\n  { title: 'Braveheart', year: 1995 },\\r\\n  { title: 'M', year: 1931 },\\r\\n  { title: 'Requiem for a Dream', year: 2000 },\\r\\n  { title: 'Amélie', year: 2001 },\\r\\n  { title: 'A Clockwork Orange', year: 1971 },\\r\\n  { title: 'Like Stars on Earth', year: 2007 },\\r\\n  { title: 'Taxi Driver', year: 1976 },\\r\\n  { title: 'Lawrence of Arabia', year: 1962 },\\r\\n  { title: 'Double Indemnity', year: 1944 },\\r\\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\\r\\n  { title: 'Amadeus', year: 1984 },\\r\\n  { title: 'To Kill a Mockingbird', year: 1962 },\\r\\n  { title: 'Toy Story 3', year: 2010 },\\r\\n  { title: 'Logan', year: 2017 },\\r\\n  { title: 'Full Metal Jacket', year: 1987 },\\r\\n  { title: 'Dangal', year: 2016 },\\r\\n  { title: 'The Sting', year: 1973 },\\r\\n  { title: '2001: A Space Odyssey', year: 1968 },\\r\\n  { title: \\\"Singin' in the Rain\\\", year: 1952 },\\r\\n  { title: 'Toy Story', year: 1995 },\\r\\n  { title: 'Bicycle Thieves', year: 1948 },\\r\\n  { title: 'The Kid', year: 1921 },\\r\\n  { title: 'Inglourious Basterds', year: 2009 },\\r\\n  { title: 'Snatch', year: 2000 },\\r\\n  { title: '3 Idiots', year: 2009 },\\r\\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\\r\\n];\\r\\n\";","export default \"/* eslint-disable no-use-before-define */\\r\\nimport React from 'react';\\r\\nimport Chip from '@material-ui/core/Chip';\\r\\nimport Autocomplete from '@material-ui/lab/Autocomplete';\\r\\nimport { makeStyles } from '@material-ui/core/styles';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\n\\r\\nconst useStyles = makeStyles(theme => ({\\r\\n  root: {\\r\\n    width: 500,\\r\\n    '& > * + *': {\\r\\n      marginTop: theme.spacing(3),\\r\\n    },\\r\\n  },\\r\\n}));\\r\\n\\r\\nexport default function Tags() {\\r\\n  const classes = useStyles();\\r\\n\\r\\n  return (\\r\\n    <div className={classes.root}>\\r\\n      <Autocomplete\\r\\n        multiple\\r\\n        id=\\\"tags-standard\\\"\\r\\n        options={top100Films}\\r\\n        getOptionLabel={option => option.title}\\r\\n        defaultValue={[top100Films[13]]}\\r\\n        renderInput={params => <TextField {...params} variant=\\\"standard\\\" label=\\\"Multiple values\\\" placeholder=\\\"Favorites\\\" />}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        multiple\\r\\n        id=\\\"tags-outlined\\\"\\r\\n        options={top100Films}\\r\\n        getOptionLabel={option => option.title}\\r\\n        defaultValue={[top100Films[13]]}\\r\\n        filterSelectedOptions\\r\\n        renderInput={params => (\\r\\n          <TextField {...params} variant=\\\"outlined\\\" label=\\\"filterSelectedOptions\\\" placeholder=\\\"Favorites\\\" />\\r\\n        )}\\r\\n      />\\r\\n      <Autocomplete\\r\\n        multiple\\r\\n        id=\\\"tags-filled\\\"\\r\\n        options={top100Films.map(option => option.title)}\\r\\n        defaultValue={[top100Films[13].title]}\\r\\n        freeSolo\\r\\n        renderTags={(value, getTagProps) =>\\r\\n          value.map((option, index) => <Chip variant=\\\"outlined\\\" label={option} {...getTagProps({ index })} />)\\r\\n        }\\r\\n        renderInput={params => <TextField {...params} variant=\\\"filled\\\" label=\\\"freeSolo\\\" placeholder=\\\"Favorites\\\" />}\\r\\n      />\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\\r\\nconst top100Films = [\\r\\n  { title: 'The Shawshank Redemption', year: 1994 },\\r\\n  { title: 'The Godfather', year: 1972 },\\r\\n  { title: 'The Godfather: Part II', year: 1974 },\\r\\n  { title: 'The Dark Knight', year: 2008 },\\r\\n  { title: '12 Angry Men', year: 1957 },\\r\\n  { title: \\\"Schindler's List\\\", year: 1993 },\\r\\n  { title: 'Pulp Fiction', year: 1994 },\\r\\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\\r\\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\\r\\n  { title: 'Fight Club', year: 1999 },\\r\\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\\r\\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\\r\\n  { title: 'Forrest Gump', year: 1994 },\\r\\n  { title: 'Inception', year: 2010 },\\r\\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\\r\\n  { title: \\\"One Flew Over the Cuckoo's Nest\\\", year: 1975 },\\r\\n  { title: 'Goodfellas', year: 1990 },\\r\\n  { title: 'The Matrix', year: 1999 },\\r\\n  { title: 'Seven Samurai', year: 1954 },\\r\\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\\r\\n  { title: 'City of God', year: 2002 },\\r\\n  { title: 'Se7en', year: 1995 },\\r\\n  { title: 'The Silence of the Lambs', year: 1991 },\\r\\n  { title: \\\"It's a Wonderful Life\\\", year: 1946 },\\r\\n  { title: 'Life Is Beautiful', year: 1997 },\\r\\n  { title: 'The Usual Suspects', year: 1995 },\\r\\n  { title: 'Léon: The Professional', year: 1994 },\\r\\n  { title: 'Spirited Away', year: 2001 },\\r\\n  { title: 'Saving Private Ryan', year: 1998 },\\r\\n  { title: 'Once Upon a Time in the West', year: 1968 },\\r\\n  { title: 'American History X', year: 1998 },\\r\\n  { title: 'Interstellar', year: 2014 },\\r\\n  { title: 'Casablanca', year: 1942 },\\r\\n  { title: 'City Lights', year: 1931 },\\r\\n  { title: 'Psycho', year: 1960 },\\r\\n  { title: 'The Green Mile', year: 1999 },\\r\\n  { title: 'The Intouchables', year: 2011 },\\r\\n  { title: 'Modern Times', year: 1936 },\\r\\n  { title: 'Raiders of the Lost Ark', year: 1981 },\\r\\n  { title: 'Rear Window', year: 1954 },\\r\\n  { title: 'The Pianist', year: 2002 },\\r\\n  { title: 'The Departed', year: 2006 },\\r\\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\\r\\n  { title: 'Back to the Future', year: 1985 },\\r\\n  { title: 'Whiplash', year: 2014 },\\r\\n  { title: 'Gladiator', year: 2000 },\\r\\n  { title: 'Memento', year: 2000 },\\r\\n  { title: 'The Prestige', year: 2006 },\\r\\n  { title: 'The Lion King', year: 1994 },\\r\\n  { title: 'Apocalypse Now', year: 1979 },\\r\\n  { title: 'Alien', year: 1979 },\\r\\n  { title: 'Sunset Boulevard', year: 1950 },\\r\\n  {\\r\\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\\r\\n    year: 1964,\\r\\n  },\\r\\n  { title: 'The Great Dictator', year: 1940 },\\r\\n  { title: 'Cinema Paradiso', year: 1988 },\\r\\n  { title: 'The Lives of Others', year: 2006 },\\r\\n  { title: 'Grave of the Fireflies', year: 1988 },\\r\\n  { title: 'Paths of Glory', year: 1957 },\\r\\n  { title: 'Django Unchained', year: 2012 },\\r\\n  { title: 'The Shining', year: 1980 },\\r\\n  { title: 'WALL·E', year: 2008 },\\r\\n  { title: 'American Beauty', year: 1999 },\\r\\n  { title: 'The Dark Knight Rises', year: 2012 },\\r\\n  { title: 'Princess Mononoke', year: 1997 },\\r\\n  { title: 'Aliens', year: 1986 },\\r\\n  { title: 'Oldboy', year: 2003 },\\r\\n  { title: 'Once Upon a Time in America', year: 1984 },\\r\\n  { title: 'Witness for the Prosecution', year: 1957 },\\r\\n  { title: 'Das Boot', year: 1981 },\\r\\n  { title: 'Citizen Kane', year: 1941 },\\r\\n  { title: 'North by Northwest', year: 1959 },\\r\\n  { title: 'Vertigo', year: 1958 },\\r\\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\\r\\n  { title: 'Reservoir Dogs', year: 1992 },\\r\\n  { title: 'Braveheart', year: 1995 },\\r\\n  { title: 'M', year: 1931 },\\r\\n  { title: 'Requiem for a Dream', year: 2000 },\\r\\n  { title: 'Amélie', year: 2001 },\\r\\n  { title: 'A Clockwork Orange', year: 1971 },\\r\\n  { title: 'Like Stars on Earth', year: 2007 },\\r\\n  { title: 'Taxi Driver', year: 1976 },\\r\\n  { title: 'Lawrence of Arabia', year: 1962 },\\r\\n  { title: 'Double Indemnity', year: 1944 },\\r\\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\\r\\n  { title: 'Amadeus', year: 1984 },\\r\\n  { title: 'To Kill a Mockingbird', year: 1962 },\\r\\n  { title: 'Toy Story 3', year: 2010 },\\r\\n  { title: 'Logan', year: 2017 },\\r\\n  { title: 'Full Metal Jacket', year: 1987 },\\r\\n  { title: 'Dangal', year: 2016 },\\r\\n  { title: 'The Sting', year: 1973 },\\r\\n  { title: '2001: A Space Odyssey', year: 1968 },\\r\\n  { title: \\\"Singin' in the Rain\\\", year: 1952 },\\r\\n  { title: 'Toy Story', year: 1995 },\\r\\n  { title: 'Bicycle Thieves', year: 1948 },\\r\\n  { title: 'The Kid', year: 1921 },\\r\\n  { title: 'Inglourious Basterds', year: 2009 },\\r\\n  { title: 'Snatch', year: 2000 },\\r\\n  { title: '3 Idiots', year: 2009 },\\r\\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\\r\\n];\\r\\n\";","export default \"/* eslint-disable no-use-before-define */\\r\\nimport React from 'react';\\r\\nimport useAutocomplete from '@material-ui/lab/useAutocomplete';\\r\\nimport { makeStyles } from '@material-ui/core/styles';\\r\\n\\r\\nconst useStyles = makeStyles(theme => ({\\r\\n  label: {\\r\\n    display: 'block',\\r\\n  },\\r\\n  input: {\\r\\n    width: 200,\\r\\n  },\\r\\n  listbox: {\\r\\n    width: 200,\\r\\n    margin: 0,\\r\\n    padding: 0,\\r\\n    zIndex: 1,\\r\\n    position: 'absolute',\\r\\n    listStyle: 'none',\\r\\n    backgroundColor: theme.palette.background.paper,\\r\\n    overflow: 'auto',\\r\\n    maxHeight: 200,\\r\\n    border: '1px solid rgba(0,0,0,.25)',\\r\\n    '& li[data-focus=\\\"true\\\"]': {\\r\\n      backgroundColor: '#4a8df6',\\r\\n      color: 'white',\\r\\n      cursor: 'pointer',\\r\\n    },\\r\\n    '& li:active': {\\r\\n      backgroundColor: '#2977f5',\\r\\n      color: 'white',\\r\\n    },\\r\\n  },\\r\\n}));\\r\\n\\r\\nexport default function UseAutocomplete() {\\r\\n  const classes = useStyles();\\r\\n  const {\\r\\n    getRootProps,\\r\\n    getInputLabelProps,\\r\\n    getInputProps,\\r\\n    getListboxProps,\\r\\n    getOptionProps,\\r\\n    groupedOptions,\\r\\n  } = useAutocomplete({\\r\\n    id: 'use-autocomplete-demo',\\r\\n    options: top100Films,\\r\\n    getOptionLabel: option => option.title,\\r\\n  });\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <div {...getRootProps()}>\\r\\n        <label className={classes.label} {...getInputLabelProps()}>\\r\\n          useAutocomplete\\r\\n        </label>\\r\\n        <input className={classes.input} {...getInputProps()} />\\r\\n      </div>\\r\\n      {groupedOptions.length > 0 ? (\\r\\n        <ul className={classes.listbox} {...getListboxProps()}>\\r\\n          {groupedOptions.map((option, index) => (\\r\\n            <li {...getOptionProps({ option, index })}>{option.title}</li>\\r\\n          ))}\\r\\n        </ul>\\r\\n      ) : null}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\\r\\nconst top100Films = [\\r\\n  { title: 'The Shawshank Redemption', year: 1994 },\\r\\n  { title: 'The Godfather', year: 1972 },\\r\\n  { title: 'The Godfather: Part II', year: 1974 },\\r\\n  { title: 'The Dark Knight', year: 2008 },\\r\\n  { title: '12 Angry Men', year: 1957 },\\r\\n  { title: \\\"Schindler's List\\\", year: 1993 },\\r\\n  { title: 'Pulp Fiction', year: 1994 },\\r\\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\\r\\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\\r\\n  { title: 'Fight Club', year: 1999 },\\r\\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\\r\\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\\r\\n  { title: 'Forrest Gump', year: 1994 },\\r\\n  { title: 'Inception', year: 2010 },\\r\\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\\r\\n  { title: \\\"One Flew Over the Cuckoo's Nest\\\", year: 1975 },\\r\\n  { title: 'Goodfellas', year: 1990 },\\r\\n  { title: 'The Matrix', year: 1999 },\\r\\n  { title: 'Seven Samurai', year: 1954 },\\r\\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\\r\\n  { title: 'City of God', year: 2002 },\\r\\n  { title: 'Se7en', year: 1995 },\\r\\n  { title: 'The Silence of the Lambs', year: 1991 },\\r\\n  { title: \\\"It's a Wonderful Life\\\", year: 1946 },\\r\\n  { title: 'Life Is Beautiful', year: 1997 },\\r\\n  { title: 'The Usual Suspects', year: 1995 },\\r\\n  { title: 'Léon: The Professional', year: 1994 },\\r\\n  { title: 'Spirited Away', year: 2001 },\\r\\n  { title: 'Saving Private Ryan', year: 1998 },\\r\\n  { title: 'Once Upon a Time in the West', year: 1968 },\\r\\n  { title: 'American History X', year: 1998 },\\r\\n  { title: 'Interstellar', year: 2014 },\\r\\n  { title: 'Casablanca', year: 1942 },\\r\\n  { title: 'City Lights', year: 1931 },\\r\\n  { title: 'Psycho', year: 1960 },\\r\\n  { title: 'The Green Mile', year: 1999 },\\r\\n  { title: 'The Intouchables', year: 2011 },\\r\\n  { title: 'Modern Times', year: 1936 },\\r\\n  { title: 'Raiders of the Lost Ark', year: 1981 },\\r\\n  { title: 'Rear Window', year: 1954 },\\r\\n  { title: 'The Pianist', year: 2002 },\\r\\n  { title: 'The Departed', year: 2006 },\\r\\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\\r\\n  { title: 'Back to the Future', year: 1985 },\\r\\n  { title: 'Whiplash', year: 2014 },\\r\\n  { title: 'Gladiator', year: 2000 },\\r\\n  { title: 'Memento', year: 2000 },\\r\\n  { title: 'The Prestige', year: 2006 },\\r\\n  { title: 'The Lion King', year: 1994 },\\r\\n  { title: 'Apocalypse Now', year: 1979 },\\r\\n  { title: 'Alien', year: 1979 },\\r\\n  { title: 'Sunset Boulevard', year: 1950 },\\r\\n  {\\r\\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\\r\\n    year: 1964,\\r\\n  },\\r\\n  { title: 'The Great Dictator', year: 1940 },\\r\\n  { title: 'Cinema Paradiso', year: 1988 },\\r\\n  { title: 'The Lives of Others', year: 2006 },\\r\\n  { title: 'Grave of the Fireflies', year: 1988 },\\r\\n  { title: 'Paths of Glory', year: 1957 },\\r\\n  { title: 'Django Unchained', year: 2012 },\\r\\n  { title: 'The Shining', year: 1980 },\\r\\n  { title: 'WALL·E', year: 2008 },\\r\\n  { title: 'American Beauty', year: 1999 },\\r\\n  { title: 'The Dark Knight Rises', year: 2012 },\\r\\n  { title: 'Princess Mononoke', year: 1997 },\\r\\n  { title: 'Aliens', year: 1986 },\\r\\n  { title: 'Oldboy', year: 2003 },\\r\\n  { title: 'Once Upon a Time in America', year: 1984 },\\r\\n  { title: 'Witness for the Prosecution', year: 1957 },\\r\\n  { title: 'Das Boot', year: 1981 },\\r\\n  { title: 'Citizen Kane', year: 1941 },\\r\\n  { title: 'North by Northwest', year: 1959 },\\r\\n  { title: 'Vertigo', year: 1958 },\\r\\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\\r\\n  { title: 'Reservoir Dogs', year: 1992 },\\r\\n  { title: 'Braveheart', year: 1995 },\\r\\n  { title: 'M', year: 1931 },\\r\\n  { title: 'Requiem for a Dream', year: 2000 },\\r\\n  { title: 'Amélie', year: 2001 },\\r\\n  { title: 'A Clockwork Orange', year: 1971 },\\r\\n  { title: 'Like Stars on Earth', year: 2007 },\\r\\n  { title: 'Taxi Driver', year: 1976 },\\r\\n  { title: 'Lawrence of Arabia', year: 1962 },\\r\\n  { title: 'Double Indemnity', year: 1944 },\\r\\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\\r\\n  { title: 'Amadeus', year: 1984 },\\r\\n  { title: 'To Kill a Mockingbird', year: 1962 },\\r\\n  { title: 'Toy Story 3', year: 2010 },\\r\\n  { title: 'Logan', year: 2017 },\\r\\n  { title: 'Full Metal Jacket', year: 1987 },\\r\\n  { title: 'Dangal', year: 2016 },\\r\\n  { title: 'The Sting', year: 1973 },\\r\\n  { title: '2001: A Space Odyssey', year: 1968 },\\r\\n  { title: \\\"Singin' in the Rain\\\", year: 1952 },\\r\\n  { title: 'Toy Story', year: 1995 },\\r\\n  { title: 'Bicycle Thieves', year: 1948 },\\r\\n  { title: 'The Kid', year: 1921 },\\r\\n  { title: 'Inglourious Basterds', year: 2009 },\\r\\n  { title: 'Snatch', year: 2000 },\\r\\n  { title: '3 Idiots', year: 2009 },\\r\\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\\r\\n];\\r\\n\";","export default \"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\nimport Autocomplete from '@material-ui/lab/Autocomplete';\\r\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\r\\nimport ListSubheader from '@material-ui/core/ListSubheader';\\r\\nimport { useTheme, makeStyles } from '@material-ui/core/styles';\\r\\nimport { VariableSizeList } from 'react-window';\\r\\nimport { Typography } from '@material-ui/core';\\r\\n\\r\\nconst LISTBOX_PADDING = 8; // px\\r\\n\\r\\nfunction renderRow(props) {\\r\\n  const { data, index, style } = props;\\r\\n  return React.cloneElement(data[index], {\\r\\n    style: {\\r\\n      ...style,\\r\\n      top: style.top + LISTBOX_PADDING,\\r\\n    },\\r\\n  });\\r\\n}\\r\\n\\r\\nconst OuterElementContext = React.createContext({});\\r\\n\\r\\nconst OuterElementType = React.forwardRef((props, ref) => {\\r\\n  const outerProps = React.useContext(OuterElementContext);\\r\\n  return <div ref={ref} {...props} {...outerProps} />;\\r\\n});\\r\\n\\r\\nfunction useResetCache(data) {\\r\\n  const ref = React.useRef(null);\\r\\n  React.useEffect(() => {\\r\\n    if (ref.current != null) {\\r\\n      ref.current.resetAfterIndex(0, true);\\r\\n    }\\r\\n  }, [data]);\\r\\n  return ref;\\r\\n}\\r\\n\\r\\n// Adapter for react-window\\r\\nconst ListboxComponent = React.forwardRef(function ListboxComponent(props, ref) {\\r\\n  const { children, ...other } = props;\\r\\n  const itemData = React.Children.toArray(children);\\r\\n  const theme = useTheme();\\r\\n  const smUp = useMediaQuery(theme.breakpoints.up('sm'), { noSsr: true });\\r\\n  const itemCount = itemData.length;\\r\\n  const itemSize = smUp ? 36 : 48;\\r\\n\\r\\n  const getChildSize = child => {\\r\\n    if (React.isValidElement(child) && child.type === ListSubheader) {\\r\\n      return 48;\\r\\n    }\\r\\n\\r\\n    return itemSize;\\r\\n  };\\r\\n\\r\\n  const getHeight = () => {\\r\\n    if (itemCount > 8) {\\r\\n      return 8 * itemSize;\\r\\n    }\\r\\n    return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\\r\\n  };\\r\\n\\r\\n  const gridRef = useResetCache(itemCount);\\r\\n\\r\\n  return (\\r\\n    <div ref={ref}>\\r\\n      <OuterElementContext.Provider value={other}>\\r\\n        <VariableSizeList\\r\\n          itemData={itemData}\\r\\n          height={getHeight() + 2 * LISTBOX_PADDING}\\r\\n          width=\\\"100%\\\"\\r\\n          ref={gridRef}\\r\\n          outerElementType={OuterElementType}\\r\\n          innerElementType=\\\"ul\\\"\\r\\n          itemSize={index => getChildSize(itemData[index])}\\r\\n          overscanCount={5}\\r\\n          itemCount={itemCount}>\\r\\n          {renderRow}\\r\\n        </VariableSizeList>\\r\\n      </OuterElementContext.Provider>\\r\\n    </div>\\r\\n  );\\r\\n});\\r\\n\\r\\nListboxComponent.propTypes = {\\r\\n  children: PropTypes.node,\\r\\n};\\r\\n\\r\\nfunction random(length) {\\r\\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\\r\\n  let result = '';\\r\\n\\r\\n  for (let i = 0; i < length; i += 1) {\\r\\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\\r\\n  }\\r\\n\\r\\n  return result;\\r\\n}\\r\\n\\r\\nconst useStyles = makeStyles({\\r\\n  listbox: {\\r\\n    boxSizing: 'border-box',\\r\\n    '& ul': {\\r\\n      padding: 0,\\r\\n      margin: 0,\\r\\n    },\\r\\n  },\\r\\n});\\r\\n\\r\\nconst OPTIONS = Array.from(new Array(10000))\\r\\n  .map(() => random(10 + Math.ceil(Math.random() * 20)))\\r\\n  .sort((a, b) => a.toUpperCase().localeCompare(b.toUpperCase()));\\r\\n\\r\\nconst renderGroup = params => [\\r\\n  <ListSubheader key={params.key} component=\\\"div\\\">\\r\\n    {params.group}\\r\\n  </ListSubheader>,\\r\\n  params.children,\\r\\n];\\r\\n\\r\\nexport default function Virtualize() {\\r\\n  const classes = useStyles();\\r\\n\\r\\n  return (\\r\\n    <Autocomplete\\r\\n      id=\\\"virtualize-demo\\\"\\r\\n      style={{ width: 300 }}\\r\\n      disableListWrap\\r\\n      classes={classes}\\r\\n      ListboxComponent={ListboxComponent}\\r\\n      renderGroup={renderGroup}\\r\\n      options={OPTIONS}\\r\\n      groupBy={option => option[0].toUpperCase()}\\r\\n      renderInput={params => <TextField {...params} variant=\\\"outlined\\\" label=\\\"10,000 options\\\" />}\\r\\n      renderOption={option => <Typography noWrap>{option}</Typography>}\\r\\n    />\\r\\n  );\\r\\n}\\r\\n\";","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nexport default function ComboBox() {\r\n  return (\r\n    <Autocomplete\r\n      id=\"combo-box-demo\"\r\n      options={top100Films}\r\n      getOptionLabel={option => option.title}\r\n      style={{ width: 300 }}\r\n      renderInput={params => <TextField {...params} label=\"Combo box\" variant=\"outlined\" />}\r\n    />\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  {\r\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    year: 1964,\r\n  },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nexport default function Playground() {\r\n  const defaultProps = {\r\n    options: top100Films,\r\n    getOptionLabel: option => option.title,\r\n  };\r\n\r\n  const flatProps = {\r\n    options: top100Films.map(option => option.title),\r\n  };\r\n\r\n  const [value, setValue] = React.useState(null);\r\n\r\n  return (\r\n    <div style={{ width: 300 }}>\r\n      <Autocomplete\r\n        {...defaultProps}\r\n        id=\"debug\"\r\n        debug\r\n        renderInput={params => <TextField {...params} label=\"debug\" margin=\"normal\" />}\r\n      />\r\n      <Autocomplete\r\n        {...defaultProps}\r\n        id=\"disable-close-on-select\"\r\n        disableCloseOnSelect\r\n        renderInput={params => <TextField {...params} label=\"disableCloseOnSelect\" margin=\"normal\" />}\r\n      />\r\n      <Autocomplete\r\n        {...defaultProps}\r\n        id=\"clear-on-escape\"\r\n        clearOnEscape\r\n        renderInput={params => <TextField {...params} label=\"clearOnEscape\" margin=\"normal\" />}\r\n      />\r\n      <Autocomplete\r\n        {...defaultProps}\r\n        id=\"disable-clearable\"\r\n        disableClearable\r\n        renderInput={params => <TextField {...params} label=\"disableClearable\" margin=\"normal\" />}\r\n      />\r\n      <Autocomplete\r\n        {...defaultProps}\r\n        id=\"include-input-in-list\"\r\n        includeInputInList\r\n        renderInput={params => <TextField {...params} label=\"includeInputInList\" margin=\"normal\" />}\r\n      />\r\n      <Autocomplete\r\n        {...flatProps}\r\n        id=\"flat-demo\"\r\n        renderInput={params => <TextField {...params} label=\"flat\" margin=\"normal\" />}\r\n      />\r\n      <Autocomplete\r\n        {...defaultProps}\r\n        id=\"controlled-demo\"\r\n        value={value}\r\n        onChange={(event, newValue) => {\r\n          setValue(newValue);\r\n        }}\r\n        renderInput={params => <TextField {...params} label=\"controlled\" margin=\"normal\" />}\r\n      />\r\n      <Autocomplete\r\n        {...defaultProps}\r\n        id=\"auto-complete\"\r\n        autoComplete\r\n        includeInputInList\r\n        renderInput={params => <TextField {...params} label=\"autoComplete\" margin=\"normal\" />}\r\n      />\r\n      <Autocomplete\r\n        {...defaultProps}\r\n        id=\"disable-list-wrap\"\r\n        disableListWrap\r\n        renderInput={params => <TextField {...params} label=\"disableListWrap\" margin=\"normal\" />}\r\n      />\r\n      <Autocomplete\r\n        {...defaultProps}\r\n        id=\"open-on-focus\"\r\n        openOnFocus\r\n        renderInput={params => <TextField {...params} label=\"openOnFocus\" margin=\"normal\" />}\r\n      />\r\n      <Autocomplete\r\n        {...defaultProps}\r\n        id=\"auto-highlight\"\r\n        autoHighlight\r\n        renderInput={params => <TextField {...params} label=\"autoHighlight\" margin=\"normal\" />}\r\n      />\r\n      <Autocomplete\r\n        {...defaultProps}\r\n        id=\"auto-select\"\r\n        autoSelect\r\n        renderInput={params => <TextField {...params} label=\"autoSelect\" margin=\"normal\" />}\r\n      />\r\n      <Autocomplete\r\n        {...defaultProps}\r\n        id=\"disabled\"\r\n        disabled\r\n        renderInput={params => <TextField {...params} label=\"disabled\" margin=\"normal\" />}\r\n      />\r\n      <Autocomplete\r\n        {...defaultProps}\r\n        id=\"disable-portal\"\r\n        disablePortal\r\n        renderInput={params => <TextField {...params} label=\"disablePortal\" margin=\"normal\" />}\r\n      />\r\n      <Autocomplete\r\n        {...defaultProps}\r\n        id=\"blur-on-select\"\r\n        blurOnSelect\r\n        renderInput={params => <TextField {...params} label=\"blurOnSelect\" margin=\"normal\" />}\r\n      />\r\n      <Autocomplete\r\n        {...defaultProps}\r\n        id=\"clear-on-blur\"\r\n        clearOnBlur\r\n        renderInput={params => <TextField {...params} label=\"clearOnBlur\" margin=\"normal\" />}\r\n      />\r\n      <Autocomplete\r\n        {...defaultProps}\r\n        id=\"select-on-focus\"\r\n        selectOnFocus\r\n        renderInput={params => <TextField {...params} label=\"selectOnFocus\" margin=\"normal\" />}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  {\r\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    year: 1964,\r\n  },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// ISO 3166-1 alpha-2\r\n// ⚠️ No support for IE 11\r\nfunction countryToFlag(isoCode) {\r\n  return typeof String.fromCodePoint !== 'undefined'\r\n    ? isoCode.toUpperCase().replace(/./g, char => String.fromCodePoint(char.charCodeAt(0) + 127397))\r\n    : isoCode;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  option: {\r\n    fontSize: 15,\r\n    '& > span': {\r\n      marginRight: 10,\r\n      fontSize: 18,\r\n    },\r\n  },\r\n});\r\n\r\nexport default function CountrySelect() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Autocomplete\r\n      id=\"country-select-demo\"\r\n      style={{ width: 300 }}\r\n      options={countries}\r\n      classes={{\r\n        option: classes.option,\r\n      }}\r\n      autoHighlight\r\n      getOptionLabel={option => option.label}\r\n      renderOption={option => (\r\n        <React.Fragment>\r\n          <span>{countryToFlag(option.code)}</span>\r\n          {option.label} ({option.code}) +{option.phone}\r\n        </React.Fragment>\r\n      )}\r\n      renderInput={params => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Choose a country\"\r\n          variant=\"outlined\"\r\n          inputProps={{\r\n            ...params.inputProps,\r\n            autoComplete: 'new-password', // disable autocomplete and autofill\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\n// From https://bitbucket.org/atlassian/atlaskit-mk-2/raw/4ad0e56649c3e6c973e226b7efaeb28cb240ccb0/packages/core/select/src/data/countries.js\r\nconst countries = [\r\n  { code: 'AD', label: 'Andorra', phone: '376' },\r\n  { code: 'AE', label: 'United Arab Emirates', phone: '971' },\r\n  { code: 'AF', label: 'Afghanistan', phone: '93' },\r\n  { code: 'AG', label: 'Antigua and Barbuda', phone: '1-268' },\r\n  { code: 'AI', label: 'Anguilla', phone: '1-264' },\r\n  { code: 'AL', label: 'Albania', phone: '355' },\r\n  { code: 'AM', label: 'Armenia', phone: '374' },\r\n  { code: 'AO', label: 'Angola', phone: '244' },\r\n  { code: 'AQ', label: 'Antarctica', phone: '672' },\r\n  { code: 'AR', label: 'Argentina', phone: '54' },\r\n  { code: 'AS', label: 'American Samoa', phone: '1-684' },\r\n  { code: 'AT', label: 'Austria', phone: '43' },\r\n  { code: 'AU', label: 'Australia', phone: '61', suggested: true },\r\n  { code: 'AW', label: 'Aruba', phone: '297' },\r\n  { code: 'AX', label: 'Alland Islands', phone: '358' },\r\n  { code: 'AZ', label: 'Azerbaijan', phone: '994' },\r\n  { code: 'BA', label: 'Bosnia and Herzegovina', phone: '387' },\r\n  { code: 'BB', label: 'Barbados', phone: '1-246' },\r\n  { code: 'BD', label: 'Bangladesh', phone: '880' },\r\n  { code: 'BE', label: 'Belgium', phone: '32' },\r\n  { code: 'BF', label: 'Burkina Faso', phone: '226' },\r\n  { code: 'BG', label: 'Bulgaria', phone: '359' },\r\n  { code: 'BH', label: 'Bahrain', phone: '973' },\r\n  { code: 'BI', label: 'Burundi', phone: '257' },\r\n  { code: 'BJ', label: 'Benin', phone: '229' },\r\n  { code: 'BL', label: 'Saint Barthelemy', phone: '590' },\r\n  { code: 'BM', label: 'Bermuda', phone: '1-441' },\r\n  { code: 'BN', label: 'Brunei Darussalam', phone: '673' },\r\n  { code: 'BO', label: 'Bolivia', phone: '591' },\r\n  { code: 'BR', label: 'Brazil', phone: '55' },\r\n  { code: 'BS', label: 'Bahamas', phone: '1-242' },\r\n  { code: 'BT', label: 'Bhutan', phone: '975' },\r\n  { code: 'BV', label: 'Bouvet Island', phone: '47' },\r\n  { code: 'BW', label: 'Botswana', phone: '267' },\r\n  { code: 'BY', label: 'Belarus', phone: '375' },\r\n  { code: 'BZ', label: 'Belize', phone: '501' },\r\n  { code: 'CA', label: 'Canada', phone: '1', suggested: true },\r\n  { code: 'CC', label: 'Cocos (Keeling) Islands', phone: '61' },\r\n  { code: 'CD', label: 'Congo, Democratic Republic of the', phone: '243' },\r\n  { code: 'CF', label: 'Central African Republic', phone: '236' },\r\n  { code: 'CG', label: 'Congo, Republic of the', phone: '242' },\r\n  { code: 'CH', label: 'Switzerland', phone: '41' },\r\n  { code: 'CI', label: \"Cote d'Ivoire\", phone: '225' },\r\n  { code: 'CK', label: 'Cook Islands', phone: '682' },\r\n  { code: 'CL', label: 'Chile', phone: '56' },\r\n  { code: 'CM', label: 'Cameroon', phone: '237' },\r\n  { code: 'CN', label: 'China', phone: '86' },\r\n  { code: 'CO', label: 'Colombia', phone: '57' },\r\n  { code: 'CR', label: 'Costa Rica', phone: '506' },\r\n  { code: 'CU', label: 'Cuba', phone: '53' },\r\n  { code: 'CV', label: 'Cape Verde', phone: '238' },\r\n  { code: 'CW', label: 'Curacao', phone: '599' },\r\n  { code: 'CX', label: 'Christmas Island', phone: '61' },\r\n  { code: 'CY', label: 'Cyprus', phone: '357' },\r\n  { code: 'CZ', label: 'Czech Republic', phone: '420' },\r\n  { code: 'DE', label: 'Germany', phone: '49', suggested: true },\r\n  { code: 'DJ', label: 'Djibouti', phone: '253' },\r\n  { code: 'DK', label: 'Denmark', phone: '45' },\r\n  { code: 'DM', label: 'Dominica', phone: '1-767' },\r\n  { code: 'DO', label: 'Dominican Republic', phone: '1-809' },\r\n  { code: 'DZ', label: 'Algeria', phone: '213' },\r\n  { code: 'EC', label: 'Ecuador', phone: '593' },\r\n  { code: 'EE', label: 'Estonia', phone: '372' },\r\n  { code: 'EG', label: 'Egypt', phone: '20' },\r\n  { code: 'EH', label: 'Western Sahara', phone: '212' },\r\n  { code: 'ER', label: 'Eritrea', phone: '291' },\r\n  { code: 'ES', label: 'Spain', phone: '34' },\r\n  { code: 'ET', label: 'Ethiopia', phone: '251' },\r\n  { code: 'FI', label: 'Finland', phone: '358' },\r\n  { code: 'FJ', label: 'Fiji', phone: '679' },\r\n  { code: 'FK', label: 'Falkland Islands (Malvinas)', phone: '500' },\r\n  { code: 'FM', label: 'Micronesia, Federated States of', phone: '691' },\r\n  { code: 'FO', label: 'Faroe Islands', phone: '298' },\r\n  { code: 'FR', label: 'France', phone: '33', suggested: true },\r\n  { code: 'GA', label: 'Gabon', phone: '241' },\r\n  { code: 'GB', label: 'United Kingdom', phone: '44' },\r\n  { code: 'GD', label: 'Grenada', phone: '1-473' },\r\n  { code: 'GE', label: 'Georgia', phone: '995' },\r\n  { code: 'GF', label: 'French Guiana', phone: '594' },\r\n  { code: 'GG', label: 'Guernsey', phone: '44' },\r\n  { code: 'GH', label: 'Ghana', phone: '233' },\r\n  { code: 'GI', label: 'Gibraltar', phone: '350' },\r\n  { code: 'GL', label: 'Greenland', phone: '299' },\r\n  { code: 'GM', label: 'Gambia', phone: '220' },\r\n  { code: 'GN', label: 'Guinea', phone: '224' },\r\n  { code: 'GP', label: 'Guadeloupe', phone: '590' },\r\n  { code: 'GQ', label: 'Equatorial Guinea', phone: '240' },\r\n  { code: 'GR', label: 'Greece', phone: '30' },\r\n  {\r\n    code: 'GS',\r\n    label: 'South Georgia and the South Sandwich Islands',\r\n    phone: '500',\r\n  },\r\n  { code: 'GT', label: 'Guatemala', phone: '502' },\r\n  { code: 'GU', label: 'Guam', phone: '1-671' },\r\n  { code: 'GW', label: 'Guinea-Bissau', phone: '245' },\r\n  { code: 'GY', label: 'Guyana', phone: '592' },\r\n  { code: 'HK', label: 'Hong Kong', phone: '852' },\r\n  { code: 'HM', label: 'Heard Island and McDonald Islands', phone: '672' },\r\n  { code: 'HN', label: 'Honduras', phone: '504' },\r\n  { code: 'HR', label: 'Croatia', phone: '385' },\r\n  { code: 'HT', label: 'Haiti', phone: '509' },\r\n  { code: 'HU', label: 'Hungary', phone: '36' },\r\n  { code: 'ID', label: 'Indonesia', phone: '62' },\r\n  { code: 'IE', label: 'Ireland', phone: '353' },\r\n  { code: 'IL', label: 'Israel', phone: '972' },\r\n  { code: 'IM', label: 'Isle of Man', phone: '44' },\r\n  { code: 'IN', label: 'India', phone: '91' },\r\n  { code: 'IO', label: 'British Indian Ocean Territory', phone: '246' },\r\n  { code: 'IQ', label: 'Iraq', phone: '964' },\r\n  { code: 'IR', label: 'Iran, Islamic Republic of', phone: '98' },\r\n  { code: 'IS', label: 'Iceland', phone: '354' },\r\n  { code: 'IT', label: 'Italy', phone: '39' },\r\n  { code: 'JE', label: 'Jersey', phone: '44' },\r\n  { code: 'JM', label: 'Jamaica', phone: '1-876' },\r\n  { code: 'JO', label: 'Jordan', phone: '962' },\r\n  { code: 'JP', label: 'Japan', phone: '81', suggested: true },\r\n  { code: 'KE', label: 'Kenya', phone: '254' },\r\n  { code: 'KG', label: 'Kyrgyzstan', phone: '996' },\r\n  { code: 'KH', label: 'Cambodia', phone: '855' },\r\n  { code: 'KI', label: 'Kiribati', phone: '686' },\r\n  { code: 'KM', label: 'Comoros', phone: '269' },\r\n  { code: 'KN', label: 'Saint Kitts and Nevis', phone: '1-869' },\r\n  { code: 'KP', label: \"Korea, Democratic People's Republic of\", phone: '850' },\r\n  { code: 'KR', label: 'Korea, Republic of', phone: '82' },\r\n  { code: 'KW', label: 'Kuwait', phone: '965' },\r\n  { code: 'KY', label: 'Cayman Islands', phone: '1-345' },\r\n  { code: 'KZ', label: 'Kazakhstan', phone: '7' },\r\n  { code: 'LA', label: \"Lao People's Democratic Republic\", phone: '856' },\r\n  { code: 'LB', label: 'Lebanon', phone: '961' },\r\n  { code: 'LC', label: 'Saint Lucia', phone: '1-758' },\r\n  { code: 'LI', label: 'Liechtenstein', phone: '423' },\r\n  { code: 'LK', label: 'Sri Lanka', phone: '94' },\r\n  { code: 'LR', label: 'Liberia', phone: '231' },\r\n  { code: 'LS', label: 'Lesotho', phone: '266' },\r\n  { code: 'LT', label: 'Lithuania', phone: '370' },\r\n  { code: 'LU', label: 'Luxembourg', phone: '352' },\r\n  { code: 'LV', label: 'Latvia', phone: '371' },\r\n  { code: 'LY', label: 'Libya', phone: '218' },\r\n  { code: 'MA', label: 'Morocco', phone: '212' },\r\n  { code: 'MC', label: 'Monaco', phone: '377' },\r\n  { code: 'MD', label: 'Moldova, Republic of', phone: '373' },\r\n  { code: 'ME', label: 'Montenegro', phone: '382' },\r\n  { code: 'MF', label: 'Saint Martin (French part)', phone: '590' },\r\n  { code: 'MG', label: 'Madagascar', phone: '261' },\r\n  { code: 'MH', label: 'Marshall Islands', phone: '692' },\r\n  {\r\n    code: 'MK',\r\n    label: 'Macedonia, the Former Yugoslav Republic of',\r\n    phone: '389',\r\n  },\r\n  { code: 'ML', label: 'Mali', phone: '223' },\r\n  { code: 'MM', label: 'Myanmar', phone: '95' },\r\n  { code: 'MN', label: 'Mongolia', phone: '976' },\r\n  { code: 'MO', label: 'Macao', phone: '853' },\r\n  { code: 'MP', label: 'Northern Mariana Islands', phone: '1-670' },\r\n  { code: 'MQ', label: 'Martinique', phone: '596' },\r\n  { code: 'MR', label: 'Mauritania', phone: '222' },\r\n  { code: 'MS', label: 'Montserrat', phone: '1-664' },\r\n  { code: 'MT', label: 'Malta', phone: '356' },\r\n  { code: 'MU', label: 'Mauritius', phone: '230' },\r\n  { code: 'MV', label: 'Maldives', phone: '960' },\r\n  { code: 'MW', label: 'Malawi', phone: '265' },\r\n  { code: 'MX', label: 'Mexico', phone: '52' },\r\n  { code: 'MY', label: 'Malaysia', phone: '60' },\r\n  { code: 'MZ', label: 'Mozambique', phone: '258' },\r\n  { code: 'NA', label: 'Namibia', phone: '264' },\r\n  { code: 'NC', label: 'New Caledonia', phone: '687' },\r\n  { code: 'NE', label: 'Niger', phone: '227' },\r\n  { code: 'NF', label: 'Norfolk Island', phone: '672' },\r\n  { code: 'NG', label: 'Nigeria', phone: '234' },\r\n  { code: 'NI', label: 'Nicaragua', phone: '505' },\r\n  { code: 'NL', label: 'Netherlands', phone: '31' },\r\n  { code: 'NO', label: 'Norway', phone: '47' },\r\n  { code: 'NP', label: 'Nepal', phone: '977' },\r\n  { code: 'NR', label: 'Nauru', phone: '674' },\r\n  { code: 'NU', label: 'Niue', phone: '683' },\r\n  { code: 'NZ', label: 'New Zealand', phone: '64' },\r\n  { code: 'OM', label: 'Oman', phone: '968' },\r\n  { code: 'PA', label: 'Panama', phone: '507' },\r\n  { code: 'PE', label: 'Peru', phone: '51' },\r\n  { code: 'PF', label: 'French Polynesia', phone: '689' },\r\n  { code: 'PG', label: 'Papua New Guinea', phone: '675' },\r\n  { code: 'PH', label: 'Philippines', phone: '63' },\r\n  { code: 'PK', label: 'Pakistan', phone: '92' },\r\n  { code: 'PL', label: 'Poland', phone: '48' },\r\n  { code: 'PM', label: 'Saint Pierre and Miquelon', phone: '508' },\r\n  { code: 'PN', label: 'Pitcairn', phone: '870' },\r\n  { code: 'PR', label: 'Puerto Rico', phone: '1' },\r\n  { code: 'PS', label: 'Palestine, State of', phone: '970' },\r\n  { code: 'PT', label: 'Portugal', phone: '351' },\r\n  { code: 'PW', label: 'Palau', phone: '680' },\r\n  { code: 'PY', label: 'Paraguay', phone: '595' },\r\n  { code: 'QA', label: 'Qatar', phone: '974' },\r\n  { code: 'RE', label: 'Reunion', phone: '262' },\r\n  { code: 'RO', label: 'Romania', phone: '40' },\r\n  { code: 'RS', label: 'Serbia', phone: '381' },\r\n  { code: 'RU', label: 'Russian Federation', phone: '7' },\r\n  { code: 'RW', label: 'Rwanda', phone: '250' },\r\n  { code: 'SA', label: 'Saudi Arabia', phone: '966' },\r\n  { code: 'SB', label: 'Solomon Islands', phone: '677' },\r\n  { code: 'SC', label: 'Seychelles', phone: '248' },\r\n  { code: 'SD', label: 'Sudan', phone: '249' },\r\n  { code: 'SE', label: 'Sweden', phone: '46' },\r\n  { code: 'SG', label: 'Singapore', phone: '65' },\r\n  { code: 'SH', label: 'Saint Helena', phone: '290' },\r\n  { code: 'SI', label: 'Slovenia', phone: '386' },\r\n  { code: 'SJ', label: 'Svalbard and Jan Mayen', phone: '47' },\r\n  { code: 'SK', label: 'Slovakia', phone: '421' },\r\n  { code: 'SL', label: 'Sierra Leone', phone: '232' },\r\n  { code: 'SM', label: 'San Marino', phone: '378' },\r\n  { code: 'SN', label: 'Senegal', phone: '221' },\r\n  { code: 'SO', label: 'Somalia', phone: '252' },\r\n  { code: 'SR', label: 'Suriname', phone: '597' },\r\n  { code: 'SS', label: 'South Sudan', phone: '211' },\r\n  { code: 'ST', label: 'Sao Tome and Principe', phone: '239' },\r\n  { code: 'SV', label: 'El Salvador', phone: '503' },\r\n  { code: 'SX', label: 'Sint Maarten (Dutch part)', phone: '1-721' },\r\n  { code: 'SY', label: 'Syrian Arab Republic', phone: '963' },\r\n  { code: 'SZ', label: 'Swaziland', phone: '268' },\r\n  { code: 'TC', label: 'Turks and Caicos Islands', phone: '1-649' },\r\n  { code: 'TD', label: 'Chad', phone: '235' },\r\n  { code: 'TF', label: 'French Southern Territories', phone: '262' },\r\n  { code: 'TG', label: 'Togo', phone: '228' },\r\n  { code: 'TH', label: 'Thailand', phone: '66' },\r\n  { code: 'TJ', label: 'Tajikistan', phone: '992' },\r\n  { code: 'TK', label: 'Tokelau', phone: '690' },\r\n  { code: 'TL', label: 'Timor-Leste', phone: '670' },\r\n  { code: 'TM', label: 'Turkmenistan', phone: '993' },\r\n  { code: 'TN', label: 'Tunisia', phone: '216' },\r\n  { code: 'TO', label: 'Tonga', phone: '676' },\r\n  { code: 'TR', label: 'Turkey', phone: '90' },\r\n  { code: 'TT', label: 'Trinidad and Tobago', phone: '1-868' },\r\n  { code: 'TV', label: 'Tuvalu', phone: '688' },\r\n  { code: 'TW', label: 'Taiwan, Province of China', phone: '886' },\r\n  { code: 'TZ', label: 'United Republic of Tanzania', phone: '255' },\r\n  { code: 'UA', label: 'Ukraine', phone: '380' },\r\n  { code: 'UG', label: 'Uganda', phone: '256' },\r\n  { code: 'US', label: 'United States', phone: '1', suggested: true },\r\n  { code: 'UY', label: 'Uruguay', phone: '598' },\r\n  { code: 'UZ', label: 'Uzbekistan', phone: '998' },\r\n  { code: 'VA', label: 'Holy See (Vatican City State)', phone: '379' },\r\n  { code: 'VC', label: 'Saint Vincent and the Grenadines', phone: '1-784' },\r\n  { code: 'VE', label: 'Venezuela', phone: '58' },\r\n  { code: 'VG', label: 'British Virgin Islands', phone: '1-284' },\r\n  { code: 'VI', label: 'US Virgin Islands', phone: '1-340' },\r\n  { code: 'VN', label: 'Vietnam', phone: '84' },\r\n  { code: 'VU', label: 'Vanuatu', phone: '678' },\r\n  { code: 'WF', label: 'Wallis and Futuna', phone: '681' },\r\n  { code: 'WS', label: 'Samoa', phone: '685' },\r\n  { code: 'XK', label: 'Kosovo', phone: '383' },\r\n  { code: 'YE', label: 'Yemen', phone: '967' },\r\n  { code: 'YT', label: 'Mayotte', phone: '262' },\r\n  { code: 'ZA', label: 'South Africa', phone: '27' },\r\n  { code: 'ZM', label: 'Zambia', phone: '260' },\r\n  { code: 'ZW', label: 'Zimbabwe', phone: '263' },\r\n];\r\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nconst options = ['Option 1', 'Option 2'];\r\n\r\nexport default function ControllableStates() {\r\n  const [value, setValue] = React.useState(options[0]);\r\n  const [inputValue, setInputValue] = React.useState('');\r\n\r\n  return (\r\n    <div>\r\n      <div>{`value: ${value !== null ? `'${value}'` : 'null'}`}</div>\r\n      <div>{`inputValue: '${inputValue}'`}</div>\r\n      <br />\r\n      <Autocomplete\r\n        value={value}\r\n        onChange={(event, newValue) => {\r\n          setValue(newValue);\r\n        }}\r\n        inputValue={inputValue}\r\n        onInputChange={(event, newInputValue) => {\r\n          setInputValue(newInputValue);\r\n        }}\r\n        id=\"controllable-states-demo\"\r\n        options={options}\r\n        style={{ width: 300 }}\r\n        renderInput={params => <TextField {...params} label=\"Controllable\" variant=\"outlined\" />}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nexport default function FreeSolo() {\r\n  return (\r\n    <div style={{ width: 300 }}>\r\n      <Autocomplete\r\n        id=\"free-solo-demo\"\r\n        freeSolo\r\n        options={top100Films.map(option => option.title)}\r\n        renderInput={params => <TextField {...params} label=\"freeSolo\" margin=\"normal\" variant=\"outlined\" />}\r\n      />\r\n      <Autocomplete\r\n        freeSolo\r\n        id=\"free-solo-2-demo\"\r\n        disableClearable\r\n        options={top100Films.map(option => option.title)}\r\n        renderInput={params => (\r\n          <TextField\r\n            {...params}\r\n            label=\"Search input\"\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            InputProps={{ ...params.InputProps, type: 'search' }}\r\n          />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  {\r\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    year: 1964,\r\n  },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\n\r\nconst filter = createFilterOptions();\r\n\r\nexport default function FreeSoloCreateOption() {\r\n  const [value, setValue] = React.useState(null);\r\n\r\n  return (\r\n    <Autocomplete\r\n      value={value}\r\n      onChange={(event, newValue) => {\r\n        if (typeof newValue === 'string') {\r\n          setValue({\r\n            title: newValue,\r\n          });\r\n        } else if (newValue && newValue.inputValue) {\r\n          // Create a new value from the user input\r\n          setValue({\r\n            title: newValue.inputValue,\r\n          });\r\n        } else {\r\n          setValue(newValue);\r\n        }\r\n      }}\r\n      filterOptions={(options, params) => {\r\n        const filtered = filter(options, params);\r\n\r\n        // Suggest the creation of a new value\r\n        if (params.inputValue !== '') {\r\n          filtered.push({\r\n            inputValue: params.inputValue,\r\n            title: `Add \"${params.inputValue}\"`,\r\n          });\r\n        }\r\n\r\n        return filtered;\r\n      }}\r\n      selectOnFocus\r\n      clearOnBlur\r\n      handleHomeEndKeys\r\n      id=\"free-solo-with-text-demo\"\r\n      options={top100Films}\r\n      getOptionLabel={option => {\r\n        // Value selected with enter, right from the input\r\n        if (typeof option === 'string') {\r\n          return option;\r\n        }\r\n        // Add \"xxx\" option created dynamically\r\n        if (option.inputValue) {\r\n          return option.inputValue;\r\n        }\r\n        // Regular option\r\n        return option.title;\r\n      }}\r\n      renderOption={option => option.title}\r\n      style={{ width: 300 }}\r\n      freeSolo\r\n      renderInput={params => <TextField {...params} label=\"Free solo with text demo\" variant=\"outlined\" />}\r\n    />\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  {\r\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    year: 1964,\r\n  },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\n\r\nconst filter = createFilterOptions();\r\n\r\nexport default function FreeSoloCreateOptionDialog() {\r\n  const [value, setValue] = React.useState(null);\r\n  const [open, toggleOpen] = React.useState(false);\r\n\r\n  const handleClose = () => {\r\n    setDialogValue({\r\n      title: '',\r\n      year: '',\r\n    });\r\n\r\n    toggleOpen(false);\r\n  };\r\n\r\n  const [dialogValue, setDialogValue] = React.useState({\r\n    title: '',\r\n    year: '',\r\n  });\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    setValue({\r\n      title: dialogValue.title,\r\n      year: parseInt(dialogValue.year, 10),\r\n    });\r\n\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Autocomplete\r\n        value={value}\r\n        onChange={(event, newValue) => {\r\n          if (typeof newValue === 'string') {\r\n            // timeout to avoid instant validation of the dialog's form.\r\n            setTimeout(() => {\r\n              toggleOpen(true);\r\n              setDialogValue({\r\n                title: newValue,\r\n                year: '',\r\n              });\r\n            });\r\n          } else if (newValue && newValue.inputValue) {\r\n            toggleOpen(true);\r\n            setDialogValue({\r\n              title: newValue.inputValue,\r\n              year: '',\r\n            });\r\n          } else {\r\n            setValue(newValue);\r\n          }\r\n        }}\r\n        filterOptions={(options, params) => {\r\n          const filtered = filter(options, params);\r\n\r\n          if (params.inputValue !== '') {\r\n            filtered.push({\r\n              inputValue: params.inputValue,\r\n              title: `Add \"${params.inputValue}\"`,\r\n            });\r\n          }\r\n\r\n          return filtered;\r\n        }}\r\n        id=\"free-solo-dialog-demo\"\r\n        options={top100Films}\r\n        getOptionLabel={option => {\r\n          // e.g value selected with enter, right from the input\r\n          if (typeof option === 'string') {\r\n            return option;\r\n          }\r\n          if (option.inputValue) {\r\n            return option.inputValue;\r\n          }\r\n          return option.title;\r\n        }}\r\n        selectOnFocus\r\n        clearOnBlur\r\n        handleHomeEndKeys\r\n        renderOption={option => option.title}\r\n        style={{ width: 300 }}\r\n        freeSolo\r\n        renderInput={params => <TextField {...params} label=\"Free solo dialog\" variant=\"outlined\" />}\r\n      />\r\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <form onSubmit={handleSubmit}>\r\n          <DialogTitle id=\"form-dialog-title\">Add a new film</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>Did you miss any film in our list? Please, add it!</DialogContentText>\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              id=\"name\"\r\n              value={dialogValue.title}\r\n              onChange={event => setDialogValue({ ...dialogValue, title: event.target.value })}\r\n              label=\"title\"\r\n              type=\"text\"\r\n            />\r\n            <TextField\r\n              margin=\"dense\"\r\n              id=\"name\"\r\n              value={dialogValue.year}\r\n              onChange={event => setDialogValue({ ...dialogValue, year: event.target.value })}\r\n              label=\"year\"\r\n              type=\"number\"\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Cancel\r\n            </Button>\r\n            <Button type=\"submit\" color=\"primary\">\r\n              Add\r\n            </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  {\r\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    year: 1964,\r\n  },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nexport default function Grouped() {\r\n  const options = top100Films.map(option => {\r\n    const firstLetter = option.title[0].toUpperCase();\r\n    return {\r\n      firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter,\r\n      ...option,\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Autocomplete\r\n      id=\"grouped-demo\"\r\n      options={options.sort((a, b) => -b.firstLetter.localeCompare(a.firstLetter))}\r\n      groupBy={option => option.firstLetter}\r\n      getOptionLabel={option => option.title}\r\n      style={{ width: 300 }}\r\n      renderInput={params => <TextField {...params} label=\"With categories\" variant=\"outlined\" />}\r\n    />\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  {\r\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    year: 1964,\r\n  },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nexport default function DisabledOptions() {\r\n  return (\r\n    <Autocomplete\r\n      id=\"disabled-options-demo\"\r\n      options={timeSlots}\r\n      getOptionDisabled={option => option === timeSlots[0] || option === timeSlots[2]}\r\n      style={{ width: 300 }}\r\n      renderInput={params => <TextField {...params} label=\"Disabled options\" variant=\"outlined\" />}\r\n    />\r\n  );\r\n}\r\n\r\n// One time slot every 30 minutes.\r\nconst timeSlots = Array.from(new Array(24 * 2)).map(\r\n  (_, index) => `${index < 20 ? '0' : ''}${Math.floor(index / 2)}:${index % 2 === 0 ? '00' : '30'}`,\r\n);\r\n","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport useAutocomplete from '@material-ui/lab/useAutocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  label: {\r\n    display: 'block',\r\n  },\r\n  input: {\r\n    width: 200,\r\n  },\r\n  listbox: {\r\n    width: 200,\r\n    margin: 0,\r\n    padding: 0,\r\n    zIndex: 1,\r\n    position: 'absolute',\r\n    listStyle: 'none',\r\n    backgroundColor: theme.palette.background.paper,\r\n    overflow: 'auto',\r\n    maxHeight: 200,\r\n    border: '1px solid rgba(0,0,0,.25)',\r\n    '& li[data-focus=\"true\"]': {\r\n      backgroundColor: '#4a8df6',\r\n      color: 'white',\r\n      cursor: 'pointer',\r\n    },\r\n    '& li:active': {\r\n      backgroundColor: '#2977f5',\r\n      color: 'white',\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function UseAutocomplete() {\r\n  const classes = useStyles();\r\n  const {\r\n    getRootProps,\r\n    getInputLabelProps,\r\n    getInputProps,\r\n    getListboxProps,\r\n    getOptionProps,\r\n    groupedOptions,\r\n  } = useAutocomplete({\r\n    id: 'use-autocomplete-demo',\r\n    options: top100Films,\r\n    getOptionLabel: option => option.title,\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div {...getRootProps()}>\r\n        <label className={classes.label} {...getInputLabelProps()}>\r\n          useAutocomplete\r\n        </label>\r\n        <input className={classes.input} {...getInputProps()} />\r\n      </div>\r\n      {groupedOptions.length > 0 ? (\r\n        <ul className={classes.listbox} {...getListboxProps()}>\r\n          {groupedOptions.map((option, index) => (\r\n            <li {...getOptionProps({ option, index })}>{option.title}</li>\r\n          ))}\r\n        </ul>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  {\r\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    year: 1964,\r\n  },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport useAutocomplete from '@material-ui/lab/useAutocomplete';\r\nimport NoSsr from '@material-ui/core/NoSsr';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport styled from 'styled-components';\r\n\r\nconst Label = styled('label')`\r\n  padding: 0 0 4px;\r\n  line-height: 1.5;\r\n  display: block;\r\n`;\r\n\r\nconst InputWrapper = styled('div')`\r\n  width: 300px;\r\n  border: 1px solid #d9d9d9;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n  padding: 1px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n\r\n  &:hover {\r\n    border-color: #40a9ff;\r\n  }\r\n\r\n  &.focused {\r\n    border-color: #40a9ff;\r\n    box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\r\n  }\r\n\r\n  & input {\r\n    font-size: 14px;\r\n    height: 30px;\r\n    box-sizing: border-box;\r\n    padding: 4px 6px;\r\n    width: 0;\r\n    min-width: 30px;\r\n    flex-grow: 1;\r\n    border: 0;\r\n    margin: 0;\r\n    outline: 0;\r\n  }\r\n`;\r\n\r\nconst Tag = styled(({ label, onDelete, ...props }) => (\r\n  <div {...props}>\r\n    <span>{label}</span>\r\n    <CloseIcon onClick={onDelete} />\r\n  </div>\r\n))`\r\n  display: flex;\r\n  align-items: center;\r\n  height: 24px;\r\n  margin: 2px;\r\n  line-height: 22px;\r\n  background-color: #fafafa;\r\n  border: 1px solid #e8e8e8;\r\n  border-radius: 2px;\r\n  box-sizing: content-box;\r\n  padding: 0 4px 0 10px;\r\n  outline: 0;\r\n  overflow: hidden;\r\n\r\n  &:focus {\r\n    border-color: #40a9ff;\r\n    background-color: #e6f7ff;\r\n  }\r\n\r\n  & span {\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n  }\r\n\r\n  & svg {\r\n    font-size: 12px;\r\n    cursor: pointer;\r\n    padding: 4px;\r\n  }\r\n`;\r\n\r\nconst Listbox = styled('ul')`\r\n  width: 300px;\r\n  margin: 2px 0 0;\r\n  padding: 0;\r\n  position: absolute;\r\n  list-style: none;\r\n  background-color: #fff;\r\n  overflow: auto;\r\n  max-height: 250px;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\r\n  z-index: 1;\r\n\r\n  & li {\r\n    padding: 5px 12px;\r\n    display: flex;\r\n\r\n    & span {\r\n      flex-grow: 1;\r\n    }\r\n\r\n    & svg {\r\n      color: transparent;\r\n    }\r\n  }\r\n\r\n  & li[aria-selected='true'] {\r\n    background-color: #fafafa;\r\n    font-weight: 600;\r\n\r\n    & svg {\r\n      color: #1890ff;\r\n    }\r\n  }\r\n\r\n  & li[data-focus='true'] {\r\n    background-color: #e6f7ff;\r\n    cursor: pointer;\r\n\r\n    & svg {\r\n      color: #000;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function CustomizedHook() {\r\n  const {\r\n    getRootProps,\r\n    getInputLabelProps,\r\n    getInputProps,\r\n    getTagProps,\r\n    getListboxProps,\r\n    getOptionProps,\r\n    groupedOptions,\r\n    value,\r\n    focused,\r\n    setAnchorEl,\r\n  } = useAutocomplete({\r\n    id: 'customized-hook-demo',\r\n    defaultValue: [top100Films[1]],\r\n    multiple: true,\r\n    options: top100Films,\r\n    getOptionLabel: option => option.title,\r\n  });\r\n\r\n  return (\r\n    <NoSsr>\r\n      <div>\r\n        <div {...getRootProps()}>\r\n          <Label {...getInputLabelProps()}>Customized hook</Label>\r\n          <InputWrapper ref={setAnchorEl} className={focused ? 'focused' : ''}>\r\n            {value.map((option, index) => (\r\n              <Tag label={option.title} {...getTagProps({ index })} />\r\n            ))}\r\n\r\n            <input {...getInputProps()} />\r\n          </InputWrapper>\r\n        </div>\r\n        {groupedOptions.length > 0 ? (\r\n          <Listbox {...getListboxProps()}>\r\n            {groupedOptions.map((option, index) => (\r\n              <li {...getOptionProps({ option, index })}>\r\n                <span>{option.title}</span>\r\n                <CheckIcon fontSize=\"small\" />\r\n              </li>\r\n            ))}\r\n          </Listbox>\r\n        ) : null}\r\n      </div>\r\n    </NoSsr>\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  {\r\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    year: 1964,\r\n  },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n","// *https://www.registers.service.gov.uk/registers/country/use-the-api*\r\nimport fetch from 'cross-fetch';\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nfunction sleep(delay = 0) {\r\n  return new Promise(resolve => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n}\r\n\r\nexport default function Asynchronous() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [options, setOptions] = React.useState([]);\r\n  const loading = open && options.length === 0;\r\n\r\n  React.useEffect(() => {\r\n    let active = true;\r\n\r\n    if (!loading) {\r\n      return undefined;\r\n    }\r\n\r\n    (async () => {\r\n      const response = await fetch('https://country.register.gov.uk/records.json?page-size=5000');\r\n      await sleep(1e3); // For demo purposes.\r\n      const countries = await response.json();\r\n\r\n      if (active) {\r\n        setOptions(Object.keys(countries).map(key => countries[key].item[0]));\r\n      }\r\n    })();\r\n\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [loading]);\r\n\r\n  React.useEffect(() => {\r\n    if (!open) {\r\n      setOptions([]);\r\n    }\r\n  }, [open]);\r\n\r\n  return (\r\n    <Autocomplete\r\n      id=\"asynchronous-demo\"\r\n      style={{ width: 300 }}\r\n      open={open}\r\n      onOpen={() => {\r\n        setOpen(true);\r\n      }}\r\n      onClose={() => {\r\n        setOpen(false);\r\n      }}\r\n      getOptionSelected={(option, value) => option.name === value.name}\r\n      getOptionLabel={option => option.name}\r\n      options={options}\r\n      loading={loading}\r\n      renderInput={params => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Asynchronous\"\r\n          variant=\"outlined\"\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <React.Fragment>\r\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                {params.InputProps.endAdornment}\r\n              </React.Fragment>\r\n            ),\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport throttle from 'lodash/throttle';\r\nimport GridContainer from '../../../../../@jumbo/components/GridContainer';\r\n\r\nfunction loadScript(src, position, id) {\r\n  if (!position) {\r\n    return;\r\n  }\r\n\r\n  const script = document.createElement('script');\r\n  script.setAttribute('async', '');\r\n  script.setAttribute('id', id);\r\n  script.src = src;\r\n  position.appendChild(script);\r\n}\r\n\r\nconst autocompleteService = { current: null };\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  icon: {\r\n    color: theme.palette.text.secondary,\r\n    marginRight: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function GoogleMaps() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(null);\r\n  const [inputValue, setInputValue] = React.useState('');\r\n  const [options, setOptions] = React.useState([]);\r\n  const loaded = React.useRef(false);\r\n\r\n  if (typeof window !== 'undefined' && !loaded.current) {\r\n    if (!document.querySelector('#google-maps')) {\r\n      loadScript(\r\n        'https://maps.googleapis.com/maps/api/js?key=AIzaSyBwRp1e12ec1vOTtGiA4fcCt2sCUS78UYc&libraries=places',\r\n        document.querySelector('head'),\r\n        'google-maps',\r\n      );\r\n    }\r\n\r\n    loaded.current = true;\r\n  }\r\n\r\n  const fetch = React.useMemo(\r\n    () =>\r\n      throttle((request, callback) => {\r\n        autocompleteService.current.getPlacePredictions(request, callback);\r\n      }, 200),\r\n    [],\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    let active = true;\r\n\r\n    if (!autocompleteService.current && window.google) {\r\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\r\n    }\r\n    if (!autocompleteService.current) {\r\n      return undefined;\r\n    }\r\n\r\n    if (inputValue === '') {\r\n      setOptions(value ? [value] : []);\r\n      return undefined;\r\n    }\r\n\r\n    fetch({ input: inputValue }, results => {\r\n      if (active) {\r\n        let newOptions = [];\r\n\r\n        if (value) {\r\n          newOptions = [value];\r\n        }\r\n\r\n        if (results) {\r\n          newOptions = [...newOptions, ...results];\r\n        }\r\n\r\n        setOptions(newOptions);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [value, inputValue, fetch]);\r\n\r\n  return (\r\n    <Autocomplete\r\n      id=\"google-map-demo\"\r\n      style={{ width: 300 }}\r\n      getOptionLabel={option => (typeof option === 'string' ? option : option.description)}\r\n      filterOptions={x => x}\r\n      options={options}\r\n      autoComplete\r\n      includeInputInList\r\n      filterSelectedOptions\r\n      value={value}\r\n      onChange={(event, newValue) => {\r\n        setOptions(newValue ? [newValue, ...options] : options);\r\n        setValue(newValue);\r\n      }}\r\n      onInputChange={(event, newInputValue) => {\r\n        setInputValue(newInputValue);\r\n      }}\r\n      renderInput={params => <TextField {...params} label=\"Add a location\" variant=\"outlined\" fullWidth />}\r\n      renderOption={option => {\r\n        const matches = option.structured_formatting.main_text_matched_substrings;\r\n        const parts = parse(\r\n          option.structured_formatting.main_text,\r\n          matches.map(match => [match.offset, match.offset + match.length]),\r\n        );\r\n\r\n        return (\r\n          <GridContainer alignItems=\"center\">\r\n            <Grid item>\r\n              <LocationOnIcon className={classes.icon} />\r\n            </Grid>\r\n            <Grid item xs>\r\n              {parts.map((part, index) => (\r\n                <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\r\n                  {part.text}\r\n                </span>\r\n              ))}\r\n\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                {option.structured_formatting.secondary_text}\r\n              </Typography>\r\n            </Grid>\r\n          </GridContainer>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n}\r\n","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: 500,\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function Tags() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Autocomplete\r\n        multiple\r\n        id=\"tags-standard\"\r\n        options={top100Films}\r\n        getOptionLabel={option => option.title}\r\n        defaultValue={[top100Films[13]]}\r\n        renderInput={params => <TextField {...params} variant=\"standard\" label=\"Multiple values\" placeholder=\"Favorites\" />}\r\n      />\r\n      <Autocomplete\r\n        multiple\r\n        id=\"tags-outlined\"\r\n        options={top100Films}\r\n        getOptionLabel={option => option.title}\r\n        defaultValue={[top100Films[13]]}\r\n        filterSelectedOptions\r\n        renderInput={params => (\r\n          <TextField {...params} variant=\"outlined\" label=\"filterSelectedOptions\" placeholder=\"Favorites\" />\r\n        )}\r\n      />\r\n      <Autocomplete\r\n        multiple\r\n        id=\"tags-filled\"\r\n        options={top100Films.map(option => option.title)}\r\n        defaultValue={[top100Films[13].title]}\r\n        freeSolo\r\n        renderTags={(value, getTagProps) =>\r\n          value.map((option, index) => <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} />)\r\n        }\r\n        renderInput={params => <TextField {...params} variant=\"filled\" label=\"freeSolo\" placeholder=\"Favorites\" />}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  {\r\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    year: 1964,\r\n  },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nexport default function FixedTags() {\r\n  const fixedOptions = [top100Films[6]];\r\n  const [value, setValue] = React.useState([...fixedOptions, top100Films[13]]);\r\n\r\n  return (\r\n    <Autocomplete\r\n      multiple\r\n      id=\"fixed-tags-demo\"\r\n      value={value}\r\n      onChange={(event, newValue) => {\r\n        setValue([...fixedOptions, ...newValue.filter(option => fixedOptions.indexOf(option) === -1)]);\r\n      }}\r\n      options={top100Films}\r\n      getOptionLabel={option => option.title}\r\n      renderTags={(tagValue, getTagProps) =>\r\n        tagValue.map((option, index) => (\r\n          <Chip label={option.title} {...getTagProps({ index })} disabled={fixedOptions.indexOf(option) !== -1} />\r\n        ))\r\n      }\r\n      style={{ width: 500 }}\r\n      renderInput={params => <TextField {...params} label=\"Fixed tag\" variant=\"outlined\" placeholder=\"Favorites\" />}\r\n    />\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  {\r\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    year: 1964,\r\n  },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n","/* eslint-disable no-use-before-define */\r\n\r\nimport React from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\nexport default function CheckboxesTags() {\r\n  return (\r\n    <Autocomplete\r\n      multiple\r\n      id=\"checkboxes-tags-demo\"\r\n      options={top100Films}\r\n      disableCloseOnSelect\r\n      getOptionLabel={option => option.title}\r\n      renderOption={(option, { selected }) => (\r\n        <React.Fragment>\r\n          <Checkbox icon={icon} checkedIcon={checkedIcon} style={{ marginRight: 8 }} checked={selected} />\r\n          {option.title}\r\n        </React.Fragment>\r\n      )}\r\n      style={{ width: 500 }}\r\n      renderInput={params => <TextField {...params} variant=\"outlined\" label=\"Checkboxes\" placeholder=\"Favorites\" />}\r\n    />\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n];\r\n","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: 500,\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function LimitTags() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Autocomplete\r\n        multiple\r\n        limitTags={2}\r\n        id=\"multiple-limit-tags\"\r\n        options={top100Films}\r\n        getOptionLabel={option => option.title}\r\n        defaultValue={[top100Films[13], top100Films[12], top100Films[11]]}\r\n        renderInput={params => <TextField {...params} variant=\"outlined\" label=\"limitTags\" placeholder=\"Favorites\" />}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  {\r\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    year: 1964,\r\n  },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: 500,\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function Sizes() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Autocomplete\r\n        id=\"size-small-standard\"\r\n        size=\"small\"\r\n        options={top100Films}\r\n        getOptionLabel={option => option.title}\r\n        defaultValue={top100Films[13]}\r\n        renderInput={params => <TextField {...params} variant=\"standard\" label=\"Size small\" placeholder=\"Favorites\" />}\r\n      />\r\n      <Autocomplete\r\n        multiple\r\n        id=\"size-small-standard-multi\"\r\n        size=\"small\"\r\n        options={top100Films}\r\n        getOptionLabel={option => option.title}\r\n        defaultValue={[top100Films[13]]}\r\n        renderInput={params => <TextField {...params} variant=\"standard\" label=\"Size small\" placeholder=\"Favorites\" />}\r\n      />\r\n      <Autocomplete\r\n        id=\"size-small-outlined\"\r\n        size=\"small\"\r\n        options={top100Films}\r\n        getOptionLabel={option => option.title}\r\n        defaultValue={top100Films[13]}\r\n        renderInput={params => <TextField {...params} variant=\"outlined\" label=\"Size small\" placeholder=\"Favorites\" />}\r\n      />\r\n      <Autocomplete\r\n        multiple\r\n        id=\"size-small-outlined-multi\"\r\n        size=\"small\"\r\n        options={top100Films}\r\n        getOptionLabel={option => option.title}\r\n        defaultValue={[top100Films[13]]}\r\n        renderInput={params => <TextField {...params} variant=\"outlined\" label=\"Size small\" placeholder=\"Favorites\" />}\r\n      />\r\n      <Autocomplete\r\n        id=\"size-small-filled\"\r\n        size=\"small\"\r\n        options={top100Films}\r\n        getOptionLabel={option => option.title}\r\n        defaultValue={top100Films[13]}\r\n        renderTags={(value, getTagProps) =>\r\n          value.map((option, index) => (\r\n            <Chip variant=\"outlined\" label={option.title} size=\"small\" {...getTagProps({ index })} />\r\n          ))\r\n        }\r\n        renderInput={params => <TextField {...params} variant=\"filled\" label=\"Size small\" placeholder=\"Favorites\" />}\r\n      />\r\n      <Autocomplete\r\n        multiple\r\n        id=\"size-small-filled-multi\"\r\n        size=\"small\"\r\n        options={top100Films}\r\n        getOptionLabel={option => option.title}\r\n        defaultValue={[top100Films[13]]}\r\n        renderTags={(value, getTagProps) =>\r\n          value.map((option, index) => (\r\n            <Chip variant=\"outlined\" label={option.title} size=\"small\" {...getTagProps({ index })} />\r\n          ))\r\n        }\r\n        renderInput={params => <TextField {...params} variant=\"filled\" label=\"Size small\" placeholder=\"Favorites\" />}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  {\r\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    year: 1964,\r\n  },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n","import React from 'react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nconst options = ['Option 1', 'Option 2'];\r\n\r\nexport default function CustomInputAutocomplete() {\r\n  return (\r\n    <Autocomplete\r\n      id=\"custom-input-demo\"\r\n      options={options}\r\n      renderInput={params => (\r\n        <div ref={params.InputProps.ref}>\r\n          <input style={{ width: 200 }} type=\"text\" {...params.inputProps} />\r\n        </div>\r\n      )}\r\n    />\r\n  );\r\n}\r\n","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport { alpha, makeStyles } from '@material-ui/core/styles';\r\nimport { useTheme } from '@material-ui/core';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport ButtonBase from '@material-ui/core/ButtonBase';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: 221,\r\n    fontSize: 13,\r\n  },\r\n  button: {\r\n    fontSize: 13,\r\n    width: '100%',\r\n    textAlign: 'left',\r\n    paddingBottom: 8,\r\n    color: '#586069',\r\n    fontWeight: 600,\r\n    '&:hover,&:focus': {\r\n      color: '#0366d6',\r\n    },\r\n    '& span': {\r\n      width: '100%',\r\n    },\r\n    '& svg': {\r\n      width: 16,\r\n      height: 16,\r\n    },\r\n  },\r\n  tag: {\r\n    marginTop: 3,\r\n    height: 20,\r\n    padding: '.15em 4px',\r\n    fontWeight: 600,\r\n    lineHeight: '15px',\r\n    borderRadius: 2,\r\n  },\r\n  popper: {\r\n    border: '1px solid rgba(27,31,35,.15)',\r\n    boxShadow: '0 3px 12px rgba(27,31,35,.15)',\r\n    borderRadius: 3,\r\n    width: 300,\r\n    zIndex: 1,\r\n    fontSize: 13,\r\n    color: '#586069',\r\n    backgroundColor: '#f6f8fa',\r\n  },\r\n  header: {\r\n    borderBottom: '1px solid #e1e4e8',\r\n    padding: '8px 10px',\r\n    fontWeight: 600,\r\n  },\r\n  inputBase: {\r\n    padding: 10,\r\n    width: '100%',\r\n    borderBottom: '1px solid #dfe2e5',\r\n    '& input': {\r\n      borderRadius: 4,\r\n      backgroundColor: theme.palette.background.paper,\r\n      padding: 8,\r\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n      border: '1px solid #ced4da',\r\n      fontSize: 14,\r\n      '&:focus': {\r\n        boxShadow: `${alpha(theme.palette.primary.main, 0.25)} 0 0 0 0.2rem`,\r\n        borderColor: theme.palette.primary.main,\r\n      },\r\n    },\r\n  },\r\n  paper: {\r\n    boxShadow: 'none',\r\n    margin: 0,\r\n    color: '#586069',\r\n    fontSize: 13,\r\n  },\r\n  option: {\r\n    minHeight: 'auto',\r\n    alignItems: 'flex-start',\r\n    padding: 8,\r\n    '&[aria-selected=\"true\"]': {\r\n      backgroundColor: 'transparent',\r\n    },\r\n    '&[data-focus=\"true\"]': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n  popperDisablePortal: {\r\n    position: 'relative',\r\n  },\r\n  iconSelected: {\r\n    width: 17,\r\n    height: 17,\r\n    marginRight: 5,\r\n    marginLeft: -2,\r\n  },\r\n  color: {\r\n    width: 14,\r\n    height: 14,\r\n    flexShrink: 0,\r\n    borderRadius: 3,\r\n    marginRight: 8,\r\n    marginTop: 2,\r\n  },\r\n  text: {\r\n    flexGrow: 1,\r\n  },\r\n  close: {\r\n    opacity: 0.6,\r\n    width: 18,\r\n    height: 18,\r\n  },\r\n}));\r\n\r\nexport default function GitHubLabel() {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [value, setValue] = React.useState([labels[1], labels[11]]);\r\n  const [pendingValue, setPendingValue] = React.useState([]);\r\n  const theme = useTheme();\r\n\r\n  const handleClick = event => {\r\n    setPendingValue(value);\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'toggleInput') {\r\n      return;\r\n    }\r\n    setValue(pendingValue);\r\n    if (anchorEl) {\r\n      anchorEl.focus();\r\n    }\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n  const id = open ? 'github-label' : undefined;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.root}>\r\n        <ButtonBase disableRipple className={classes.button} aria-describedby={id} onClick={handleClick}>\r\n          <span>Labels</span>\r\n          <SettingsIcon />\r\n        </ButtonBase>\r\n        {value.map(label => (\r\n          <div\r\n            key={label.name}\r\n            className={classes.tag}\r\n            style={{\r\n              backgroundColor: label.color,\r\n              color: theme.palette.getContrastText(label.color),\r\n            }}>\r\n            {label.name}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <Popper id={id} open={open} anchorEl={anchorEl} placement=\"bottom-start\" className={classes.popper}>\r\n        <div className={classes.header}>Apply labels to this pull request</div>\r\n        <Autocomplete\r\n          open\r\n          onClose={handleClose}\r\n          multiple\r\n          classes={{\r\n            paper: classes.paper,\r\n            option: classes.option,\r\n            popperDisablePortal: classes.popperDisablePortal,\r\n          }}\r\n          value={pendingValue}\r\n          onChange={(event, newValue) => {\r\n            setPendingValue(newValue);\r\n          }}\r\n          disableCloseOnSelect\r\n          disablePortal\r\n          renderTags={() => null}\r\n          noOptionsText=\"No labels\"\r\n          renderOption={(option, { selected }) => (\r\n            <React.Fragment>\r\n              <DoneIcon className={classes.iconSelected} style={{ visibility: selected ? 'visible' : 'hidden' }} />\r\n              <span className={classes.color} style={{ backgroundColor: option.color }} />\r\n              <div className={classes.text}>\r\n                {option.name}\r\n                <br />\r\n                {option.description}\r\n              </div>\r\n              <CloseIcon className={classes.close} style={{ visibility: selected ? 'visible' : 'hidden' }} />\r\n            </React.Fragment>\r\n          )}\r\n          options={[...labels].sort((a, b) => {\r\n            // Display the selected labels first.\r\n            let ai = value.indexOf(a);\r\n            ai = ai === -1 ? value.length + labels.indexOf(a) : ai;\r\n            let bi = value.indexOf(b);\r\n            bi = bi === -1 ? value.length + labels.indexOf(b) : bi;\r\n            return ai - bi;\r\n          })}\r\n          getOptionLabel={option => option.name}\r\n          renderInput={params => (\r\n            <InputBase ref={params.InputProps.ref} inputProps={params.inputProps} autoFocus className={classes.inputBase} />\r\n          )}\r\n        />\r\n      </Popper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n// From https://github.com/abdonrd/github-labels\r\nconst labels = [\r\n  {\r\n    name: 'good first issue',\r\n    color: '#7057ff',\r\n    description: 'Good for newcomers',\r\n  },\r\n  {\r\n    name: 'help wanted',\r\n    color: '#008672',\r\n    description: 'Extra attention is needed',\r\n  },\r\n  {\r\n    name: 'priority: critical',\r\n    color: '#b60205',\r\n    description: '',\r\n  },\r\n  {\r\n    name: 'priority: high',\r\n    color: '#d93f0b',\r\n    description: '',\r\n  },\r\n  {\r\n    name: 'priority: low',\r\n    color: '#0e8a16',\r\n    description: '',\r\n  },\r\n  {\r\n    name: 'priority: medium',\r\n    color: '#fbca04',\r\n    description: '',\r\n  },\r\n  {\r\n    name: \"status: can't reproduce\",\r\n    color: '#fec1c1',\r\n    description: '',\r\n  },\r\n  {\r\n    name: 'status: confirmed',\r\n    color: '#215cea',\r\n    description: '',\r\n  },\r\n  {\r\n    name: 'status: duplicate',\r\n    color: '#cfd3d7',\r\n    description: 'This issue or pull request already exists',\r\n  },\r\n  {\r\n    name: 'status: needs information',\r\n    color: '#fef2c0',\r\n    description: '',\r\n  },\r\n  {\r\n    name: 'status: wont do/fix',\r\n    color: '#eeeeee',\r\n    description: 'This will not be worked on',\r\n  },\r\n  {\r\n    name: 'type: bug',\r\n    color: '#d73a4a',\r\n    description: \"Something isn't working\",\r\n  },\r\n  {\r\n    name: 'type: discussion',\r\n    color: '#d4c5f9',\r\n    description: '',\r\n  },\r\n  {\r\n    name: 'type: documentation',\r\n    color: '#006b75',\r\n    description: '',\r\n  },\r\n  {\r\n    name: 'type: enhancement',\r\n    color: '#84b6eb',\r\n    description: '',\r\n  },\r\n  {\r\n    name: 'type: epic',\r\n    color: '#3e4b9e',\r\n    description: 'A theme of work that contain sub-tasks',\r\n  },\r\n  {\r\n    name: 'type: feature request',\r\n    color: '#fbca04',\r\n    description: 'New feature or request',\r\n  },\r\n  {\r\n    name: 'type: question',\r\n    color: '#d876e3',\r\n    description: 'Further information is requested',\r\n  },\r\n];\r\n","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport match from 'autosuggest-highlight/match';\r\n\r\nexport default function Highlights() {\r\n  return (\r\n    <Autocomplete\r\n      id=\"highlights-demo\"\r\n      style={{ width: 300 }}\r\n      options={top100Films}\r\n      getOptionLabel={option => option.title}\r\n      renderInput={params => <TextField {...params} label=\"Highlights\" variant=\"outlined\" margin=\"normal\" />}\r\n      renderOption={(option, { inputValue }) => {\r\n        const matches = match(option.title, inputValue);\r\n        const parts = parse(option.title, matches);\r\n\r\n        return (\r\n          <div>\r\n            {parts.map((part, index) => (\r\n              <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\r\n                {part.text}\r\n              </span>\r\n            ))}\r\n          </div>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  {\r\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    year: 1964,\r\n  },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\n\r\nconst filterOptions = createFilterOptions({\r\n  matchFrom: 'start',\r\n  stringify: option => option.title,\r\n});\r\n\r\nexport default function Filter() {\r\n  return (\r\n    <Autocomplete\r\n      id=\"filter-demo\"\r\n      options={top100Films}\r\n      getOptionLabel={option => option.title}\r\n      filterOptions={filterOptions}\r\n      style={{ width: 300 }}\r\n      renderInput={params => <TextField {...params} label=\"Custom filter\" variant=\"outlined\" />}\r\n    />\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  {\r\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    year: 1964,\r\n  },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport { useTheme, makeStyles } from '@material-ui/core/styles';\r\nimport { VariableSizeList } from 'react-window';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst LISTBOX_PADDING = 8; // px\r\n\r\nfunction renderRow(props) {\r\n  const { data, index, style } = props;\r\n  return React.cloneElement(data[index], {\r\n    style: {\r\n      ...style,\r\n      top: style.top + LISTBOX_PADDING,\r\n    },\r\n  });\r\n}\r\n\r\nconst OuterElementContext = React.createContext({});\r\n\r\nconst OuterElementType = React.forwardRef((props, ref) => {\r\n  const outerProps = React.useContext(OuterElementContext);\r\n  return <div ref={ref} {...props} {...outerProps} />;\r\n});\r\n\r\nfunction useResetCache(data) {\r\n  const ref = React.useRef(null);\r\n  React.useEffect(() => {\r\n    if (ref.current != null) {\r\n      ref.current.resetAfterIndex(0, true);\r\n    }\r\n  }, [data]);\r\n  return ref;\r\n}\r\n\r\n// Adapter for react-window\r\nconst ListboxComponent = React.forwardRef(function ListboxComponent(props, ref) {\r\n  const { children, ...other } = props;\r\n  const itemData = React.Children.toArray(children);\r\n  const theme = useTheme();\r\n  const smUp = useMediaQuery(theme.breakpoints.up('sm'), { noSsr: true });\r\n  const itemCount = itemData.length;\r\n  const itemSize = smUp ? 36 : 48;\r\n\r\n  const getChildSize = child => {\r\n    if (React.isValidElement(child) && child.type === ListSubheader) {\r\n      return 48;\r\n    }\r\n\r\n    return itemSize;\r\n  };\r\n\r\n  const getHeight = () => {\r\n    if (itemCount > 8) {\r\n      return 8 * itemSize;\r\n    }\r\n    return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\r\n  };\r\n\r\n  const gridRef = useResetCache(itemCount);\r\n\r\n  return (\r\n    <div ref={ref}>\r\n      <OuterElementContext.Provider value={other}>\r\n        <VariableSizeList\r\n          itemData={itemData}\r\n          height={getHeight() + 2 * LISTBOX_PADDING}\r\n          width=\"100%\"\r\n          ref={gridRef}\r\n          outerElementType={OuterElementType}\r\n          innerElementType=\"ul\"\r\n          itemSize={index => getChildSize(itemData[index])}\r\n          overscanCount={5}\r\n          itemCount={itemCount}>\r\n          {renderRow}\r\n        </VariableSizeList>\r\n      </OuterElementContext.Provider>\r\n    </div>\r\n  );\r\n});\r\n\r\nListboxComponent.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nfunction random(length) {\r\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n  let result = '';\r\n\r\n  for (let i = 0; i < length; i += 1) {\r\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  listbox: {\r\n    boxSizing: 'border-box',\r\n    '& ul': {\r\n      padding: 0,\r\n      margin: 0,\r\n    },\r\n  },\r\n});\r\n\r\nconst OPTIONS = Array.from(new Array(10000))\r\n  .map(() => random(10 + Math.ceil(Math.random() * 20)))\r\n  .sort((a, b) => a.toUpperCase().localeCompare(b.toUpperCase()));\r\n\r\nconst renderGroup = params => [\r\n  <ListSubheader key={params.key} component=\"div\">\r\n    {params.group}\r\n  </ListSubheader>,\r\n  params.children,\r\n];\r\n\r\nexport default function Virtualize() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Autocomplete\r\n      id=\"virtualize-demo\"\r\n      style={{ width: 300 }}\r\n      disableListWrap\r\n      classes={classes}\r\n      ListboxComponent={ListboxComponent}\r\n      renderGroup={renderGroup}\r\n      options={OPTIONS}\r\n      groupBy={option => option[0].toUpperCase()}\r\n      renderInput={params => <TextField {...params} variant=\"outlined\" label=\"10,000 options\" />}\r\n      renderOption={option => <Typography noWrap>{option}</Typography>}\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { MuiComponentDemo } from '../../../../@jumbo/components/PageComponents';\r\nimport { Box, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport CodeViewerCard from '../../../../@jumbo/components/Common/CodeViewerCard';\r\nimport ComboBox from './demo/ComboBox';\r\nimport Playground from './demo/Playground';\r\nimport CountrySelect from './demo/CountrySelect';\r\nimport ControllableStates from './demo/ControllableStates';\r\nimport FreeSolo from './demo/FreeSolo';\r\nimport FreeSoloCreateOption from './demo/FreeSoloCreateOption';\r\nimport FreeSoloCreateOptionDialog from './demo/FreeSoloCreateOptionDialog';\r\nimport Grouped from './demo/Grouped';\r\nimport DisabledOptions from './demo/DisabledOptions';\r\nimport UseAutocomplete from './demo/UseAutocomplete';\r\nimport CustomizedHook from './demo/CustomizedHook';\r\nimport Asynchronous from './demo/Asynchronous';\r\nimport GoogleMaps from './demo/GoogleMaps';\r\nimport Tags from './demo/Tags';\r\nimport FixedTags from './demo/FixedTags';\r\nimport CheckboxesTags from './demo/CheckboxesTags';\r\nimport LimitTags from './demo/LimitTags';\r\nimport Sizes from './demo/Sizes';\r\nimport CustomInputAutocomplete from './demo/CustomInputAutocomplete';\r\nimport GitHubLabel from './demo/GitHubLabel';\r\nimport Highlights from './demo/Highlights';\r\nimport Filter from './demo/Filter';\r\nimport Virtualize from './demo/Virtualize';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  section: {\r\n    '&:not(:last-child)': {\r\n      marginBottom: theme.typography.pxToRem(32),\r\n    },\r\n  },\r\n  sectionHeading: {\r\n    marginBottom: theme.typography.pxToRem(16),\r\n  },\r\n}));\r\n\r\nconst requireRaw = require.context(\r\n  '!raw-loader!../../../../@fake-db/mui-components/auto-complete',\r\n  false,\r\n  /\\.(txt|js|md|tsx)$/,\r\n);\r\n\r\nconst demos = [\r\n  {\r\n    label: 'Combo Box',\r\n    link: 'combo-box',\r\n    component: <ComboBox />,\r\n    filename: './ComboBox.txt',\r\n  },\r\n  {\r\n    label: 'Playground',\r\n    link: 'playground',\r\n    component: <Playground />,\r\n    filename: './Playground.txt',\r\n  },\r\n  {\r\n    label: 'Country select',\r\n    link: 'country-select',\r\n    component: <CountrySelect />,\r\n    filename: './CountrySelect.txt',\r\n  },\r\n  {\r\n    label: 'Controllable states',\r\n    link: 'controllable-states',\r\n    component: <ControllableStates />,\r\n    filename: './ControllableStates.txt',\r\n  },\r\n  {\r\n    label: 'Free Solo Search input',\r\n    link: 'free-solo-search-input',\r\n    component: <FreeSolo />,\r\n    filename: './FreeSolo.txt',\r\n  },\r\n  {\r\n    label: 'Free Solo Creatable',\r\n    link: 'free-solo-creatable',\r\n    component: <FreeSoloCreateOption />,\r\n    filename: './FreeSoloCreateOption.txt',\r\n  },\r\n  {\r\n    label: 'Free Solo Creatable Dialog',\r\n    link: 'free-solo-creatable-dialog',\r\n    component: <FreeSoloCreateOptionDialog />,\r\n    filename: './FreeSoloCreateOptionDialog.txt',\r\n  },\r\n  {\r\n    label: 'Grouped',\r\n    link: 'grouped',\r\n    component: <Grouped />,\r\n    filename: './Grouped.txt',\r\n  },\r\n  {\r\n    label: 'Disabled options',\r\n    link: 'disabled-options',\r\n    component: <DisabledOptions />,\r\n    filename: './DisabledOptions.txt',\r\n  },\r\n  {\r\n    label: 'useAutocomplete',\r\n    link: 'use-autocomplete',\r\n    component: <UseAutocomplete />,\r\n    filename: './UseAutocomplete.txt',\r\n  },\r\n  {\r\n    label: 'Customized hook',\r\n    link: 'customized-hook',\r\n    component: <CustomizedHook />,\r\n    filename: './CustomizedHook.txt',\r\n  },\r\n  {\r\n    label: 'Asynchronous requests',\r\n    link: 'asynchronous-requests',\r\n    component: <Asynchronous />,\r\n    filename: './Asynchronous.txt',\r\n  },\r\n  {\r\n    label: 'Google Maps place',\r\n    link: 'google-maps-place',\r\n    component: <GoogleMaps />,\r\n    filename: './GoogleMaps.txt',\r\n  },\r\n  {\r\n    label: 'Multiple values',\r\n    link: 'multiple-values',\r\n    component: <Tags />,\r\n    filename: './Tags.txt',\r\n  },\r\n  {\r\n    label: 'Fixed options',\r\n    link: 'Fixed options',\r\n    component: <FixedTags />,\r\n    filename: './FixedTags.txt',\r\n  },\r\n  {\r\n    label: 'Checkboxes',\r\n    link: 'checkboxes',\r\n    component: <CheckboxesTags />,\r\n    filename: './CheckboxesTags.txt',\r\n  },\r\n  {\r\n    label: 'Limit tags',\r\n    link: 'limit-tags',\r\n    component: <LimitTags />,\r\n    filename: './LimitTags.txt',\r\n  },\r\n  {\r\n    label: 'Sizes',\r\n    link: 'sizes',\r\n    component: <Sizes />,\r\n    filename: './Sizes.txt',\r\n  },\r\n  {\r\n    label: 'Custom input',\r\n    link: 'custom-input',\r\n    component: <CustomInputAutocomplete />,\r\n    filename: './CustomInputAutocomplete.txt',\r\n  },\r\n  {\r\n    label: \"GitHub's picker\",\r\n    link: 'githubs-picker',\r\n    component: <GitHubLabel />,\r\n    filename: './GitHubLabel.txt',\r\n  },\r\n  {\r\n    label: 'Highlights',\r\n    link: 'highlights',\r\n    component: <Highlights />,\r\n    filename: './Highlights.txt',\r\n  },\r\n  {\r\n    label: 'Custom filter',\r\n    link: 'custom-filter',\r\n    component: <Filter />,\r\n    filename: './Filter.txt',\r\n  },\r\n  {\r\n    label: 'Virtualization',\r\n    link: 'virtualization',\r\n    component: <Virtualize />,\r\n    filename: './Virtualize.txt',\r\n  },\r\n];\r\n\r\nexport default function AutoComplete() {\r\n  const classes = useStyles();\r\n  return (\r\n    <MuiComponentDemo pageTitle=\"Autocomplete\" menus={demos}>\r\n      {demos.map((menu, index) => (\r\n        <Box key={index} id={menu.link} className={classes.section}>\r\n          <Typography component=\"h3\" variant=\"inherit\" className={classes.sectionHeading}>\r\n            {menu.label}\r\n          </Typography>\r\n          <CodeViewerCard code={requireRaw(menu.filename).default} language=\"jsx\">\r\n            {menu.component}\r\n          </CodeViewerCard>\r\n        </Box>\r\n      ))}\r\n    </MuiComponentDemo>\r\n  );\r\n}\r\n"],"sourceRoot":""}