{"version":3,"sources":["@jumbo/components/PageComponents/layouts/PageContainer.js","@jumbo/components/PageComponents/PageHeader.js","@jumbo/components/PageComponents/PageBreadcrumbs/index.js","@jumbo/components/PageComponents/layouts/CorematComponentDemo.js","@jumbo/components/PageComponents/layouts/MuiComponentDemo.js","@jumbo/components/PageComponents/layouts/ComponentsDemo.js","../ //.(txt|js|md|tsx)$","@fake-db/maps/DrawingViewExample.txt","@fake-db/maps/GeoLocationExample.txt","@fake-db/maps/MapDirectionsExample.txt","@fake-db/maps/MapKmLayerExample.txt","@fake-db/maps/MapOverlayExample.txt","@fake-db/maps/MapPopupInfoExample.txt","@fake-db/maps/MarkerClustererExample.txt","@fake-db/maps/SimpleMapExample.txt","@fake-db/maps/StreetViewPanoramaExample.txt","@fake-db/maps/StyledMapExample.txt","@fake-db/maps/TrafficLayerExample.txt","routes/Maps/MarkerClusterer/demo/MarkerClustererExample.js","routes/Maps/MarkerClusterer/index.js"],"names":["useStyles","makeStyles","pageFull","width","PageContainer","heading","breadcrumbs","children","className","restProps","classes","in","direction","mountOnEnter","unmountOnExit","clsx","breadcrumbComponent","items","theme","pageHeaderRoot","display","flexDirection","breakpoints","up","alignItems","titleRoot","down","marginBottom","PageHeader","rest","Box","mb","xs","md","lg","Typography","component","variant","ml","sm","textSm","fontSize","linkBlock","color","PageBreadcrumbs","Breadcrumbs","aria-label","map","item","index","isActive","key","label","to","link","CorematComponentDemo","SourceCodeComponent","SettingsComponent","GridContainer","Grid","CmtCard","MuiComponentDemo","pageTitle","menus","ComponentsDemo","root","flexWrap","contentArea","paddingRight","typography","pxToRem","contentSidebar","height","position","top","overflowY","flexShrink","xsDown","menu","dense","button","href","primary","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","MarkerClustererExampleGoogleMap","withGoogleMap","props","defaultZoom","defaultCenter","lat","lng","averageCenter","enableRetinaIcons","gridSize","markers","marker","latitude","longitude","photo_id","MarkerClustererExample","useState","setMarkers","useEffect","fetch","then","res","json","data","photos","loadingElement","containerElement","mapElement","section","sectionHeading","requireRaw","require","demos","filename","MarkerClusterer","default","language"],"mappings":"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","file":"static/js/81.775a1efc.chunk.js","sourcesContent":["import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport { PageBreadcrumbs, PageHeader } from '../index';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport clsx from 'clsx';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  pageFull: {\r\n    width: '100%',\r\n  },\r\n}));\r\n\r\nconst PageContainer = ({ heading, breadcrumbs, children, className, restProps }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Slide in={true} direction=\"up\" mountOnEnter unmountOnExit>\r\n      <Box className={clsx(classes.pageFull, className)} {...restProps}>\r\n        {(heading || breadcrumbs) && (\r\n          <PageHeader heading={heading} breadcrumbComponent={breadcrumbs && <PageBreadcrumbs items={breadcrumbs} />} />\r\n        )}\r\n        {children}\r\n      </Box>\r\n    </Slide>\r\n  );\r\n};\r\n\r\nexport default PageContainer;\r\n","import React from 'react';\r\nimport { Box, makeStyles, Typography } from '@material-ui/core';\r\nimport clsx from 'clsx';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  pageHeaderRoot: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    [theme.breakpoints.up('sm')]: {\r\n      alignItems: 'center',\r\n      flexDirection: 'row',\r\n    },\r\n  },\r\n  titleRoot: {\r\n    [theme.breakpoints.down('xs')]: {\r\n      marginBottom: 10,\r\n    },\r\n  },\r\n}));\r\n\r\nconst PageHeader = ({ heading, breadcrumbComponent, children, ...rest }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box className={clsx(classes.pageHeaderRoot, 'page-header')} mb={{ xs: 5, md: 6, lg: 8 }} {...rest}>\r\n      <Typography component=\"div\" variant=\"h1\" className={clsx(classes.titleRoot, 'title')}>\r\n        {heading}\r\n      </Typography>\r\n      <Box ml={{ sm: 'auto' }}>{breadcrumbComponent}</Box>\r\n\r\n      {children}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PageHeader;\r\n","import React from 'react';\r\nimport { Breadcrumbs, makeStyles } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { NavLink } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  textSm: {\r\n    fontSize: 12,\r\n  },\r\n  linkBlock: {\r\n    display: 'block',\r\n    color: 'inherit',\r\n  },\r\n}));\r\n\r\nconst PageBreadcrumbs = ({ items, ...rest }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Breadcrumbs className=\"bread-crumbs\" aria-label=\"breadcrumb {...rest}\">\r\n      {items.map((item, index) =>\r\n        item.isActive ? (\r\n          <Typography key={index} className={classes.textSm} color=\"textPrimary\">\r\n            {item.label}\r\n          </Typography>\r\n        ) : (\r\n          <NavLink key={index} className={clsx(classes.textSm, classes.linkBlock)} color=\"inherit\" to={item.link || '/'}>\r\n            {item.label}\r\n          </NavLink>\r\n        ),\r\n      )}\r\n    </Breadcrumbs>\r\n  );\r\n};\r\n\r\nexport default PageBreadcrumbs;\r\n","import React from 'react';\r\nimport { Box, Grid } from '@material-ui/core';\r\nimport CmtCard from '../../../../@coremat/CmtCard';\r\nimport { PageHeader } from '../index';\r\nimport GridContainer from '../../GridContainer';\r\nimport PageContainer from './PageContainer';\r\n\r\nconst CorematComponentDemo = ({ SourceCodeComponent, SettingsComponent, children }) => {\r\n  return (\r\n    <PageContainer>\r\n      <GridContainer>\r\n        <Grid item xs={12} md={7}>\r\n          <PageHeader heading=\"Preview\" />\r\n          <Box mb={8}>{children}</Box>\r\n          <CmtCard>{SourceCodeComponent}</CmtCard>\r\n        </Grid>\r\n        <Grid item xs={12} md={5}>\r\n          {SettingsComponent}\r\n        </Grid>\r\n      </GridContainer>\r\n    </PageContainer>\r\n  );\r\n};\r\n\r\nexport default CorematComponentDemo;\r\n","import React from 'react';\r\nimport ComponentsDemo from './ComponentsDemo';\r\n\r\nconst MuiComponentDemo = ({ pageTitle, menus, children }) => {\r\n  const breadcrumbs = [\r\n    { label: 'Home', link: '/' },\r\n    { label: 'Material UI Components', link: '/components/mui' },\r\n    { label: pageTitle, isActive: true },\r\n  ];\r\n  return (\r\n    <ComponentsDemo pageTitle={pageTitle} breadcrumbs={breadcrumbs} menus={menus}>\r\n      {children}\r\n    </ComponentsDemo>\r\n  );\r\n};\r\nexport default MuiComponentDemo;\r\n","import React from 'react';\r\nimport { Box, Hidden, List, ListItem, ListItemText, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PageContainer from './PageContainer';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  contentArea: {\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      paddingRight: theme.typography.pxToRem(30),\r\n      width: `calc(100% - ${theme.typography.pxToRem(175)})`,\r\n    },\r\n    [theme.breakpoints.up('lg')]: {\r\n      paddingRight: theme.typography.pxToRem(54),\r\n    },\r\n  },\r\n  contentSidebar: {\r\n    width: theme.typography.pxToRem(175),\r\n    height: `calc(100vh - ${theme.typography.pxToRem(102)})`,\r\n    position: 'sticky',\r\n    top: 30,\r\n    overflowY: 'auto',\r\n    flexShrink: 0,\r\n  },\r\n}));\r\n\r\nconst ComponentsDemo = ({ pageTitle, menus, breadcrumbs, children }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <PageContainer heading={pageTitle} breadcrumbs={breadcrumbs}>\r\n      <Box className={classes.root}>\r\n        <Box className={classes.contentArea}>{children}</Box>\r\n        <Hidden xsDown>\r\n          <Box className={classes.contentSidebar}>\r\n            <Typography component=\"h4\" variant=\"h4\">\r\n              Contents\r\n            </Typography>\r\n            <List>\r\n              {menus.map((menu, index) => (\r\n                <ListItem key={index} dense button component=\"a\" href={`#${menu.link}`}>\r\n                  <ListItemText primary={menu.label} />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </Box>\r\n        </Hidden>\r\n      </Box>\r\n    </PageContainer>\r\n  );\r\n};\r\nexport default ComponentsDemo;\r\n","var map = {\n\t\"./DrawingViewExample.txt\": 1440,\n\t\"./GeoLocationExample.txt\": 1441,\n\t\"./MapDirectionsExample.txt\": 1442,\n\t\"./MapKmLayerExample.txt\": 1443,\n\t\"./MapOverlayExample.txt\": 1444,\n\t\"./MapPopupInfoExample.txt\": 1445,\n\t\"./MarkerClustererExample.txt\": 1446,\n\t\"./SimpleMapExample.txt\": 1447,\n\t\"./StreetViewPanoramaExample.txt\": 1448,\n\t\"./StyledMapExample.txt\": 1449,\n\t\"./TrafficLayerExample.txt\": 1450\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1439;","export default \"import React from 'react';\\r\\nimport { GoogleMap, withGoogleMap } from 'react-google-maps';\\r\\nimport DrawingManager from 'react-google-maps/lib/components/drawing/DrawingManager';\\r\\nimport { Box } from '@material-ui/core';\\r\\n\\r\\n/*\\r\\n * Add <script src=\\\"https://maps.googleapis.com/maps/api/js\\\"></script> to your HTML to provide google.maps reference\\r\\n */\\r\\n\\r\\n/*\\r\\n * https://developers.google.com/maps/documentation/javascript/examples/drawing-tools\\r\\n *\\r\\n * Note: requires the Google Maps drawing API library in your script src\\r\\n *\\r\\n * Credits: thanks @idolize for the contribution!\\r\\n */\\r\\n\\r\\nconst google = window.google;\\r\\n\\r\\nconst DrawingExampleGoogleMap = withGoogleMap(() => (\\r\\n  <GoogleMap defaultZoom={15} defaultCenter={new google.maps.LatLng(47.646935, -122.303763)}>\\r\\n    <DrawingManager\\r\\n      defaultDrawingMode={google.maps.drawing.OverlayType.CIRCLE}\\r\\n      defaultOptions={{\\r\\n        drawingControl: true,\\r\\n        drawingControlOptions: {\\r\\n          position: google.maps.ControlPosition.TOP_CENTER,\\r\\n          drawingModes: [\\r\\n            google.maps.drawing.OverlayType.CIRCLE,\\r\\n            google.maps.drawing.OverlayType.POLYGON,\\r\\n            google.maps.drawing.OverlayType.POLYLINE,\\r\\n            google.maps.drawing.OverlayType.RECTANGLE,\\r\\n          ],\\r\\n        },\\r\\n        circleOptions: {\\r\\n          fillColor: '#ff0000',\\r\\n          fillOpacity: 0.2,\\r\\n          strokeWeight: 3,\\r\\n          clickable: false,\\r\\n          editable: true,\\r\\n          zIndex: 1,\\r\\n        },\\r\\n        rectangleOptions: {\\r\\n          fillColor: '#ff0000',\\r\\n          fillOpacity: 0.2,\\r\\n          strokeWeight: 3,\\r\\n          clickable: false,\\r\\n          editable: true,\\r\\n          zIndex: 1,\\r\\n        },\\r\\n      }}\\r\\n    />\\r\\n  </GoogleMap>\\r\\n));\\r\\n\\r\\nconst DrawingViewExample = () => {\\r\\n  return (\\r\\n    <DrawingExampleGoogleMap\\r\\n      loadingElement={<Box height={1} />}\\r\\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\\r\\n      mapElement={<Box height={1} />}\\r\\n    />\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default DrawingViewExample;\\r\\n\";","export default \"import React, { useEffect, useState } from 'react';\\r\\nimport { Circle, GoogleMap, InfoWindow, withGoogleMap } from 'react-google-maps';\\r\\nimport canUseDOM from 'can-use-dom';\\r\\nimport raf from 'raf';\\r\\nimport { Box } from '@material-ui/core';\\r\\n\\r\\nconst geoLocationExample =\\r\\n  canUseDOM && navigator.geolocation\\r\\n    ? navigator.geolocation\\r\\n    : {\\r\\n        getCurrentPosition(success, failure) {\\r\\n          failure(`Your browser doesn't support geolocation.`);\\r\\n        },\\r\\n      };\\r\\n\\r\\nconst GeolocationExampleGoogleMap = withGoogleMap(props => (\\r\\n  <GoogleMap defaultZoom={10} center={props.center}>\\r\\n    {props.center && (\\r\\n      <InfoWindow position={props.center}>\\r\\n        <Box>{props.content}</Box>\\r\\n      </InfoWindow>\\r\\n    )}\\r\\n    {props.center && (\\r\\n      <Circle\\r\\n        center={props.center}\\r\\n        radius={props.radius}\\r\\n        options={{\\r\\n          fillColor: 'red',\\r\\n          fillOpacity: 0.2,\\r\\n          strokeColor: 'red',\\r\\n          strokeOpacity: 1,\\r\\n          strokeWeight: 1,\\r\\n        }}\\r\\n      />\\r\\n    )}\\r\\n  </GoogleMap>\\r\\n));\\r\\n\\r\\n/*\\r\\n * https://developers.google.com/maps/documentation/javascript/examples/map-geolocation\\r\\n *\\r\\n * Add <script src=\\\"https://maps.googleapis.com/maps/api/js\\\"></script> to your HTML to provide google.maps reference\\r\\n */\\r\\nconst GeoLocationExample = () => {\\r\\n  const [center, setCenter] = useState(null);\\r\\n  const [content, setContent] = useState(null);\\r\\n  const [radius, setRadius] = useState(6000);\\r\\n\\r\\n  let isUnmounted = false;\\r\\n\\r\\n  useEffect(() => {\\r\\n    const tick = () => {\\r\\n      if (isUnmounted) {\\r\\n        return;\\r\\n      }\\r\\n      setRadius(Math.max(radius - 20, 0));\\r\\n\\r\\n      if (radius > 200) {\\r\\n        raf(tick);\\r\\n      }\\r\\n    };\\r\\n    geoLocationExample.getCurrentPosition(\\r\\n      position => {\\r\\n        if (isUnmounted) {\\r\\n          return;\\r\\n        }\\r\\n        setCenter({\\r\\n          lat: position.coords.latitude,\\r\\n          lng: position.coords.longitude,\\r\\n        });\\r\\n        setContent(`Location found using HTML5.`);\\r\\n        raf(tick);\\r\\n      },\\r\\n      reason => {\\r\\n        if (isUnmounted) {\\r\\n          return;\\r\\n        }\\r\\n\\r\\n        setCenter({\\r\\n          lat: 60,\\r\\n          lng: 105,\\r\\n        });\\r\\n        setContent(`Error: The Geolocation service failed (${reason}).`);\\r\\n      },\\r\\n    );\\r\\n\\r\\n    return () => {\\r\\n      isUnmounted = true;\\r\\n    };\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <GeolocationExampleGoogleMap\\r\\n      loadingElement={<Box height={1} />}\\r\\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\\r\\n      mapElement={<Box height={1} />}\\r\\n      center={center}\\r\\n      content={content}\\r\\n      radius={radius}\\r\\n    />\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default GeoLocationExample;\\r\\n\";","export default \"import React, { useEffect, useState } from 'react';\\r\\nimport { DirectionsRenderer, GoogleMap, withGoogleMap } from 'react-google-maps';\\r\\nimport { Box } from '@material-ui/core';\\r\\n\\r\\nconst google = window.google;\\r\\n\\r\\nconst DirectionsExampleGoogleMap = withGoogleMap(props => (\\r\\n  <GoogleMap defaultZoom={7} defaultCenter={props.center}>\\r\\n    {props.directions && <DirectionsRenderer directions={props.directions} />}\\r\\n  </GoogleMap>\\r\\n));\\r\\n\\r\\n/*\\r\\n * Add <script src=\\\"https://maps.googleapis.com/maps/api/js\\\"></script> to your HTML to provide google.maps reference\\r\\n */\\r\\nconst MapDirectionsExample = () => {\\r\\n  const origin = new google.maps.LatLng(41.85073, -87.65126);\\r\\n  const destination = new google.maps.LatLng(41.85258, -87.65141);\\r\\n  const [directions, setDirections] = useState(null);\\r\\n\\r\\n  useEffect(() => {\\r\\n    const DirectionsService = new google.maps.DirectionsService();\\r\\n\\r\\n    DirectionsService.route(\\r\\n      {\\r\\n        origin: origin,\\r\\n        destination: destination,\\r\\n        travelMode: google.maps.TravelMode.DRIVING,\\r\\n      },\\r\\n      (result, status) => {\\r\\n        if (status === google.maps.DirectionsStatus.OK) {\\r\\n          setDirections(result);\\r\\n        } else {\\r\\n          console.error(`error fetching directions ${result}`);\\r\\n        }\\r\\n      },\\r\\n    );\\r\\n  }, [destination, origin]);\\r\\n\\r\\n  return (\\r\\n    <DirectionsExampleGoogleMap\\r\\n      loadingElement={<Box height={1} />}\\r\\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\\r\\n      mapElement={<Box height={1} />}\\r\\n      center={origin}\\r\\n      directions={directions}\\r\\n    />\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default MapDirectionsExample;\\r\\n\";","export default \"import React from 'react';\\r\\nimport { GoogleMap, KmlLayer, withGoogleMap } from 'react-google-maps';\\r\\nimport { Box } from '@material-ui/core';\\r\\n\\r\\nconst KmlLayerExampleGoogleMap = withGoogleMap(() => (\\r\\n  <GoogleMap defaultZoom={8} defaultCenter={{ lat: 41.876, lng: -87.624 }}>\\r\\n    <KmlLayer url=\\\"http://googlemaps.github.io/js-v2-samples/ggeoxml/cta.kml\\\" options={{ preserveViewport: true }} />\\r\\n  </GoogleMap>\\r\\n));\\r\\n\\r\\n/*\\r\\n * Add <script src=\\\"https://maps.googleapis.com/maps/api/js\\\"></script> to your HTML to provide google.maps reference\\r\\n */\\r\\nconst MapKmLayerExample = () => {\\r\\n  return (\\r\\n    <KmlLayerExampleGoogleMap\\r\\n      loadingElement={<Box height={1} />}\\r\\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\\r\\n      mapElement={<Box height={1} />}\\r\\n    />\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default MapKmLayerExample;\\r\\n\";","export default \"import React, { useState } from 'react';\\r\\nimport Button from '@material-ui/core/Button';\\r\\nimport { GoogleMap, OverlayView, withGoogleMap } from 'react-google-maps';\\r\\nimport { Box, Typography } from '@material-ui/core';\\r\\n\\r\\nconst STYLES = {\\r\\n  mapContainer: {\\r\\n    height: 500,\\r\\n  },\\r\\n  overlayView: {\\r\\n    background: '#fff',\\r\\n    border: '1px solid #ccc',\\r\\n    padding: 15,\\r\\n  },\\r\\n};\\r\\n\\r\\nfunction getPixelPositionOffset(width, height) {\\r\\n  return { x: -(width / 2), y: -(height / 2) };\\r\\n}\\r\\n\\r\\nconst OverlayViewExampleGoogleMap = withGoogleMap(props => (\\r\\n  <GoogleMap defaultZoom={15} defaultCenter={{ lat: 47.646935, lng: -122.303763 }}>\\r\\n    <OverlayView\\r\\n      position={{ lat: 47.646935, lng: -122.303763 }}\\r\\n      /*\\r\\n       * An alternative to specifying position is specifying bounds.\\r\\n       * bounds can either be an instance of google.maps.LatLngBounds\\r\\n       * or an object in the following format:\\r\\n       * bounds={{\\r\\n       *    ne: { lat: 62.400471, lng: -150.005608 },\\r\\n       *    sw: { lat: 62.281819, lng: -150.287132 }\\r\\n       * }}\\r\\n       */\\r\\n      /*\\r\\n       * 1. Specify the pane the OverlayView will be rendered to. For\\r\\n       *    mouse interactivity, use `OverlayView.OVERLAY_MOUSE_TARGET`.\\r\\n       *    Defaults to `OverlayView.OVERLAY_LAYER`.\\r\\n       */\\r\\n      mapPaneName={OverlayView.OVERLAY_MOUSE_TARGET}\\r\\n      /*\\r\\n       * 2. Tweak the OverlayView's pixel position. In this case, we're\\r\\n       *    centering the content.\\r\\n       */\\r\\n      getPixelPositionOffset={getPixelPositionOffset}\\r\\n      /*\\r\\n       * 3. Create OverlayView content using standard React components.\\r\\n       */\\r\\n    >\\r\\n      <Box style={STYLES.overlayView}>\\r\\n        <Typography component=\\\"h1\\\" variant=\\\"h1\\\">\\r\\n          OverlayView\\r\\n        </Typography>\\r\\n        <Button variant=\\\"contained\\\" color=\\\"primary\\\" onClick={props.onClick}>\\r\\n          I have been clicked {props.count} time{props.count === 1 ? `` : `s`}\\r\\n        </Button>\\r\\n      </Box>\\r\\n    </OverlayView>\\r\\n  </GoogleMap>\\r\\n));\\r\\n\\r\\n/*\\r\\n * Add <script src=\\\"https://maps.googleapis.com/maps/api/js\\\"></script> to your HTML to provide google.maps reference\\r\\n */\\r\\nconst MapOverlayExample = () => {\\r\\n  const [count, setCount] = useState(0);\\r\\n\\r\\n  const handleClick = () => {\\r\\n    setCount(count + 1);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <OverlayViewExampleGoogleMap\\r\\n      loadingElement={<Box height={1} />}\\r\\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\\r\\n      mapElement={<Box height={1} />}\\r\\n      count={count}\\r\\n      onClick={handleClick}\\r\\n    />\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default MapOverlayExample;\\r\\n\";","export default \"import React, { useState } from 'react';\\r\\nimport { GoogleMap, InfoWindow, Marker, withGoogleMap } from 'react-google-maps';\\r\\nimport { Box, Typography } from '@material-ui/core';\\r\\n\\r\\nconst google = window.google;\\r\\n\\r\\nconst PopUpInfoWindowExampleGoogleMap = withGoogleMap(props => (\\r\\n  <GoogleMap defaultZoom={15} center={props.center}>\\r\\n    {props.markers.map((marker, index) => (\\r\\n      <Marker\\r\\n        defaultIcon={require('../../../../assets/images/marker.png'}\\r\\n        key={index}\\r\\n        position={marker.position}\\r\\n        onClick={() => props.onMarkerClick(marker)}>\\r\\n        {/*\\r\\n          Show info window only if the 'showInfo' key of the marker is true.\\r\\n          That is, when the Marker pin has been clicked and 'onCloseClick' has been\\r\\n          Successfully fired.\\r\\n        */}\\r\\n        {marker.showInfo && (\\r\\n          <InfoWindow onCloseClick={() => props.onMarkerClose(marker)}>\\r\\n            <Box>{marker.infoContent}</Box>\\r\\n          </InfoWindow>\\r\\n        )}\\r\\n      </Marker>\\r\\n    ))}\\r\\n  </GoogleMap>\\r\\n));\\r\\n\\r\\n/*\\r\\n *\\r\\n *  Add <script src=\\\"https://maps.googleapis.com/maps/api/js\\\"></script>\\r\\n *  to your HTML to provide google.maps reference\\r\\n *\\r\\n *  @author: @chiwoojo\\r\\n */\\r\\nconst MapPopupInfoExample = () => {\\r\\n  const center = {\\r\\n    lat: 47.646935,\\r\\n    lng: -122.303763,\\r\\n  };\\r\\n\\r\\n  const [markers, setMarkers] = useState([\\r\\n    {\\r\\n      position: new google.maps.LatLng(47.646145, -122.303763),\\r\\n      showInfo: false,\\r\\n      infoContent: (\\r\\n        <Box display=\\\"flex\\\">\\r\\n          <Box>\\r\\n            <svg id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 16 16\\\">\\r\\n              <path\\r\\n                d=\\\"M3.5 0c-1.7 0-3 1.6-3 3.5 0 1.7 1 3 2.3 3.4l-.5 8c0\\r\\n              .6.4 1 1 1h.5c.5 0 1-.4 1-1L4 7C5.5 6.4 6.5 5 6.5\\r\\n              3.4c0-2-1.3-3.5-3-3.5zm10 0l-.8 5h-.6l-.3-5h-.4L11\\r\\n              5H10l-.8-5H9v6.5c0 .3.2.5.5.5h1.3l-.5 8c0 .6.4 1 1 1h.4c.6 0\\r\\n              1-.4 1-1l-.5-8h1.3c.3 0 .5-.2.5-.5V0h-.4z\\\"\\r\\n              />\\r\\n            </svg>\\r\\n          </Box>\\r\\n          <Box ml={1}>\\r\\n            <Typography>UW Medical Center</Typography>\\r\\n            <Typography>1959 NE Pacific St</Typography>\\r\\n            <Typography>Seattle, WA 98195</Typography>\\r\\n          </Box>\\r\\n        </Box>\\r\\n      ),\\r\\n    },\\r\\n    {\\r\\n      position: new google.maps.LatLng(47.647935, -122.303763),\\r\\n      showInfo: false,\\r\\n      infoContent: (\\r\\n        <Box display=\\\"flex\\\">\\r\\n          <Box>\\r\\n            <svg id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 16 16\\\">\\r\\n              <path\\r\\n                d=\\\"M6 14.5c0 .828-.672 1.5-1.5 1.5S3 15.328 3 14.5 3.672\\r\\n              13 4.5 13s1.5.672 1.5 1.5zM16 14.5c0 .828-.672 1.5-1.5\\r\\n              1.5s-1.5-.672-1.5-1.5.672-1.5 1.5-1.5 1.5.672 1.5 1.5zM16\\r\\n              8V2H4c0-.552-.448-1-1-1H0v1h2l.75 6.438C2.294 8.805 2 9.368\\r\\n              2 10c0 1.105.895 2 2 2h12v-1H4c-.552 0-1-.448-1-1v-.01L16 8z\\\"\\r\\n              />\\r\\n            </svg>\\r\\n          </Box>\\r\\n          <Box ml={1}>\\r\\n            <Typography>University of Washington Intramural Activities (IMA) Building</Typography>\\r\\n            <Typography>3924 Montlake Blvd NE</Typography>\\r\\n            <Typography>Seattle, WA 98195</Typography>\\r\\n          </Box>\\r\\n        </Box>\\r\\n      ),\\r\\n    },\\r\\n  ]);\\r\\n\\r\\n  // Toggle to 'true' to show InfoWindow and re-renders simple\\r\\n  const handleMarkerClick = targetMarker => {\\r\\n    setMarkers(() => {\\r\\n      markers.map(marker => {\\r\\n        if (marker === targetMarker) {\\r\\n          return {\\r\\n            ...marker,\\r\\n            showInfo: true,\\r\\n          };\\r\\n        }\\r\\n        return marker;\\r\\n      });\\r\\n    });\\r\\n  };\\r\\n\\r\\n  const handleMarkerClose = targetMarker => {\\r\\n    setMarkers(() => {\\r\\n      markers.map(marker => {\\r\\n        if (marker === targetMarker) {\\r\\n          return {\\r\\n            ...marker,\\r\\n            showInfo: false,\\r\\n          };\\r\\n        }\\r\\n        return marker;\\r\\n      });\\r\\n    });\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <PopUpInfoWindowExampleGoogleMap\\r\\n      loadingElement={<Box height={1} />}\\r\\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\\r\\n      mapElement={<Box height={1} />}\\r\\n      center={center}\\r\\n      markers={markers}\\r\\n      onMarkerClick={handleMarkerClick}\\r\\n      onMarkerClose={handleMarkerClose}\\r\\n    />\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default MapPopupInfoExample;\\r\\n\";","export default \"import React, { useEffect, useState } from 'react';\\r\\n\\r\\nimport fetch from 'isomorphic-fetch';\\r\\nimport { GoogleMap, Marker, withGoogleMap } from 'react-google-maps';\\r\\nimport MarkerClusterer from 'react-google-maps/lib/components/addons/MarkerClusterer';\\r\\nimport { Box } from '@material-ui/core';\\r\\n\\r\\nconst MarkerClustererExampleGoogleMap = withGoogleMap(props => (\\r\\n  <GoogleMap defaultZoom={3} defaultCenter={{ lat: 25.0391667, lng: 121.525 }}>\\r\\n    <MarkerClusterer averageCenter enableRetinaIcons gridSize={60}>\\r\\n      {props.markers.map(marker => (\\r\\n        <Marker position={{ lat: marker.latitude, lng: marker.longitude }} key={marker.photo_id} />\\r\\n      ))}\\r\\n    </MarkerClusterer>\\r\\n  </GoogleMap>\\r\\n));\\r\\n\\r\\nconst MarkerClustererExample = () => {\\r\\n  const [markers, setMarkers] = useState([]);\\r\\n\\r\\n  useEffect(() => {\\r\\n    fetch(\\r\\n      `https://gist.githubusercontent.com/farrrr/dfda7dd7fccfec5474d3/raw/758852bbc1979f6c4522ab4e92d1c92cba8fb0dc/data.json`,\\r\\n    )\\r\\n      .then(res => res.json())\\r\\n      .then(data => {\\r\\n        setMarkers(data.photos);\\r\\n      });\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <MarkerClustererExampleGoogleMap\\r\\n      loadingElement={<Box height={1} />}\\r\\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\\r\\n      mapElement={<Box height={1} />}\\r\\n      markers={markers}\\r\\n    />\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default MarkerClustererExample;\\r\\n\";","export default \"import React from 'react';\\r\\nimport { GoogleMap, withGoogleMap } from 'react-google-maps';\\r\\nimport { Box } from '@material-ui/core';\\r\\n\\r\\n/*\\r\\n * Sample From: https://developers.google.com/maps/documentation/javascript/examples/map-simple\\r\\n */\\r\\n\\r\\nconst SimpleMapExampleGoogleMap = withGoogleMap(() => (\\r\\n  <GoogleMap defaultZoom={15} defaultCenter={{ lat: 47.646935, lng: -122.303763 }} />\\r\\n));\\r\\n\\r\\n/*\\r\\n * Add <script src=\\\"https://maps.googleapis.com/maps/api/js\\\"></script> to your HTML to provide google.maps reference\\r\\n */\\r\\nconst SimpleMapExample = () => {\\r\\n  return (\\r\\n    <SimpleMapExampleGoogleMap\\r\\n      loadingElement={<Box height={1} />}\\r\\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\\r\\n      mapElement={<Box height={1} />}\\r\\n    />\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default SimpleMapExample;\\r\\n\";","export default \"import React from 'react';\\r\\nimport { GoogleMap, OverlayView, StreetViewPanorama, withGoogleMap } from 'react-google-maps';\\r\\nimport { Box } from '@material-ui/core';\\r\\n\\r\\nconst coordinates = { lat: 49.2853171, lng: -123.1119202 };\\r\\n\\r\\nconst STYLES = {\\r\\n  overlayView: {\\r\\n    background: `red`,\\r\\n    color: `white`,\\r\\n    padding: 5,\\r\\n    borderRadius: `50%`,\\r\\n  },\\r\\n};\\r\\n\\r\\nfunction getPixelPositionOffset(width, height) {\\r\\n  return { x: -(width / 2), y: -(height / 2) };\\r\\n}\\r\\n\\r\\nconst StreetViewPanoramaExampleGoogleMap = withGoogleMap(() => (\\r\\n  <GoogleMap defaultZoom={8} defaultCenter={coordinates}>\\r\\n    <StreetViewPanorama defaultPosition={coordinates} visible>\\r\\n      <OverlayView\\r\\n        position={{ lat: 49.28590291211115, lng: -123.11248166065218 }}\\r\\n        mapPaneName={OverlayView.OVERLAY_LAYER}\\r\\n        getPixelPositionOffset={getPixelPositionOffset}>\\r\\n        <div style={STYLES.overlayView}>OverlayView</div>\\r\\n      </OverlayView>\\r\\n    </StreetViewPanorama>\\r\\n  </GoogleMap>\\r\\n));\\r\\n\\r\\n/**\\r\\n * You can pass in an `containerElement` to render `StreetViewPanorama` in its own containers\\r\\n * At this point the `GoogleMap` wrapper and `withGoogleMap` HOC become optional,\\r\\n * so you can either render a map and StreetView at the same time,\\r\\n * or just the StreetView on its own\\r\\n *    <StreetViewPanorama\\r\\n *      containerElement={<div style={{ width: `100%`, height: `100%` }} />}\\r\\n *      defaultPosition={coordinates}\\r\\n *      visible\\r\\n *    />\\r\\n */\\r\\n\\r\\n/*\\r\\n * Add <script src=\\\"https://maps.googleapis.com/maps/api/js\\\"></script> to your HTML to provide google.maps reference\\r\\n */\\r\\nconst StreetViewPanoramaExample = () => {\\r\\n  return (\\r\\n    <StreetViewPanoramaExampleGoogleMap\\r\\n      loadingElement={<Box height={1} />}\\r\\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\\r\\n      mapElement={<Box height={1} />}\\r\\n    />\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default StreetViewPanoramaExample;\\r\\n\";","export default \"import React from 'react';\\r\\nimport { GoogleMap, withGoogleMap } from 'react-google-maps';\\r\\n\\r\\nimport InfoBox from 'react-google-maps/lib/components/addons/InfoBox';\\r\\n\\r\\nimport fancyMapStyles from '../data/fancyMapStyles.json';\\r\\nimport { Box } from '@material-ui/core';\\r\\n\\r\\nconst google = window.google;\\r\\n\\r\\nconst StyledMapExampleGoogleMap = withGoogleMap(props => (\\r\\n  <GoogleMap defaultZoom={11} defaultCenter={props.center} defaultOptions={{ styles: fancyMapStyles }}>\\r\\n    <InfoBox defaultPosition={props.center} options={{ closeBoxURL: ``, enableEventPropagation: true }}>\\r\\n      <Box\\r\\n        style={{ backgroundColor: `yellow`, opacity: 0.75, padding: `20px` }}\\r\\n        onClick={props.onClickFromChildrenOfInfoBox}>\\r\\n        <Box fontSize={16} color=\\\"#08233B\\\">\\r\\n          Taipei\\r\\n        </Box>\\r\\n      </Box>\\r\\n    </InfoBox>\\r\\n  </GoogleMap>\\r\\n));\\r\\n\\r\\n/*\\r\\n * Add <script src=\\\"https://maps.googleapis.com/maps/api/js\\\"></script> to your HTML to provide google.maps reference\\r\\n */\\r\\nconst StyledMapExample = () => {\\r\\n  const handleClickFromChildrenOfInfoBox = e => {\\r\\n    console.log(e);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <StyledMapExampleGoogleMap\\r\\n      loadingElement={<Box height={1} />}\\r\\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\\r\\n      mapElement={<Box height={1} />}\\r\\n      center={new google.maps.LatLng(44.8799929, 21.3190073)}\\r\\n      onClickFromChildrenOfInfoBox={handleClickFromChildrenOfInfoBox}\\r\\n    />\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default StyledMapExample;\\r\\n\";","export default \"import React from 'react';\\r\\nimport { GoogleMap, TrafficLayer, withGoogleMap } from 'react-google-maps';\\r\\nimport { Box } from '@material-ui/core';\\r\\n\\r\\nconst TrafficLayerExampleGoogleMap = withGoogleMap(() => (\\r\\n  <GoogleMap defaultZoom={15} defaultCenter={{ lat: 47.646935, lng: -122.303763 }}>\\r\\n    <TrafficLayer autoUpdate />\\r\\n  </GoogleMap>\\r\\n));\\r\\n\\r\\n/*\\r\\n * Add <script src=\\\"https://maps.googleapis.com/maps/api/js\\\"></script> to your HTML to provide google.maps reference\\r\\n */\\r\\nconst TrafficLayerExample = () => {\\r\\n  return (\\r\\n    <TrafficLayerExampleGoogleMap\\r\\n      loadingElement={<Box height={1} />}\\r\\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\\r\\n      mapElement={<Box height={1} />}\\r\\n    />\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default TrafficLayerExample;\\r\\n\";","import React, { useEffect, useState } from 'react';\r\n\r\nimport fetch from 'isomorphic-fetch';\r\nimport { GoogleMap, Marker, withGoogleMap } from 'react-google-maps';\r\nimport MarkerClusterer from 'react-google-maps/lib/components/addons/MarkerClusterer';\r\nimport { Box } from '@material-ui/core';\r\n\r\nconst MarkerClustererExampleGoogleMap = withGoogleMap(props => (\r\n  <GoogleMap defaultZoom={3} defaultCenter={{ lat: 25.0391667, lng: 121.525 }}>\r\n    <MarkerClusterer averageCenter enableRetinaIcons gridSize={60}>\r\n      {props.markers.map(marker => (\r\n        <Marker position={{ lat: marker.latitude, lng: marker.longitude }} key={marker.photo_id} />\r\n      ))}\r\n    </MarkerClusterer>\r\n  </GoogleMap>\r\n));\r\n\r\nconst MarkerClustererExample = () => {\r\n  const [markers, setMarkers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://gist.githubusercontent.com/farrrr/dfda7dd7fccfec5474d3/raw/758852bbc1979f6c4522ab4e92d1c92cba8fb0dc/data.json`,\r\n    )\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        setMarkers(data.photos);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <MarkerClustererExampleGoogleMap\r\n      loadingElement={<Box height={1} />}\r\n      containerElement={<Box height={{ xs: 300, sm: 400 }} />}\r\n      mapElement={<Box height={1} />}\r\n      markers={markers}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MarkerClustererExample;\r\n","import React from 'react';\r\nimport { Box, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { CodeViewerCard } from '../../../@jumbo/components/Common';\r\nimport MarkerClustererExample from './demo/MarkerClustererExample';\r\nimport ComponentsDemo from '../../../@jumbo/components/PageComponents/layouts/ComponentsDemo';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  section: {\r\n    '&:not(:last-child)': {\r\n      marginBottom: theme.typography.pxToRem(32),\r\n    },\r\n  },\r\n  sectionHeading: {\r\n    marginBottom: theme.typography.pxToRem(16),\r\n  },\r\n}));\r\n\r\nconst requireRaw = require.context('!raw-loader!../../../@fake-db/maps', false, /\\.(txt|js|md|tsx)$/);\r\n\r\nconst demos = [\r\n  {\r\n    label: 'Marker Cluster',\r\n    link: 'marker-cluster',\r\n    component: <MarkerClustererExample />,\r\n    filename: './MarkerClustererExample.txt',\r\n  },\r\n];\r\n\r\nconst breadcrumbs = [\r\n  { label: 'Home', link: '/' },\r\n  { label: 'Maps', link: '/visualization/map' },\r\n  { label: 'Marker Clusterer', isActive: true },\r\n];\r\n\r\nexport default function MarkerClusterer() {\r\n  const classes = useStyles();\r\n  return (\r\n    <ComponentsDemo pageTitle=\"Marker Clusterer\" menus={demos} breadcrumbs={breadcrumbs}>\r\n      {demos.map((menu, index) => (\r\n        <Box key={index} id={menu.link} className={classes.section}>\r\n          <Typography component=\"h3\" variant=\"inherit\" className={classes.sectionHeading}>\r\n            {menu.label}\r\n          </Typography>\r\n          <CodeViewerCard code={requireRaw(menu.filename).default} language=\"jsx\">\r\n            {menu.component}\r\n          </CodeViewerCard>\r\n        </Box>\r\n      ))}\r\n    </ComponentsDemo>\r\n  );\r\n}\r\n"],"sourceRoot":""}